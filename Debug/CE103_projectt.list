
CE103_projectt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c78  08008b30  08008b30  00009b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a8  0800c7a8  0000e098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7a8  0800c7a8  0000d7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7b0  0800c7b0  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7b0  0800c7b0  0000d7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7b4  0800c7b4  0000d7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800c7b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e098  2**0
                  CONTENTS
 10 .bss          000018ac  20000098  20000098  0000e098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001944  20001944  0000e098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001250b  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cef  00000000  00000000  000205d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  000232c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc2  00000000  00000000  000244f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241f7  00000000  00000000  000252b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015175  00000000  00000000  000494a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddce4  00000000  00000000  0005e61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054f4  00000000  00000000  0013c348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0014183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b18 	.word	0x08008b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08008b18 	.word	0x08008b18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b988 	b.w	8000ed4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	468e      	mov	lr, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	4688      	mov	r8, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d962      	bls.n	8000cb8 <__udivmoddi4+0xdc>
 8000bf2:	fab2 f682 	clz	r6, r2
 8000bf6:	b14e      	cbz	r6, 8000c0c <__udivmoddi4+0x30>
 8000bf8:	f1c6 0320 	rsb	r3, r6, #32
 8000bfc:	fa01 f806 	lsl.w	r8, r1, r6
 8000c00:	fa20 f303 	lsr.w	r3, r0, r3
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	ea43 0808 	orr.w	r8, r3, r8
 8000c0a:	40b4      	lsls	r4, r6
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	fa1f fc87 	uxth.w	ip, r7
 8000c14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c30:	f080 80ea 	bcs.w	8000e08 <__udivmoddi4+0x22c>
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f240 80e7 	bls.w	8000e08 <__udivmoddi4+0x22c>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	443b      	add	r3, r7
 8000c3e:	1a9a      	subs	r2, r3, r2
 8000c40:	b2a3      	uxth	r3, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c52:	459c      	cmp	ip, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x8e>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	f080 80d6 	bcs.w	8000e0c <__udivmoddi4+0x230>
 8000c60:	459c      	cmp	ip, r3
 8000c62:	f240 80d3 	bls.w	8000e0c <__udivmoddi4+0x230>
 8000c66:	443b      	add	r3, r7
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6e:	eba3 030c 	sub.w	r3, r3, ip
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40f3      	lsrs	r3, r6
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xb6>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb0>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x14c>
 8000c9a:	4573      	cmp	r3, lr
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xc8>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 8105 	bhi.w	8000eae <__udivmoddi4+0x2d2>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	4690      	mov	r8, r2
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e5      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb6:	e7e2      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f000 8090 	beq.w	8000dde <__udivmoddi4+0x202>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f040 80a4 	bne.w	8000e10 <__udivmoddi4+0x234>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	0c03      	lsrs	r3, r0, #16
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	b2bc      	uxth	r4, r7
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ce2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x11e>
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x11c>
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	f200 80e0 	bhi.w	8000eb8 <__udivmoddi4+0x2dc>
 8000cf8:	46c4      	mov	ip, r8
 8000cfa:	1a9b      	subs	r3, r3, r2
 8000cfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d08:	fb02 f404 	mul.w	r4, r2, r4
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x144>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x142>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f200 80ca 	bhi.w	8000eb2 <__udivmoddi4+0x2d6>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa0e f401 	lsl.w	r4, lr, r1
 8000d38:	fa20 f306 	lsr.w	r3, r0, r6
 8000d3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d44:	4323      	orrs	r3, r4
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	fa1f fc87 	uxth.w	ip, r7
 8000d4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d909      	bls.n	8000d7c <__udivmoddi4+0x1a0>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6e:	f080 809c 	bcs.w	8000eaa <__udivmoddi4+0x2ce>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f240 8099 	bls.w	8000eaa <__udivmoddi4+0x2ce>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	443c      	add	r4, r7
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	fa1f fe83 	uxth.w	lr, r3
 8000d84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d88:	fb09 4413 	mls	r4, r9, r3, r4
 8000d8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d94:	45a4      	cmp	ip, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1ce>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9e:	f080 8082 	bcs.w	8000ea6 <__udivmoddi4+0x2ca>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d97f      	bls.n	8000ea6 <__udivmoddi4+0x2ca>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db6:	4564      	cmp	r4, ip
 8000db8:	4673      	mov	r3, lr
 8000dba:	46e1      	mov	r9, ip
 8000dbc:	d362      	bcc.n	8000e84 <__udivmoddi4+0x2a8>
 8000dbe:	d05f      	beq.n	8000e80 <__udivmoddi4+0x2a4>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x1fe>
 8000dc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	fa22 f301 	lsr.w	r3, r2, r1
 8000dd2:	431e      	orrs	r6, r3
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e74f      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000dde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000de2:	0c01      	lsrs	r1, r0, #16
 8000de4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de8:	b280      	uxth	r0, r0
 8000dea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dee:	463b      	mov	r3, r7
 8000df0:	4638      	mov	r0, r7
 8000df2:	463c      	mov	r4, r7
 8000df4:	46b8      	mov	r8, r7
 8000df6:	46be      	mov	lr, r7
 8000df8:	2620      	movs	r6, #32
 8000dfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfe:	eba2 0208 	sub.w	r2, r2, r8
 8000e02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e06:	e766      	b.n	8000cd6 <__udivmoddi4+0xfa>
 8000e08:	4601      	mov	r1, r0
 8000e0a:	e718      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e72c      	b.n	8000c6a <__udivmoddi4+0x8e>
 8000e10:	f1c6 0220 	rsb	r2, r6, #32
 8000e14:	fa2e f302 	lsr.w	r3, lr, r2
 8000e18:	40b7      	lsls	r7, r6
 8000e1a:	40b1      	lsls	r1, r6
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e24:	430a      	orrs	r2, r1
 8000e26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e30:	0c11      	lsrs	r1, r2, #16
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb08 f904 	mul.w	r9, r8, r4
 8000e3a:	40b0      	lsls	r0, r6
 8000e3c:	4589      	cmp	r9, r1
 8000e3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e42:	b280      	uxth	r0, r0
 8000e44:	d93e      	bls.n	8000ec4 <__udivmoddi4+0x2e8>
 8000e46:	1879      	adds	r1, r7, r1
 8000e48:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e4c:	d201      	bcs.n	8000e52 <__udivmoddi4+0x276>
 8000e4e:	4589      	cmp	r9, r1
 8000e50:	d81f      	bhi.n	8000e92 <__udivmoddi4+0x2b6>
 8000e52:	eba1 0109 	sub.w	r1, r1, r9
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fb09 f804 	mul.w	r8, r9, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	b292      	uxth	r2, r2
 8000e64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d229      	bcs.n	8000ec0 <__udivmoddi4+0x2e4>
 8000e6c:	18ba      	adds	r2, r7, r2
 8000e6e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e72:	d2c4      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d2c2      	bcs.n	8000dfe <__udivmoddi4+0x222>
 8000e78:	f1a9 0102 	sub.w	r1, r9, #2
 8000e7c:	443a      	add	r2, r7
 8000e7e:	e7be      	b.n	8000dfe <__udivmoddi4+0x222>
 8000e80:	45f0      	cmp	r8, lr
 8000e82:	d29d      	bcs.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e84:	ebbe 0302 	subs.w	r3, lr, r2
 8000e88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	46e1      	mov	r9, ip
 8000e90:	e796      	b.n	8000dc0 <__udivmoddi4+0x1e4>
 8000e92:	eba7 0909 	sub.w	r9, r7, r9
 8000e96:	4449      	add	r1, r9
 8000e98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea0:	fb09 f804 	mul.w	r8, r9, r4
 8000ea4:	e7db      	b.n	8000e5e <__udivmoddi4+0x282>
 8000ea6:	4673      	mov	r3, lr
 8000ea8:	e77f      	b.n	8000daa <__udivmoddi4+0x1ce>
 8000eaa:	4650      	mov	r0, sl
 8000eac:	e766      	b.n	8000d7c <__udivmoddi4+0x1a0>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e6fd      	b.n	8000cae <__udivmoddi4+0xd2>
 8000eb2:	443b      	add	r3, r7
 8000eb4:	3a02      	subs	r2, #2
 8000eb6:	e733      	b.n	8000d20 <__udivmoddi4+0x144>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	443b      	add	r3, r7
 8000ebe:	e71c      	b.n	8000cfa <__udivmoddi4+0x11e>
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x222>
 8000ec4:	eba1 0109 	sub.w	r1, r1, r9
 8000ec8:	46c4      	mov	ip, r8
 8000eca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ece:	fb09 f804 	mul.w	r8, r9, r4
 8000ed2:	e7c4      	b.n	8000e5e <__udivmoddi4+0x282>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 fbd9 	bl	8002694 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f8bf 	bl	8001064 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fabb 	bl	8001460 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 fa91 	bl	8001410 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000eee:	f000 fa61 	bl	80013b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000ef2:	f000 f973 	bl	80011dc <MX_TIM1_Init>
  MX_ADC1_Init();
 8000ef6:	f000 f91f 	bl	8001138 <MX_ADC1_Init>
  MX_FSMC_Init();
 8000efa:	f000 fb2b 	bl	8001554 <MX_FSMC_Init>
  MX_TIM2_Init();
 8000efe:	f000 fa0d 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Khoi tao LCD
  lcdInit();
 8000f02:	f005 fb95 	bl	8006630 <lcdInit>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2102      	movs	r1, #2
 8000f0a:	484d      	ldr	r0, [pc, #308]	@ (8001040 <main+0x168>)
 8000f0c:	f002 febc 	bl	8003c88 <HAL_GPIO_WritePin>

  // Bat dau cac tien trinh nen
  HAL_TIM_Base_Start(&htim2); // Bat dau Timer de kich ADC
 8000f10:	484c      	ldr	r0, [pc, #304]	@ (8001044 <main+0x16c>)
 8000f12:	f003 fcdd 	bl	80048d0 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BLOCK_SIZE * 2); // Bat dau ADC lay mau qua DMA
 8000f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1a:	494b      	ldr	r1, [pc, #300]	@ (8001048 <main+0x170>)
 8000f1c:	484b      	ldr	r0, [pc, #300]	@ (800104c <main+0x174>)
 8000f1e:	f001 fc93 	bl	8002848 <HAL_ADC_Start_DMA>

  // Ve giao dien menu ban dau
  drawMenu(selectedEffect);
 8000f22:	4b4b      	ldr	r3, [pc, #300]	@ (8001050 <main+0x178>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb84 	bl	8001634 <drawMenu>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    // Doc trang thai tu cac thiet bi dau vao mot lan o dau vong lap
	    Encoder_Rotation rotation = checkRotaryEncoder();
 8000f2c:	f000 fc5e 	bl	80017ec <checkRotaryEncoder>
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
	    uint8_t switch_pressed = readSwitch();
 8000f34:	f000 fc8a 	bl	800184c <readSwitch>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71bb      	strb	r3, [r7, #6]

	    // Xu ly logic dua tren trang thai hien tai cua chuong trinh
	    switch(currentState)
 8000f3c:	4b45      	ldr	r3, [pc, #276]	@ (8001054 <main+0x17c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d04f      	beq.n	8000fe4 <main+0x10c>
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	dc71      	bgt.n	800102c <main+0x154>
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <main+0x7a>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d02a      	beq.n	8000fa6 <main+0xce>
 8000f50:	e06c      	b.n	800102c <main+0x154>
	    {
	        // TRUONG HOP 1: Dang o man hinh Menu
	        case STATE_MENU:
	            // Neu nguoi dung xoay encoder...
	            if (rotation != ENCODER_NO_ROTATION)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00e      	beq.n	8000f76 <main+0x9e>
	            {
	                // ...thay doi hieu ung duoc chon (chuyen qua lai giua 0 va 1).
	                selectedEffect = (selectedEffect + 1) % 2;
 8000f58:	4b3d      	ldr	r3, [pc, #244]	@ (8001050 <main+0x178>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	bfb8      	it	lt
 8000f66:	425b      	neglt	r3, r3
 8000f68:	4a39      	ldr	r2, [pc, #228]	@ (8001050 <main+0x178>)
 8000f6a:	6013      	str	r3, [r2, #0]
	                // Ve lai menu de cap nhat giao dien, lam noi bat lua chon moi.
	                drawMenu(selectedEffect);
 8000f6c:	4b38      	ldr	r3, [pc, #224]	@ (8001050 <main+0x178>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fb5f 	bl	8001634 <drawMenu>
	            }
	            // Neu nguoi dung nhan nut SW...
	            if (switch_pressed)
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d052      	beq.n	8001022 <main+0x14a>
	            {
	                // Kiem tra xem hieu ung nao dang duoc chon
	                if (selectedEffect == 0) {
 8000f7c:	4b34      	ldr	r3, [pc, #208]	@ (8001050 <main+0x178>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d106      	bne.n	8000f92 <main+0xba>
	                    // Chuyen sang trang thai chay hieu ung "SOUND SYNC"
	                    currentState = STATE_EFFECT_SOUND_SYNC;
 8000f84:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <main+0x17c>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
	                    // Hien thi man hinh thong bao tuong ung
	                    drawEffectScreen("SOUND SYNC");
 8000f8a:	4833      	ldr	r0, [pc, #204]	@ (8001058 <main+0x180>)
 8000f8c:	f000 fbea 	bl	8001764 <drawEffectScreen>
	                    drawEffectScreen("RAINBOW");
	                    // Reset lai bien dem de hieu ung cau vong bat dau tu dau
	                    rainbow_effStep = 0;
	                }
	            }
	            break;
 8000f90:	e047      	b.n	8001022 <main+0x14a>
	                    currentState = STATE_EFFECT_RAINBOW;
 8000f92:	4b30      	ldr	r3, [pc, #192]	@ (8001054 <main+0x17c>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	701a      	strb	r2, [r3, #0]
	                    drawEffectScreen("RAINBOW");
 8000f98:	4830      	ldr	r0, [pc, #192]	@ (800105c <main+0x184>)
 8000f9a:	f000 fbe3 	bl	8001764 <drawEffectScreen>
	                    rainbow_effStep = 0;
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <main+0x188>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	801a      	strh	r2, [r3, #0]
	            break;
 8000fa4:	e03d      	b.n	8001022 <main+0x14a>

	        // TRUONG HOP 2: Dang chay hieu ung "Sound Sync"
	        case STATE_EFFECT_SOUND_SYNC:
	            // Lien tuc goi ham de chay logic hieu ung
	            run_sound_sync_effect();
 8000fa6:	f001 f81f 	bl	8001fe8 <run_sound_sync_effect>
	            // Neu nguoi dung nhan nut SW trong khi hieu ung dang chay...
	            if (switch_pressed) {
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d03a      	beq.n	8001026 <main+0x14e>
	                 // ...chuyen trang thai ve lai Menu
	                 currentState = STATE_MENU;
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <main+0x17c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	                 // Tat het den LED truoc khi ve menu de tranh de lai hieu ung cu
	                 for(int i=0; i<MAX_LED; i++) Set_LED(i,0,0,0);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e008      	b.n	8000fce <main+0xf6>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 fdda 	bl	8001b7c <Set_LED>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b31      	cmp	r3, #49	@ 0x31
 8000fd2:	ddf3      	ble.n	8000fbc <main+0xe4>
	                 WS2812_Send();
 8000fd4:	f000 fea6 	bl	8001d24 <WS2812_Send>
	                 // Ve lai giao dien menu
	                 drawMenu(selectedEffect);
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <main+0x178>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 fb29 	bl	8001634 <drawMenu>
	            }
	            break;
 8000fe2:	e020      	b.n	8001026 <main+0x14e>

	        // TRUONG HOP 3: Dang chay hieu ung "Rainbow"
	        case STATE_EFFECT_RAINBOW:
	            // Lien tuc goi ham de chay logic hieu ung
	            run_rainbow_effect();
 8000fe4:	f000 fc54 	bl	8001890 <run_rainbow_effect>
	            // Neu nguoi dung nhan nut SW trong khi hieu ung dang chay...
	            if (switch_pressed) {
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d01d      	beq.n	800102a <main+0x152>
	                // ...chuyen trang thai ve lai Menu
	                currentState = STATE_MENU;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <main+0x17c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
	                // Tat het den LED
	                for(int i=0; i<MAX_LED; i++) Set_LED(i,0,0,0);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	e008      	b.n	800100c <main+0x134>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	68b8      	ldr	r0, [r7, #8]
 8001002:	f000 fdbb 	bl	8001b7c <Set_LED>
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3301      	adds	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b31      	cmp	r3, #49	@ 0x31
 8001010:	ddf3      	ble.n	8000ffa <main+0x122>
	                WS2812_Send();
 8001012:	f000 fe87 	bl	8001d24 <WS2812_Send>
	                // Ve lai giao dien menu
	                drawMenu(selectedEffect);
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <main+0x178>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fb0a 	bl	8001634 <drawMenu>
	            }
	            break;
 8001020:	e003      	b.n	800102a <main+0x152>
	            break;
 8001022:	bf00      	nop
 8001024:	e002      	b.n	800102c <main+0x154>
	            break;
 8001026:	bf00      	nop
 8001028:	e000      	b.n	800102c <main+0x154>
	            break;
 800102a:	bf00      	nop
	    }
	    // Khi o man hinh menu, them mot do tre nho de giam tai cho CPU
	    if (currentState == STATE_MENU) HAL_Delay(10);
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <main+0x17c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f47f af7b 	bne.w	8000f2c <main+0x54>
 8001036:	200a      	movs	r0, #10
 8001038:	f001 fb9e 	bl	8002778 <HAL_Delay>
  {
 800103c:	e776      	b.n	8000f2c <main+0x54>
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	200001a4 	.word	0x200001a4
 8001048:	20000788 	.word	0x20000788
 800104c:	200000b4 	.word	0x200000b4
 8001050:	20000784 	.word	0x20000784
 8001054:	20000780 	.word	0x20000780
 8001058:	08008b30 	.word	0x08008b30
 800105c:	08008b3c 	.word	0x08008b3c
 8001060:	200016e4 	.word	0x200016e4

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	@ 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	2230      	movs	r2, #48	@ 0x30
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 f828 	bl	80070c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	4a27      	ldr	r2, [pc, #156]	@ (8001130 <SystemClock_Config+0xcc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <SystemClock_Config+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <SystemClock_Config+0xd0>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d4:	2304      	movs	r3, #4
 80010d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010d8:	2348      	movs	r3, #72	@ 0x48
 80010da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010e0:	2303      	movs	r3, #3
 80010e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fef5 	bl	8003ed8 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f4:	f001 f81c 	bl	8002130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	2302      	movs	r3, #2
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f003 f956 	bl	80043c8 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001122:	f001 f805 	bl	8002130 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	@ 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114a:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 800114c:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <MX_ADC1_Init+0xa0>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001152:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001156:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001178:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 800117c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 800118a:	2201      	movs	r2, #1
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 8001198:	2201      	movs	r2, #1
 800119a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119c:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 800119e:	f001 fb0f 	bl	80027c0 <HAL_ADC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80011a8:	f000 ffc2 	bl	8002130 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011b4:	2307      	movs	r3, #7
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_ADC1_Init+0x9c>)
 80011be:	f001 fc6b 	bl	8002a98 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011c8:	f000 ffb2 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000b4 	.word	0x200000b4
 80011d8:	40012000 	.word	0x40012000

080011dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2220      	movs	r2, #32
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f005 ff57 	bl	80070c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800121a:	4b3e      	ldr	r3, [pc, #248]	@ (8001314 <MX_TIM1_Init+0x138>)
 800121c:	4a3e      	ldr	r2, [pc, #248]	@ (8001318 <MX_TIM1_Init+0x13c>)
 800121e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001220:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800122c:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <MX_TIM1_Init+0x138>)
 800122e:	2259      	movs	r2, #89	@ 0x59
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <MX_TIM1_Init+0x138>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b35      	ldr	r3, [pc, #212]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001244:	4833      	ldr	r0, [pc, #204]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001246:	f003 faf3 	bl	8004830 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001250:	f000 ff6e 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800125a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800125e:	4619      	mov	r1, r3
 8001260:	482c      	ldr	r0, [pc, #176]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001262:	f004 f843 	bl	80052ec <HAL_TIM_ConfigClockSource>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800126c:	f000 ff60 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001270:	4828      	ldr	r0, [pc, #160]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001272:	f003 fb95 	bl	80049a0 <HAL_TIM_PWM_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800127c:	f000 ff58 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001288:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800128c:	4619      	mov	r1, r3
 800128e:	4821      	ldr	r0, [pc, #132]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001290:	f004 fd16 	bl	8005cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800129a:	f000 ff49 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	4814      	ldr	r0, [pc, #80]	@ (8001314 <MX_TIM1_Init+0x138>)
 80012c4:	f003 ff50 	bl	8005168 <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80012ce:	f000 ff2f 	bl	8002130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <MX_TIM1_Init+0x138>)
 80012f6:	f004 fd5f 	bl	8005db8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001300:	f000 ff16 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <MX_TIM1_Init+0x138>)
 8001306:	f001 f829 	bl	800235c <HAL_TIM_MspPostInit>

}
 800130a:	bf00      	nop
 800130c:	3758      	adds	r7, #88	@ 0x58
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000015c 	.word	0x2000015c
 8001318:	40010000 	.word	0x40010000

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001342:	2253      	movs	r2, #83	@ 0x53
 8001344:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800134e:	227c      	movs	r2, #124	@ 0x7c
 8001350:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001360:	f003 fa66 	bl	8004830 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 fee1 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM2_Init+0x94>)
 800137c:	f003 ffb6 	bl	80052ec <HAL_TIM_ConfigClockSource>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001386:	f000 fed3 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138a:	2320      	movs	r3, #32
 800138c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_TIM2_Init+0x94>)
 8001398:	f004 fc92 	bl	8005cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80013a2:	f000 fec5 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001a4 	.word	0x200001a4

080013b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c2:	2204      	movs	r2, #4
 80013c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f8:	f002 fc5f 	bl	8003cba <HAL_PCD_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001402:	f000 fe95 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000024c 	.word	0x2000024c

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <MX_DMA_Init+0x4c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <MX_DMA_Init+0x4c>)
 8001420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <MX_DMA_Init+0x4c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2038      	movs	r0, #56	@ 0x38
 8001438:	f001 fea9 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800143c:	2038      	movs	r0, #56	@ 0x38
 800143e:	f001 fec2 	bl	80031c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2039      	movs	r0, #57	@ 0x39
 8001448:	f001 fea1 	bl	800318e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800144c:	2039      	movs	r0, #57	@ 0x39
 800144e:	f001 feba 	bl	80031c6 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <MX_GPIO_Init+0xe8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a32      	ldr	r2, [pc, #200]	@ (8001548 <MX_GPIO_Init+0xe8>)
 8001480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <MX_GPIO_Init+0xe8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <MX_GPIO_Init+0xe8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a2b      	ldr	r2, [pc, #172]	@ (8001548 <MX_GPIO_Init+0xe8>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a24      	ldr	r2, [pc, #144]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a16      	ldr	r2, [pc, #88]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <MX_GPIO_Init+0xe8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2102      	movs	r1, #2
 8001506:	4811      	ldr	r0, [pc, #68]	@ (800154c <MX_GPIO_Init+0xec>)
 8001508:	f002 fbbe 	bl	8003c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENC_CLK_Pin ENC_DT_Pin ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin|ENC_SW_Pin;
 800150c:	2315      	movs	r3, #21
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	@ (8001550 <MX_GPIO_Init+0xf0>)
 8001520:	f002 f9fe 	bl	8003920 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001524:	2302      	movs	r3, #2
 8001526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_GPIO_Init+0xec>)
 800153c:	f002 f9f0 	bl	8003920 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Quan trọng: Các chân FSMC phải được cấu hình ở đây bởi CubeMX
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	@ 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400
 8001550:	40020000 	.word	0x40020000

08001554 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */
  // Quan trọng: Hàm này phải được tạo bởi CubeMX để cấu hình đúng timing
  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN FSMC_Init 1 */
  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <MX_FSMC_Init+0xb8>)
 800156e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001572:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001574:	4b25      	ldr	r3, [pc, #148]	@ (800160c <MX_FSMC_Init+0xb8>)
 8001576:	4a26      	ldr	r2, [pc, #152]	@ (8001610 <MX_FSMC_Init+0xbc>)
 8001578:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <MX_FSMC_Init+0xb8>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001580:	4b22      	ldr	r3, [pc, #136]	@ (800160c <MX_FSMC_Init+0xb8>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <MX_FSMC_Init+0xb8>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_FSMC_Init+0xb8>)
 800158e:	2210      	movs	r2, #16
 8001590:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_FSMC_Init+0xb8>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_FSMC_Init+0xb8>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 80015d0:	2306      	movs	r3, #6
 80015d2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80015d4:	230f      	movs	r3, #15
 80015d6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 80015d8:	2306      	movs	r3, #6
 80015da:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80015e0:	2310      	movs	r3, #16
 80015e2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80015e4:	2311      	movs	r3, #17
 80015e6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	@ (800160c <MX_FSMC_Init+0xb8>)
 80015f4:	f003 f8d4 	bl	80047a0 <HAL_SRAM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80015fe:	f000 fd97 	bl	8002130 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */
  /* USER CODE END FSMC_Init 2 */
}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000730 	.word	0x20000730
 8001610:	a0000104 	.word	0xa0000104

08001614 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    // Dat co bao hieu nua buffer dau tien da san sang.
    first_half_ready = true;
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]

    // Lenh khong lam gi, thuong dung de dat breakpoint khi debug.
    __NOP();
 8001622:	bf00      	nop
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000b88 	.word	0x20000b88

08001634 <drawMenu>:




void drawMenu(int selection)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
    // Xoa sach man hinh ve mau den de chuan bi ve menu moi.
    lcdFillRGB(COLOR_BLACK);
 800163c:	2000      	movs	r0, #0
 800163e:	f005 f96b 	bl	8006918 <lcdFillRGB>

    //--- Ve phan Tieu De ---
    lcdSetTextFont(&Font24); // Chon font lon de ve tieu de.
 8001642:	4843      	ldr	r0, [pc, #268]	@ (8001750 <drawMenu+0x11c>)
 8001644:	f005 fc28 	bl	8006e98 <lcdSetTextFont>
    lcdSetTextColor(COLOR_WHITE, COLOR_BLACK); // Dat mau chu la mau trang, mau nen la mau den.
 8001648:	2100      	movs	r1, #0
 800164a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800164e:	f005 fc33 	bl	8006eb8 <lcdSetTextColor>
    lcdSetCursor(10, 20); // Di chuyen con tro den vi tri de viet tieu de.
 8001652:	2114      	movs	r1, #20
 8001654:	200a      	movs	r0, #10
 8001656:	f005 fc45 	bl	8006ee4 <lcdSetCursor>
    lcdPrintf("CHON HIEU UNG"); // In chuoi tieu de ra man hinh.
 800165a:	483e      	ldr	r0, [pc, #248]	@ (8001754 <drawMenu+0x120>)
 800165c:	f005 fb90 	bl	8006d80 <lcdPrintf>
    //--- Ve Nut lua chon so 1 ---

    // Kiem tra xem nut 1 co dang duoc chon hay khong de quyet dinh mau sac.
    // Neu selection == 0, nut se co mau sac noi bat (vang, xanh cyan).
    // Neu khong, nut se co mau sac thong thuong (trang, xanh navy).
    uint16_t b1_bg = (selection == 0) ? COLOR_DARKCYAN : COLOR_NAVY;       // Mau nen cua nut
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <drawMenu+0x38>
 8001666:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800166a:	e000      	b.n	800166e <drawMenu+0x3a>
 800166c:	230f      	movs	r3, #15
 800166e:	82fb      	strh	r3, [r7, #22]
    uint16_t b1_brd = (selection == 0) ? COLOR_YELLOW : COLOR_WHITE;      // Mau duong vien cua nut
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <drawMenu+0x48>
 8001676:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800167a:	e001      	b.n	8001680 <drawMenu+0x4c>
 800167c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001680:	82bb      	strh	r3, [r7, #20]
    uint16_t b1_txt = (selection == 0) ? COLOR_YELLOW : COLOR_WHITE;      // Mau chu ben trong nut
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <drawMenu+0x5a>
 8001688:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800168c:	e001      	b.n	8001692 <drawMenu+0x5e>
 800168e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001692:	827b      	strh	r3, [r7, #18]

    // Thuc hien ve nut 1
    lcdFillRect(30, 80, 180, 60, b1_bg);     // Ve hinh chu nhat dac lam nen cho nut bam.
 8001694:	8afb      	ldrh	r3, [r7, #22]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	233c      	movs	r3, #60	@ 0x3c
 800169a:	22b4      	movs	r2, #180	@ 0xb4
 800169c:	2150      	movs	r1, #80	@ 0x50
 800169e:	201e      	movs	r0, #30
 80016a0:	f005 fa68 	bl	8006b74 <lcdFillRect>
    lcdDrawRect(30, 80, 180, 60, b1_brd);    // Ve duong vien cho nut bam.
 80016a4:	8abb      	ldrh	r3, [r7, #20]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	233c      	movs	r3, #60	@ 0x3c
 80016aa:	22b4      	movs	r2, #180	@ 0xb4
 80016ac:	2150      	movs	r1, #80	@ 0x50
 80016ae:	201e      	movs	r0, #30
 80016b0:	f005 fa16 	bl	8006ae0 <lcdDrawRect>
    lcdSetTextColor(b1_txt, b1_bg);         // Thiet lap mau chu va mau nen (trung voi nen nut).
 80016b4:	8afa      	ldrh	r2, [r7, #22]
 80016b6:	8a7b      	ldrh	r3, [r7, #18]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f005 fbfc 	bl	8006eb8 <lcdSetTextColor>
    lcdSetTextFont(&Font16);                // Chon font chu co kich thuoc nho hon cho nut bam.
 80016c0:	4825      	ldr	r0, [pc, #148]	@ (8001758 <drawMenu+0x124>)
 80016c2:	f005 fbe9 	bl	8006e98 <lcdSetTextFont>
    lcdSetCursor(43, 102);                  // Dat con tro vao giua nut de can chinh chu.
 80016c6:	2166      	movs	r1, #102	@ 0x66
 80016c8:	202b      	movs	r0, #43	@ 0x2b
 80016ca:	f005 fc0b 	bl	8006ee4 <lcdSetCursor>
    lcdPrintf("NHAY THEO NHAC");            // In ten cua hieu ung.
 80016ce:	4823      	ldr	r0, [pc, #140]	@ (800175c <drawMenu+0x128>)
 80016d0:	f005 fb56 	bl	8006d80 <lcdPrintf>

    //--- Ve Nut lua chon so 2 (Logic tuong tu nut 1) ---

    // Kiem tra xem nut 2 co dang duoc chon hay khong (selection == 1).
    uint16_t b2_bg = (selection == 1) ? COLOR_DARKCYAN : COLOR_NAVY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d102      	bne.n	80016e0 <drawMenu+0xac>
 80016da:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 80016de:	e000      	b.n	80016e2 <drawMenu+0xae>
 80016e0:	230f      	movs	r3, #15
 80016e2:	823b      	strh	r3, [r7, #16]
    uint16_t b2_brd = (selection == 1) ? COLOR_YELLOW : COLOR_WHITE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d102      	bne.n	80016f0 <drawMenu+0xbc>
 80016ea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80016ee:	e001      	b.n	80016f4 <drawMenu+0xc0>
 80016f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f4:	81fb      	strh	r3, [r7, #14]
    uint16_t b2_txt = (selection == 1) ? COLOR_YELLOW : COLOR_WHITE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <drawMenu+0xce>
 80016fc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001700:	e001      	b.n	8001706 <drawMenu+0xd2>
 8001702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001706:	81bb      	strh	r3, [r7, #12]

    // Thuc hien ve nut 2
    lcdFillRect(30, 160, 180, 60, b2_bg);
 8001708:	8a3b      	ldrh	r3, [r7, #16]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	233c      	movs	r3, #60	@ 0x3c
 800170e:	22b4      	movs	r2, #180	@ 0xb4
 8001710:	21a0      	movs	r1, #160	@ 0xa0
 8001712:	201e      	movs	r0, #30
 8001714:	f005 fa2e 	bl	8006b74 <lcdFillRect>
    lcdDrawRect(30, 160, 180, 60, b2_brd);
 8001718:	89fb      	ldrh	r3, [r7, #14]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	233c      	movs	r3, #60	@ 0x3c
 800171e:	22b4      	movs	r2, #180	@ 0xb4
 8001720:	21a0      	movs	r1, #160	@ 0xa0
 8001722:	201e      	movs	r0, #30
 8001724:	f005 f9dc 	bl	8006ae0 <lcdDrawRect>
    lcdSetTextColor(b2_txt, b2_bg);
 8001728:	8a3a      	ldrh	r2, [r7, #16]
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f005 fbc2 	bl	8006eb8 <lcdSetTextColor>
    lcdSetTextFont(&Font16);
 8001734:	4808      	ldr	r0, [pc, #32]	@ (8001758 <drawMenu+0x124>)
 8001736:	f005 fbaf 	bl	8006e98 <lcdSetTextFont>
    lcdSetCursor(76, 182);
 800173a:	21b6      	movs	r1, #182	@ 0xb6
 800173c:	204c      	movs	r0, #76	@ 0x4c
 800173e:	f005 fbd1 	bl	8006ee4 <lcdSetCursor>
    lcdPrintf("CAU VONG");
 8001742:	4807      	ldr	r0, [pc, #28]	@ (8001760 <drawMenu+0x12c>)
 8001744:	f005 fb1c 	bl	8006d80 <lcdPrintf>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000028 	.word	0x20000028
 8001754:	08008b44 	.word	0x08008b44
 8001758:	20000018 	.word	0x20000018
 800175c:	08008b54 	.word	0x08008b54
 8001760:	08008b64 	.word	0x08008b64

08001764 <drawEffectScreen>:




void drawEffectScreen(const char* effectName)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
    lcdFillRGB(COLOR_BLACK);
 800176c:	2000      	movs	r0, #0
 800176e:	f005 f8d3 	bl	8006918 <lcdFillRGB>
    lcdSetTextFont(&Font16);
 8001772:	4819      	ldr	r0, [pc, #100]	@ (80017d8 <drawEffectScreen+0x74>)
 8001774:	f005 fb90 	bl	8006e98 <lcdSetTextFont>
    lcdSetTextColor(COLOR_GREEN, COLOR_BLACK);
 8001778:	2100      	movs	r1, #0
 800177a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800177e:	f005 fb9b 	bl	8006eb8 <lcdSetTextColor>
    lcdSetCursor(10, 50);
 8001782:	2132      	movs	r1, #50	@ 0x32
 8001784:	200a      	movs	r0, #10
 8001786:	f005 fbad 	bl	8006ee4 <lcdSetCursor>
    lcdPrintf("Dang chay hieu ung:");
 800178a:	4814      	ldr	r0, [pc, #80]	@ (80017dc <drawEffectScreen+0x78>)
 800178c:	f005 faf8 	bl	8006d80 <lcdPrintf>
    lcdSetTextFont(&Font20);
 8001790:	4813      	ldr	r0, [pc, #76]	@ (80017e0 <drawEffectScreen+0x7c>)
 8001792:	f005 fb81 	bl	8006e98 <lcdSetTextFont>
    lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8001796:	2100      	movs	r1, #0
 8001798:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800179c:	f005 fb8c 	bl	8006eb8 <lcdSetTextColor>
    lcdSetCursor(10, 100);
 80017a0:	2164      	movs	r1, #100	@ 0x64
 80017a2:	200a      	movs	r0, #10
 80017a4:	f005 fb9e 	bl	8006ee4 <lcdSetCursor>
    lcdPrintf(effectName);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f005 fae9 	bl	8006d80 <lcdPrintf>
    lcdSetTextFont(&Font12);
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <drawEffectScreen+0x80>)
 80017b0:	f005 fb72 	bl	8006e98 <lcdSetTextFont>
    lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 80017b4:	2100      	movs	r1, #0
 80017b6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80017ba:	f005 fb7d 	bl	8006eb8 <lcdSetTextColor>
    lcdSetCursor(10, 260);
 80017be:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80017c2:	200a      	movs	r0, #10
 80017c4:	f005 fb8e 	bl	8006ee4 <lcdSetCursor>
    lcdPrintf("Nhan SW de quay lai Menu");
 80017c8:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <drawEffectScreen+0x84>)
 80017ca:	f005 fad9 	bl	8006d80 <lcdPrintf>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000018 	.word	0x20000018
 80017dc:	08008b70 	.word	0x08008b70
 80017e0:	20000020 	.word	0x20000020
 80017e4:	20000010 	.word	0x20000010
 80017e8:	08008b84 	.word	0x08008b84

080017ec <checkRotaryEncoder>:
  * @note   Ham nay su dung phuong phap phat hien canh xuong cua tin hieu CLK,
  * sau do kiem tra trang thai cua tin hieu DT de xac dinh chieu xoay.
  * @retval Trang thai xoay (CW, CCW, hoac khong xoay).
  */
Encoder_Rotation checkRotaryEncoder(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
    // 'static' giup bien nay giu nguyen gia tri giua cac lan goi ham.
    // Khoi tao la 1 vi GPIO duoc cau hinh pull-up (muc cao khi khong hoat dong).
    static uint8_t last_clk_state = 1;

    // Doc trang thai hien tai cua chan CLK.
    uint8_t current_clk_state = HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin);
 80017f2:	2101      	movs	r1, #1
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <checkRotaryEncoder+0x58>)
 80017f6:	f002 fa2f 	bl	8003c58 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]

    // Chi xu ly khi co su thay doi trang thai tu cao (1) xuong thap (0).
    // Day chinh la thoi diem encoder di qua mot "khac".
    if (current_clk_state == 0 && last_clk_state == 1)
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d117      	bne.n	8001834 <checkRotaryEncoder+0x48>
 8001804:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <checkRotaryEncoder+0x5c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d113      	bne.n	8001834 <checkRotaryEncoder+0x48>
    {
        // Them mot do tre rat nho de chong nhieu tin hieu.
        HAL_Delay(2);
 800180c:	2002      	movs	r0, #2
 800180e:	f000 ffb3 	bl	8002778 <HAL_Delay>

        // Tai thoi diem CLK vua chuyen xuong thap, ta doc gia tri cua chan DT.
        // Chinh gia tri cua DT se quyet dinh chieu xoay.
        if (HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin) == 0) {
 8001812:	2104      	movs	r1, #4
 8001814:	480b      	ldr	r0, [pc, #44]	@ (8001844 <checkRotaryEncoder+0x58>)
 8001816:	f002 fa1f 	bl	8003c58 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <checkRotaryEncoder+0x3e>
            // Neu DT cung o muc thap, nghia la encoder dang xoay theo chieu kim dong ho.
            last_clk_state = current_clk_state; // Cap nhat trang thai truoc khi thoat.
 8001820:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <checkRotaryEncoder+0x5c>)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	7013      	strb	r3, [r2, #0]
            return ENCODER_CW_ROTATION;
 8001826:	2301      	movs	r3, #1
 8001828:	e008      	b.n	800183c <checkRotaryEncoder+0x50>
        } else {
            // Nguoc lai, neu DT o muc cao, nghia la encoder xoay nguoc chieu kim dong ho.
            last_clk_state = current_clk_state;
 800182a:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <checkRotaryEncoder+0x5c>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	7013      	strb	r3, [r2, #0]
            return ENCODER_CCW_ROTATION;
 8001830:	2302      	movs	r3, #2
 8001832:	e003      	b.n	800183c <checkRotaryEncoder+0x50>
        }
    }

    // Cap nhat lai trang thai cua CLK de chuan bi cho lan kiem tra tiep theo.
    last_clk_state = current_clk_state;
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <checkRotaryEncoder+0x5c>)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	7013      	strb	r3, [r2, #0]

    // Neu khong phat hien duoc canh xuong, tra ve trang thai khong xoay.
    return ENCODER_NO_ROTATION;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40020000 	.word	0x40020000
 8001848:	20000000 	.word	0x20000000

0800184c <readSwitch>:




uint8_t readSwitch(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    // Kiem tra xem nut co duoc nhan xuong hay khong (chan SW duoc noi xuong GND -> muc thap).
    if (HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) == GPIO_PIN_RESET)
 8001850:	2110      	movs	r1, #16
 8001852:	480e      	ldr	r0, [pc, #56]	@ (800188c <readSwitch+0x40>)
 8001854:	f002 fa00 	bl	8003c58 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d113      	bne.n	8001886 <readSwitch+0x3a>
    {
        // Cho mot khoang thoi gian ngan de chong nhieu/doi (debounce).
        // Neu sau 200ms ma nut van duoc nhan, ta coi day la mot lan nhan hop le.
        HAL_Delay(200);
 800185e:	20c8      	movs	r0, #200	@ 0xc8
 8001860:	f000 ff8a 	bl	8002778 <HAL_Delay>

        if (HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) == GPIO_PIN_RESET)
 8001864:	2110      	movs	r1, #16
 8001866:	4809      	ldr	r0, [pc, #36]	@ (800188c <readSwitch+0x40>)
 8001868:	f002 f9f6 	bl	8003c58 <HAL_GPIO_ReadPin>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <readSwitch+0x3a>
        {
            // Vong lap nay se bi "treo" o day cho den khi nguoi dung tha nut ra.
            // Dieu nay dam bao chuong trinh chi ghi nhan 1 lan duy nhat cho moi lan nhan.
            while(HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin) == GPIO_PIN_RESET);
 8001872:	bf00      	nop
 8001874:	2110      	movs	r1, #16
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <readSwitch+0x40>)
 8001878:	f002 f9ee 	bl	8003c58 <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f8      	beq.n	8001874 <readSwitch+0x28>

            // Khi nut da duoc tha ra, tra ve 1 de bao hieu mot lan nhan hop le da hoan tat.
            return 1;
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <readSwitch+0x3c>
        }
    }

    // Neu khong co nut nao duoc nhan, tra ve 0.
    return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40020000 	.word	0x40020000

08001890 <run_rainbow_effect>:
  * de tao ra mot dai mau muot ma.
  * @param  None
  * @retval None
  */
void run_rainbow_effect(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	@ 0x30
 8001894:	af00      	add	r7, sp, #0
    uint16_t ind;          // Vi tri ao cua den LED trong chu ky hieu ung
    uint8_t r, g, b;       // Cac bien luu gia tri mau RGB tam thoi

    // Cac hang so xac dinh cach hieu ung cau vong duoc tao ra.
    // Chung duoc dich tu code Arduino mau.
    const float step_increment = 2.266667f; // Buoc nhay cho moi den LED ke tiep
 8001896:	4bab      	ldr	r3, [pc, #684]	@ (8001b44 <run_rainbow_effect+0x2b4>)
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
    const int total_steps = 68;             // Tong so buoc trong mot chu ky hoan chinh cua hieu ung
 800189a:	2344      	movs	r3, #68	@ 0x44
 800189c:	623b      	str	r3, [r7, #32]
    const float segment_length = 22.666667f; // Do dai cua moi doan chuyen mau (total_steps / 3)
 800189e:	4baa      	ldr	r3, [pc, #680]	@ (8001b48 <run_rainbow_effect+0x2b8>)
 80018a0:	61fb      	str	r3, [r7, #28]

    // Duyet qua tung den LED de tinh toan mau sac cho no.
    for(uint16_t j = 0; j < MAX_LED; j++) {
 80018a2:	2300      	movs	r3, #0
 80018a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80018a6:	e131      	b.n	8001b0c <run_rainbow_effect+0x27c>
        // Tinh toan vi tri "ao" cua den LED hien tai trong toan bo chu ky hieu ung.
        // 'rainbow_effStep' lam cho toan bo dai mau di chuyen qua moi frame.
        ind = rainbow_effStep + (uint16_t)(j * step_increment);
 80018a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4ba1      	ldr	r3, [pc, #644]	@ (8001b4c <run_rainbow_effect+0x2bc>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	837b      	strh	r3, [r7, #26]

        // Xac dinh xem den LED dang o doan chuyen mau nao (0, 1, hay 2).
        int segment = (int)((ind % total_steps) / segment_length);
 80018cc:	8b7b      	ldrh	r3, [r7, #26]
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	fb01 f202 	mul.w	r2, r1, r2
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f0:	ee17 3a90 	vmov	r3, s15
 80018f4:	617b      	str	r3, [r7, #20]

        switch(segment) {
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	f000 809f 	beq.w	8001a3c <run_rainbow_effect+0x1ac>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f300 80ed 	bgt.w	8001ae0 <run_rainbow_effect+0x250>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <run_rainbow_effect+0x84>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d046      	beq.n	80019a0 <run_rainbow_effect+0x110>
 8001912:	e0e5      	b.n	8001ae0 <run_rainbow_effect+0x250>
            case 0: // Chuyen tu Xanh la (G) sang Xanh duong (B)
                // factor1 giam tu 1 ve 0, factor2 tang tu 0 len 1.
                factor1 = 1.0f - ((float)(ind % total_steps) / segment_length);
 8001914:	8b7b      	ldrh	r3, [r7, #26]
 8001916:	6a3a      	ldr	r2, [r7, #32]
 8001918:	fb93 f2f2 	sdiv	r2, r3, r2
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	fb01 f202 	mul.w	r2, r1, r2
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800192c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193c:	edc7 7a04 	vstr	s15, [r7, #16]
                factor2 = ((float)(ind % total_steps)) / segment_length;
 8001940:	8b7b      	ldrh	r3, [r7, #26]
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	fb93 f2f2 	sdiv	r2, r3, r2
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	fb01 f202 	mul.w	r2, r1, r2
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001958:	ed97 7a07 	vldr	s14, [r7, #28]
 800195c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001960:	edc7 7a03 	vstr	s15, [r7, #12]
                r = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                g = (uint8_t)(255 * factor1); // Kenh Green giam dan
 800196a:	edd7 7a04 	vldr	s15, [r7, #16]
 800196e:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001b50 <run_rainbow_effect+0x2c0>
 8001972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800197a:	edc7 7a01 	vstr	s15, [r7, #4]
 800197e:	793b      	ldrb	r3, [r7, #4]
 8001980:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                b = (uint8_t)(255 * factor2); // Kenh Blue tang dan
 8001984:	edd7 7a03 	vldr	s15, [r7, #12]
 8001988:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001b50 <run_rainbow_effect+0x2c0>
 800198c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001994:	edc7 7a01 	vstr	s15, [r7, #4]
 8001998:	793b      	ldrb	r3, [r7, #4]
 800199a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                break;
 800199e:	e0a9      	b.n	8001af4 <run_rainbow_effect+0x264>

            case 1: // Chuyen tu Xanh duong (B) sang Do (R)
                factor1 = 1.0f - ((float)(ind % total_steps - segment_length) / segment_length);
 80019a0:	8b7b      	ldrh	r3, [r7, #26]
 80019a2:	6a3a      	ldr	r2, [r7, #32]
 80019a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	fb01 f202 	mul.w	r2, r1, r2
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80019bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80019c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d0:	edc7 7a04 	vstr	s15, [r7, #16]
                factor2 = ((float)(ind % total_steps - segment_length)) / segment_length;
 80019d4:	8b7b      	ldrh	r3, [r7, #26]
 80019d6:	6a3a      	ldr	r2, [r7, #32]
 80019d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80019dc:	6a39      	ldr	r1, [r7, #32]
 80019de:	fb01 f202 	mul.w	r2, r1, r2
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80019f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80019f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80019f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fc:	edc7 7a03 	vstr	s15, [r7, #12]
                r = (uint8_t)(255 * factor2); // Kenh Red tang dan
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001b50 <run_rainbow_effect+0x2c0>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a10:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a14:	793b      	ldrb	r3, [r7, #4]
 8001a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                g = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                b = (uint8_t)(255 * factor1); // Kenh Blue giam dan
 8001a20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a24:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001b50 <run_rainbow_effect+0x2c0>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a30:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a34:	793b      	ldrb	r3, [r7, #4]
 8001a36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                break;
 8001a3a:	e05b      	b.n	8001af4 <run_rainbow_effect+0x264>

            case 2: // Chuyen tu Do (R) ve Xanh la (G)
                factor1 = 1.0f - ((float)(ind % total_steps - 2 * segment_length) / segment_length);
 8001a3c:	8b7b      	ldrh	r3, [r7, #26]
 8001a3e:	6a3a      	ldr	r2, [r7, #32]
 8001a40:	fb93 f2f2 	sdiv	r2, r3, r2
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	fb01 f202 	mul.w	r2, r1, r2
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a5c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a60:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a70:	edc7 7a04 	vstr	s15, [r7, #16]
                factor2 = ((float)(ind % total_steps - 2 * segment_length)) / segment_length;
 8001a74:	8b7b      	ldrh	r3, [r7, #26]
 8001a76:	6a3a      	ldr	r2, [r7, #32]
 8001a78:	fb93 f2f2 	sdiv	r2, r3, r2
 8001a7c:	6a39      	ldr	r1, [r7, #32]
 8001a7e:	fb01 f202 	mul.w	r2, r1, r2
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a94:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa0:	edc7 7a03 	vstr	s15, [r7, #12]
                r = (uint8_t)(255 * factor1); // Kenh Red giam dan
 8001aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001b50 <run_rainbow_effect+0x2c0>
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab4:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ab8:	793b      	ldrb	r3, [r7, #4]
 8001aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                g = (uint8_t)(255 * factor2); // Kenh Green tang dan
 8001abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac2:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001b50 <run_rainbow_effect+0x2c0>
 8001ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ace:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ad2:	793b      	ldrb	r3, [r7, #4]
 8001ad4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                b = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                break;
 8001ade:	e009      	b.n	8001af4 <run_rainbow_effect+0x264>
            default: // Truong hop du phong
                r=0; g=0; b=0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                break;
 8001af2:	bf00      	nop
        }
        // Luu mau vua tinh toan vao bo dem cho den LED thu 'j'.
        Set_LED(j, r, g, b);
 8001af4:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8001af6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001afa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001afe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b02:	f000 f83b 	bl	8001b7c <Set_LED>
    for(uint16_t j = 0; j < MAX_LED; j++) {
 8001b06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001b08:	3301      	adds	r3, #1
 8001b0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001b0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001b0e:	2b31      	cmp	r3, #49	@ 0x31
 8001b10:	f67f aeca 	bls.w	80018a8 <run_rainbow_effect+0x18>
    }

    // Ap dung do sang da chon.
    Set_Brightness(10);
 8001b14:	200a      	movs	r0, #10
 8001b16:	f000 f85f 	bl	8001bd8 <Set_Brightness>

    // Gui toan bo du lieu trong bo dem ra dai LED thuc te.
    WS2812_Send();
 8001b1a:	f000 f903 	bl	8001d24 <WS2812_Send>

    // Tang buoc hieu ung len 1 de frame tiep theo, dai mau se dich chuyen.
    rainbow_effStep++;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <run_rainbow_effect+0x2bc>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <run_rainbow_effect+0x2bc>)
 8001b28:	801a      	strh	r2, [r3, #0]

    // Neu hieu ung da chay xong mot chu ky, bat dau lai tu dau.
    if(rainbow_effStep >= total_steps) {
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <run_rainbow_effect+0x2bc>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	4293      	cmp	r3, r2
 8001b34:	dc02      	bgt.n	8001b3c <run_rainbow_effect+0x2ac>
        rainbow_effStep = 0;
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <run_rainbow_effect+0x2bc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	801a      	strh	r2, [r3, #0]
    }

    // Dieu khien toc do cua hieu ung. So cang nho, hieu ung cang nhanh.
    //HAL_Delay(7);
}
 8001b3c:	bf00      	nop
 8001b3e:	3730      	adds	r7, #48	@ 0x30
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40111112 	.word	0x40111112
 8001b48:	41b55556 	.word	0x41b55556
 8001b4c:	200016e4 	.word	0x200016e4
 8001b50:	437f0000 	.word	0x437f0000

08001b54 <HAL_TIM_PWM_PulseFinishedCallback>:



// Ham callback cua DMA-Timer -> da gui xong
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001b60:	f003 f940 	bl	8004de4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000015c 	.word	0x2000015c
 8001b78:	200016e0 	.word	0x200016e0

08001b7c <Set_LED>:



// Ham luu gia tri mau cho LED
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b2d9      	uxtb	r1, r3
 8001b8e:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <Set_LED+0x58>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	b2d9      	uxtb	r1, r3
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <Set_LED+0x58>)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	460a      	mov	r2, r1
 8001ba4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	b2d9      	uxtb	r1, r3
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <Set_LED+0x58>)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2d9      	uxtb	r1, r3
 8001bba:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <Set_LED+0x58>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	460a      	mov	r2, r1
 8001bc4:	70da      	strb	r2, [r3, #3]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000b8c 	.word	0x20000b8c

08001bd8 <Set_Brightness>:
  * va luu ket qua vao mang LED_Mod.
  * @param  brightness: Gia tri do sang mong muon, tu 0 (toi nhat) den 45 (sang nhat).
  * @retval None
  */
void Set_Brightness (int brightness)
{
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    // Toan bo chuc nang nay chi duoc bien dich neu USE_BRIGHTNESS duoc bat (bang 1).
    #if USE_BRIGHTNESS

	// Gioi han gia tri do sang trong khoang an toan tu 0 den 45.
	if (brightness > 45) brightness = 45;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b2d      	cmp	r3, #45	@ 0x2d
 8001be4:	dd01      	ble.n	8001bea <Set_Brightness+0x12>
 8001be6:	232d      	movs	r3, #45	@ 0x2d
 8001be8:	607b      	str	r3, [r7, #4]
	if (brightness < 0) brightness = 0;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da01      	bge.n	8001bf4 <Set_Brightness+0x1c>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]

	// Duyet qua tung den LED de ap dung do sang.
	for (int i=0; i<MAX_LED; i++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e083      	b.n	8001d02 <Set_Brightness+0x12a>
	{
		// Sao chep du lieu khong phai mau (vi du: chi so cua den).
		LED_Mod[i][0] = LED_Data[i][0];
 8001bfa:	4a46      	ldr	r2, [pc, #280]	@ (8001d14 <Set_Brightness+0x13c>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001c02:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <Set_Brightness+0x140>)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]

		// Voi moi den, xu ly 3 thanh phan mau (G, R, B).
		for (int j=1; j<4; j++)
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e072      	b.n	8001cf6 <Set_Brightness+0x11e>
		{
			// Truong hop dac biet: neu do sang la 0, tat luon den.
			if(brightness == 0) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <Set_Brightness+0x50>
				LED_Mod[i][j] = 0;
 8001c16:	4a40      	ldr	r2, [pc, #256]	@ (8001d18 <Set_Brightness+0x140>)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	441a      	add	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e063      	b.n	8001cf0 <Set_Brightness+0x118>
			} else {
				// Su dung cong thuc luong giac de dieu chinh do sang mot cach phi tuyen tinh.
				float angle = 90 - brightness;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c36:	edc7 7a03 	vstr	s15, [r7, #12]
				angle = angle * PI / 180; // Chuyen doi tu do sang radian
 8001c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c3e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001d1c <Set_Brightness+0x144>
 8001c42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c46:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001d20 <Set_Brightness+0x148>
 8001c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4e:	edc7 7a03 	vstr	s15, [r7, #12]

				// Khi brightness = 45 (max), angle = 45, tan(45) = 1 -> mau giu nguyen.
				// Khi brightness giam, angle tang -> tan(angle) tang -> mau toi di.
				if (tan(angle) != 0) {
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7fe fc70 	bl	8000538 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	ec43 2b10 	vmov	d0, r2, r3
 8001c60:	f005 feb2 	bl	80079c8 <tan>
 8001c64:	ec51 0b10 	vmov	r0, r1, d0
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	f7fe ff22 	bl	8000ab8 <__aeabi_dcmpeq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12b      	bne.n	8001cd2 <Set_Brightness+0xfa>
					LED_Mod[i][j] = (LED_Data[i][j]) / (tan(angle));
 8001c7a:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <Set_Brightness+0x13c>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	441a      	add	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc43 	bl	8000514 <__aeabi_i2d>
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460d      	mov	r5, r1
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7fe fc50 	bl	8000538 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ec43 2b10 	vmov	d0, r2, r3
 8001ca0:	f005 fe92 	bl	80079c8 <tan>
 8001ca4:	ec53 2b10 	vmov	r2, r3, d0
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fdc6 	bl	800083c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe ff58 	bl	8000b6c <__aeabi_d2uiz>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b2d9      	uxtb	r1, r3
 8001cc0:	4a15      	ldr	r2, [pc, #84]	@ (8001d18 <Set_Brightness+0x140>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	441a      	add	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	460a      	mov	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e00e      	b.n	8001cf0 <Set_Brightness+0x118>
				} else {
					// Phong truong hop tan(angle) = 0 (khong xay ra voi input da gioi han).
					LED_Mod[i][j] = LED_Data[i][j];
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <Set_Brightness+0x13c>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	441a      	add	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	7819      	ldrb	r1, [r3, #0]
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <Set_Brightness+0x140>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	441a      	add	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	460a      	mov	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	dd89      	ble.n	8001c10 <Set_Brightness+0x38>
	for (int i=0; i<MAX_LED; i++)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b31      	cmp	r3, #49	@ 0x31
 8001d06:	f77f af78 	ble.w	8001bfa <Set_Brightness+0x22>
				}
			}
		}
	}
    #endif
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	20000b8c 	.word	0x20000b8c
 8001d18:	20000c54 	.word	0x20000c54
 8001d1c:	40490fdb 	.word	0x40490fdb
 8001d20:	43340000 	.word	0x43340000

08001d24 <WS2812_Send>:
  * @note   Su dung ket hop Timer o che do PWM va bo dieu khien DMA de tu dong hoa viec gui tin hieu.
  * @param  None
  * @retval None
  */
void WS2812_Send (void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
	uint32_t indx=0;      // Bien dem cho mang pwmData
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
	uint32_t color;       // Bien tam de luu gia tri mau 24-bit cua mot LED

	// Duyet qua tung den LED trong dai de chuan bi du lieu
	for (int i= 0; i < MAX_LED; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e035      	b.n	8001da0 <WS2812_Send+0x7c>
	{
		// Lay du lieu mau (theo thu tu G-R-B) tu mang LED_Data va ghep lai thanh mot so 24-bit.
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8001d34:	4a2e      	ldr	r2, [pc, #184]	@ (8001df0 <WS2812_Send+0xcc>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	041a      	lsls	r2, r3, #16
 8001d40:	492b      	ldr	r1, [pc, #172]	@ (8001df0 <WS2812_Send+0xcc>)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	4928      	ldr	r1, [pc, #160]	@ (8001df0 <WS2812_Send+0xcc>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	78db      	ldrb	r3, [r3, #3]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	607b      	str	r3, [r7, #4]

		// Voi moi den,
		// duyet qua tung bit trong 24 bit mau (tu bit cao nhat '23' den bit thap nhat '0').
		for (int j=23; j>=0; j--)
 8001d5c:	2317      	movs	r3, #23
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e018      	b.n	8001d94 <WS2812_Send+0x70>
		{
			// Kiem tra gia tri cua bit thu j.
			if (color & (1UL << j))
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <WS2812_Send+0x5a>
			{
				// Neu bit la 1, dat gia tri duty cycle cao (vi du: 60/90).
				// Xung HIGH se dai, duoc WS2812B hieu la bit '1'.
				pwmData[indx] = 60;
 8001d72:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <WS2812_Send+0xd0>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	213c      	movs	r1, #60	@ 0x3c
 8001d78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d7c:	e004      	b.n	8001d88 <WS2812_Send+0x64>
			}
			else
			{
				// Neu bit la 0, dat gia tri duty cycle thap (vi du: 30/90).
				// Xung HIGH se ngan, duoc WS2812B hieu la bit '0'.
				pwmData[indx] = 30;
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001df4 <WS2812_Send+0xd0>)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	211e      	movs	r1, #30
 8001d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
		for (int j=23; j>=0; j--)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dae3      	bge.n	8001d62 <WS2812_Send+0x3e>
	for (int i= 0; i < MAX_LED; i++)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b31      	cmp	r3, #49	@ 0x31
 8001da4:	ddc6      	ble.n	8001d34 <WS2812_Send+0x10>
		}
	}

	// Them 50 gia tri '0' vao cuoi buffer de tao ra tin hieu Reset (Latch).
	// Xung LOW keo dai nay se bao cho cac den LED "chot" mau va hien thi.
	for (int i=0; i<50; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	e00a      	b.n	8001dc2 <WS2812_Send+0x9e>
	{
		pwmData[indx] = 0;
 8001dac:	4a11      	ldr	r2, [pc, #68]	@ (8001df4 <WS2812_Send+0xd0>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2100      	movs	r1, #0
 8001db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b31      	cmp	r3, #49	@ 0x31
 8001dc6:	ddf1      	ble.n	8001dac <WS2812_Send+0x88>
	}

	// Bat dau qua trinh phat chuoi xung PWM bang Timer va DMA.
	// DMA se tu dong nap cac gia tri tu 'pwmData' vao thanh ghi cua Timer.
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <WS2812_Send+0xd0>)
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4809      	ldr	r0, [pc, #36]	@ (8001df8 <WS2812_Send+0xd4>)
 8001dd2:	f002 fe3f 	bl	8004a54 <HAL_TIM_PWM_Start_DMA>

	// Cho cho den khi DMA gui xong toan bo du lieu.
	// Co 'datasentflag' se duoc bat len 1 trong ham callback ngat cua Timer.
	while (!datasentflag){};
 8001dd6:	bf00      	nop
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <WS2812_Send+0xd8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0fb      	beq.n	8001dd8 <WS2812_Send+0xb4>

	// Reset co de chuan bi cho lan gui tiep theo.
	datasentflag = 0;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <WS2812_Send+0xd8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000b8c 	.word	0x20000b8c
 8001df4:	20000d1c 	.word	0x20000d1c
 8001df8:	2000015c 	.word	0x2000015c
 8001dfc:	200016e0 	.word	0x200016e0

08001e00 <HSV_to_RGB_integer>:
  * @param  h: Hue (sac mau), gia tri tu 0 - 359, dai dien cho vong tron mau.
  * @param  s: Saturation (do bao hoa), gia tri tu 0 (mau xam) den 255 (mau dam nhat).
  * @param  v: Value (do sang), gia tri tu 0 (mau toi) den 255 (mau sang nhat).
  * @retval Cau truc RGB_t chua 3 gia tri mau Red, Green, Blue tuong ung.
  */
RGB_t HSV_to_RGB_integer(uint16_t h, uint8_t s, uint8_t v) {
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	717b      	strb	r3, [r7, #5]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	713b      	strb	r3, [r7, #4]
    RGB_t rgb;
    uint8_t region, remainder, p, q, t;

    // Truong hop dac biet: neu do bao hoa (s) bang 0, mau la mau xam.
    // Tat ca cac kenh R, G, B se co cung gia tri la do sang (v).
    if (s == 0) {
 8001e12:	797b      	ldrb	r3, [r7, #5]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d110      	bne.n	8001e3a <HSV_to_RGB_integer+0x3a>
        rgb.r = v;
 8001e18:	793b      	ldrb	r3, [r7, #4]
 8001e1a:	733b      	strb	r3, [r7, #12]
        rgb.g = v;
 8001e1c:	793b      	ldrb	r3, [r7, #4]
 8001e1e:	737b      	strb	r3, [r7, #13]
        rgb.b = v;
 8001e20:	793b      	ldrb	r3, [r7, #4]
 8001e22:	73bb      	strb	r3, [r7, #14]
        return rgb;
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	f107 020c 	add.w	r2, r7, #12
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	8019      	strh	r1, [r3, #0]
 8001e32:	3302      	adds	r3, #2
 8001e34:	0c12      	lsrs	r2, r2, #16
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e084      	b.n	8001f44 <HSV_to_RGB_integer+0x144>
    }

    // Tinh toan khu vuc (region) cua mau tren vong tron mau (chia lam 6 khu vuc, moi khu 60 do).
    region = h / 60;
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4a49      	ldr	r2, [pc, #292]	@ (8001f64 <HSV_to_RGB_integer+0x164>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	75fb      	strb	r3, [r7, #23]

    // Tinh toan phan du, cho biet vi tri cua mau trong khu vuc do.
    // Scale gia tri nay ra thang 0-255 de tinh toan.
    remainder = (h % 60) * 255 / 60;
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	4b46      	ldr	r3, [pc, #280]	@ (8001f64 <HSV_to_RGB_integer+0x164>)
 8001e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e50:	0959      	lsrs	r1, r3, #5
 8001e52:	460b      	mov	r3, r1
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a5b      	subs	r3, r3, r1
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	4a3f      	ldr	r2, [pc, #252]	@ (8001f64 <HSV_to_RGB_integer+0x164>)
 8001e68:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6c:	441a      	add	r2, r3
 8001e6e:	1152      	asrs	r2, r2, #5
 8001e70:	17db      	asrs	r3, r3, #31
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	75bb      	strb	r3, [r7, #22]

    // Tinh toan cac thanh phan mau trung gian p, q, t.
    // p: Gia tri thap nhat cua 3 kenh R,G,B (khi mau bi giam do bao hoa).
    // q, t: Cac gia tri de tao ra su chuyen tiep muot ma giua cac mau.
    // Phep dich bit '>> 8' tuong duong voi phep chia cho 256, la mot cach toi uu hoa.
    p = (v * (255 - s)) >> 8;
 8001e76:	793b      	ldrb	r3, [r7, #4]
 8001e78:	797a      	ldrb	r2, [r7, #5]
 8001e7a:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	121b      	asrs	r3, r3, #8
 8001e84:	757b      	strb	r3, [r7, #21]
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8001e86:	793b      	ldrb	r3, [r7, #4]
 8001e88:	797a      	ldrb	r2, [r7, #5]
 8001e8a:	7db9      	ldrb	r1, [r7, #22]
 8001e8c:	fb01 f202 	mul.w	r2, r1, r2
 8001e90:	1212      	asrs	r2, r2, #8
 8001e92:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	121b      	asrs	r3, r3, #8
 8001e9c:	753b      	strb	r3, [r7, #20]
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8001e9e:	793b      	ldrb	r3, [r7, #4]
 8001ea0:	797a      	ldrb	r2, [r7, #5]
 8001ea2:	7db9      	ldrb	r1, [r7, #22]
 8001ea4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8001ea8:	fb01 f202 	mul.w	r2, r1, r2
 8001eac:	1212      	asrs	r2, r2, #8
 8001eae:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	121b      	asrs	r3, r3, #8
 8001eb8:	74fb      	strb	r3, [r7, #19]

    // Gan gia tri R, G, B tuy thuoc vao khu vuc mau (region).
    switch (region) {
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d830      	bhi.n	8001f22 <HSV_to_RGB_integer+0x122>
 8001ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <HSV_to_RGB_integer+0xc8>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001edd 	.word	0x08001edd
 8001ecc:	08001eeb 	.word	0x08001eeb
 8001ed0:	08001ef9 	.word	0x08001ef9
 8001ed4:	08001f07 	.word	0x08001f07
 8001ed8:	08001f15 	.word	0x08001f15
        case 0: // Do -> Vang
            rgb.r = v; rgb.g = t; rgb.b = p;
 8001edc:	793b      	ldrb	r3, [r7, #4]
 8001ede:	733b      	strb	r3, [r7, #12]
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	737b      	strb	r3, [r7, #13]
 8001ee4:	7d7b      	ldrb	r3, [r7, #21]
 8001ee6:	73bb      	strb	r3, [r7, #14]
            break;
 8001ee8:	e022      	b.n	8001f30 <HSV_to_RGB_integer+0x130>
        case 1: // Vang -> Xanh la
            rgb.r = q; rgb.g = v; rgb.b = p;
 8001eea:	7d3b      	ldrb	r3, [r7, #20]
 8001eec:	733b      	strb	r3, [r7, #12]
 8001eee:	793b      	ldrb	r3, [r7, #4]
 8001ef0:	737b      	strb	r3, [r7, #13]
 8001ef2:	7d7b      	ldrb	r3, [r7, #21]
 8001ef4:	73bb      	strb	r3, [r7, #14]
            break;
 8001ef6:	e01b      	b.n	8001f30 <HSV_to_RGB_integer+0x130>
        case 2: // Xanh la -> Xanh cyan
            rgb.r = p; rgb.g = v; rgb.b = t;
 8001ef8:	7d7b      	ldrb	r3, [r7, #21]
 8001efa:	733b      	strb	r3, [r7, #12]
 8001efc:	793b      	ldrb	r3, [r7, #4]
 8001efe:	737b      	strb	r3, [r7, #13]
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	73bb      	strb	r3, [r7, #14]
            break;
 8001f04:	e014      	b.n	8001f30 <HSV_to_RGB_integer+0x130>
        case 3: // Xanh cyan -> Xanh duong
            rgb.r = p; rgb.g = q; rgb.b = v;
 8001f06:	7d7b      	ldrb	r3, [r7, #21]
 8001f08:	733b      	strb	r3, [r7, #12]
 8001f0a:	7d3b      	ldrb	r3, [r7, #20]
 8001f0c:	737b      	strb	r3, [r7, #13]
 8001f0e:	793b      	ldrb	r3, [r7, #4]
 8001f10:	73bb      	strb	r3, [r7, #14]
            break;
 8001f12:	e00d      	b.n	8001f30 <HSV_to_RGB_integer+0x130>
        case 4: // Xanh duong -> Tim
            rgb.r = t; rgb.g = p; rgb.b = v;
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	733b      	strb	r3, [r7, #12]
 8001f18:	7d7b      	ldrb	r3, [r7, #21]
 8001f1a:	737b      	strb	r3, [r7, #13]
 8001f1c:	793b      	ldrb	r3, [r7, #4]
 8001f1e:	73bb      	strb	r3, [r7, #14]
            break;
 8001f20:	e006      	b.n	8001f30 <HSV_to_RGB_integer+0x130>
        default: // Tim -> Do
            rgb.r = v; rgb.g = p; rgb.b = q;
 8001f22:	793b      	ldrb	r3, [r7, #4]
 8001f24:	733b      	strb	r3, [r7, #12]
 8001f26:	7d7b      	ldrb	r3, [r7, #21]
 8001f28:	737b      	strb	r3, [r7, #13]
 8001f2a:	7d3b      	ldrb	r3, [r7, #20]
 8001f2c:	73bb      	strb	r3, [r7, #14]
            break;
 8001f2e:	bf00      	nop
    }

    return rgb;
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	f107 020c 	add.w	r2, r7, #12
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	8019      	strh	r1, [r3, #0]
 8001f3e:	3302      	adds	r3, #2
 8001f40:	0c12      	lsrs	r2, r2, #16
 8001f42:	701a      	strb	r2, [r3, #0]
}
 8001f44:	2300      	movs	r3, #0
 8001f46:	7c3a      	ldrb	r2, [r7, #16]
 8001f48:	f362 0307 	bfi	r3, r2, #0, #8
 8001f4c:	7c7a      	ldrb	r2, [r7, #17]
 8001f4e:	f362 230f 	bfi	r3, r2, #8, #8
 8001f52:	7cba      	ldrb	r2, [r7, #18]
 8001f54:	f362 4317 	bfi	r3, r2, #16, #8
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	88888889 	.word	0x88888889

08001f68 <calculate_rms>:
  * @param  buffer: Con tro den bo dem chua cac mau am thanh.
  * @param  num_samples: So luong mau trong bo dem can xu ly.
  * @param  dc_offset: Gia tri DC offset cua tin hieu (thuong la mot nua gia tri ADC max).
  * @retval Gia tri am luong RMS (dang so nguyen).
  */
uint16_t calculate_rms(uint16_t* buffer, uint16_t num_samples, uint16_t dc_offset) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	803b      	strh	r3, [r7, #0]
    // Su dung kieu 'uint32_t' de tranh bi tran so khi cong don cac gia tri lon.
    uint32_t sum_of_squares = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

    // Duyet qua tung mau trong khoi du lieu duoc cung cap.
    for (uint16_t i = 0; i < num_samples; i++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	827b      	strh	r3, [r7, #18]
 8001f80:	e012      	b.n	8001fa8 <calculate_rms+0x40>
        // Buoc 1: Loai bo thanh phan DC de chi lay tin hieu xoay chieu (AC).
        // Tin hieu AC co the co gia tri am, nen dung kieu 'int32_t'.
        int32_t ac_signal = buffer[i] - dc_offset;
 8001f82:	8a7b      	ldrh	r3, [r7, #18]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	883b      	ldrh	r3, [r7, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	60fb      	str	r3, [r7, #12]

        // Buoc 2 (Square): Binh phuong gia tri AC (de khu gia tri am)
        // va cong don vao tong (Sum).
        sum_of_squares += ac_signal * ac_signal;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	fb03 f303 	mul.w	r3, r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
    for (uint16_t i = 0; i < num_samples; i++) {
 8001fa2:	8a7b      	ldrh	r3, [r7, #18]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	827b      	strh	r3, [r7, #18]
 8001fa8:	8a7a      	ldrh	r2, [r7, #18]
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3e8      	bcc.n	8001f82 <calculate_rms+0x1a>
    }

    // Buoc 3 (Mean): Tinh gia tri trung binh cong cua tong binh phuong.
    // Buoc 4 (Root): Lay can bac hai cua gia tri trung binh do.
    // Ham sqrtf() la ham tinh can bac hai cho so thuc (float).
    return sqrtf((float)sum_of_squares / num_samples);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fc8:	eeb0 0a66 	vmov.f32	s0, s13
 8001fcc:	f005 fd30 	bl	8007a30 <sqrtf>
 8001fd0:	eef0 7a40 	vmov.f32	s15, s0
 8001fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd8:	ee17 3a90 	vmov	r3, s15
 8001fdc:	b29b      	uxth	r3, r3
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <run_sound_sync_effect>:




void run_sound_sync_effect(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
    uint16_t* processing_buffer = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]

    if (first_half_ready) {
 8001ff2:	4b48      	ldr	r3, [pc, #288]	@ (8002114 <run_sound_sync_effect+0x12c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <run_sound_sync_effect+0x20>
        processing_buffer = &adc_buffer[0];
 8001ffc:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <run_sound_sync_effect+0x130>)
 8001ffe:	61fb      	str	r3, [r7, #28]
        first_half_ready = false;
 8002000:	4b44      	ldr	r3, [pc, #272]	@ (8002114 <run_sound_sync_effect+0x12c>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e009      	b.n	800201c <run_sound_sync_effect+0x34>
    } else if (second_half_ready) {
 8002008:	4b44      	ldr	r3, [pc, #272]	@ (800211c <run_sound_sync_effect+0x134>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <run_sound_sync_effect+0x34>
        processing_buffer = &adc_buffer[BLOCK_SIZE];
 8002012:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <run_sound_sync_effect+0x138>)
 8002014:	61fb      	str	r3, [r7, #28]
        second_half_ready = false;
 8002016:	4b41      	ldr	r3, [pc, #260]	@ (800211c <run_sound_sync_effect+0x134>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
    }

    if (processing_buffer != NULL)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d073      	beq.n	800210a <run_sound_sync_effect+0x122>
    {
    	// TINH TOAN DC OFFSET THUC TE
    	uint32_t sum = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
    	for(int i=0; i<BLOCK_SIZE; i++) {
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e00b      	b.n	8002044 <run_sound_sync_effect+0x5c>
    	    sum += processing_buffer[i];
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4413      	add	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
    	for(int i=0; i<BLOCK_SIZE; i++) {
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2bff      	cmp	r3, #255	@ 0xff
 8002048:	ddf0      	ble.n	800202c <run_sound_sync_effect+0x44>
    	}
    	uint16_t dc_offset_actual = sum / BLOCK_SIZE;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	817b      	strh	r3, [r7, #10]
        // PHAN TICH AM THANH
    	volume_rms = calculate_rms(processing_buffer, BLOCK_SIZE, dc_offset_actual);
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	461a      	mov	r2, r3
 8002054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002058:	69f8      	ldr	r0, [r7, #28]
 800205a:	f7ff ff85 	bl	8001f68 <calculate_rms>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <run_sound_sync_effect+0x13c>)
 8002064:	801a      	strh	r2, [r3, #0]

        // --- 2. ANH XA AM THANH SANG HINH ANH ---
        // Anh xa am luong RMS ra so luong den LED sang
        int leds_to_light = (volume_rms - 10) * MAX_LED / (500 - 10); // Vi du nguong moi
 8002066:	4b2f      	ldr	r3, [pc, #188]	@ (8002124 <run_sound_sync_effect+0x13c>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	3b0a      	subs	r3, #10
 800206c:	2232      	movs	r2, #50	@ 0x32
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <run_sound_sync_effect+0x140>)
 8002074:	fb82 1203 	smull	r1, r2, r2, r3
 8002078:	11d2      	asrs	r2, r2, #7
 800207a:	17db      	asrs	r3, r3, #31
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	613b      	str	r3, [r7, #16]
        if (leds_to_light < 0) leds_to_light = 0;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	da01      	bge.n	800208a <run_sound_sync_effect+0xa2>
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
        if (leds_to_light > MAX_LED) leds_to_light = MAX_LED;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b32      	cmp	r3, #50	@ 0x32
 800208e:	dd01      	ble.n	8002094 <run_sound_sync_effect+0xac>
 8002090:	2332      	movs	r3, #50	@ 0x32
 8002092:	613b      	str	r3, [r7, #16]

        // Anh xa am luong ra mau sac (Hue tu 240-Xanh toi 0-Do)
        uint16_t hue = 240 - ((uint32_t)leds_to_light * 240) / MAX_LED;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	461a      	mov	r2, r3
 80020a0:	4b22      	ldr	r3, [pc, #136]	@ (800212c <run_sound_sync_effect+0x144>)
 80020a2:	fba3 2302 	umull	r2, r3, r3, r2
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80020ae:	813b      	strh	r3, [r7, #8]

        // VE HIEU UNG
        for (int i = 0; i < MAX_LED; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e024      	b.n	8002100 <run_sound_sync_effect+0x118>
            if (i < leds_to_light) {
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	da17      	bge.n	80020ee <run_sound_sync_effect+0x106>
                // Tat ca cac den sang se co cung mot mau nong/lanh tuy thuoc vao so luong den
                RGB_t color = HSV_to_RGB_integer(hue, 255, 200); // S=255, V=200
 80020be:	893b      	ldrh	r3, [r7, #8]
 80020c0:	22c8      	movs	r2, #200	@ 0xc8
 80020c2:	21ff      	movs	r1, #255	@ 0xff
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe9b 	bl	8001e00 <HSV_to_RGB_integer>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	713a      	strb	r2, [r7, #4]
 80020d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80020d4:	717a      	strb	r2, [r7, #5]
 80020d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80020da:	71bb      	strb	r3, [r7, #6]
                Set_LED(i, color.r, color.g, color.b);
 80020dc:	793b      	ldrb	r3, [r7, #4]
 80020de:	4619      	mov	r1, r3
 80020e0:	797b      	ldrb	r3, [r7, #5]
 80020e2:	461a      	mov	r2, r3
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fd48 	bl	8001b7c <Set_LED>
 80020ec:	e005      	b.n	80020fa <run_sound_sync_effect+0x112>
            } else {
                Set_LED(i, 0, 0, 0); // Tat cac den con lai
 80020ee:	2300      	movs	r3, #0
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff fd41 	bl	8001b7c <Set_LED>
        for (int i = 0; i < MAX_LED; i++) {
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b31      	cmp	r3, #49	@ 0x31
 8002104:	ddd7      	ble.n	80020b6 <run_sound_sync_effect+0xce>
            }
        }
        // Gui du lieu toi LED
        WS2812_Send();
 8002106:	f7ff fe0d 	bl	8001d24 <WS2812_Send>
    }
}
 800210a:	bf00      	nop
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000b88 	.word	0x20000b88
 8002118:	20000788 	.word	0x20000788
 800211c:	20000b89 	.word	0x20000b89
 8002120:	20000988 	.word	0x20000988
 8002124:	200016e6 	.word	0x200016e6
 8002128:	42df9bb1 	.word	0x42df9bb1
 800212c:	51eb851f 	.word	0x51eb851f

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <Error_Handler+0x8>

0800213c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_MspInit+0x4c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <HAL_MspInit+0x4c>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_MspInit+0x4c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <HAL_MspInit+0x4c>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	@ 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002268 <HAL_ADC_MspInit+0xdc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d157      	bne.n	800225e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <HAL_ADC_MspInit+0xe0>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4a2d      	ldr	r2, [pc, #180]	@ (800226c <HAL_ADC_MspInit+0xe0>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_ADC_MspInit+0xe0>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b27      	ldr	r3, [pc, #156]	@ (800226c <HAL_ADC_MspInit+0xe0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_ADC_MspInit+0xe0>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_ADC_MspInit+0xe0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AUDIO_IN_Pin;
 80021e6:	2302      	movs	r3, #2
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ea:	2303      	movs	r3, #3
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_IN_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	481d      	ldr	r0, [pc, #116]	@ (8002270 <HAL_ADC_MspInit+0xe4>)
 80021fa:	f001 fb91 	bl	8003920 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002200:	4a1d      	ldr	r2, [pc, #116]	@ (8002278 <HAL_ADC_MspInit+0xec>)
 8002202:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002216:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221e:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002224:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800222c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002234:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223c:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002242:	480c      	ldr	r0, [pc, #48]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002244:	f000 ffda 	bl	80031fc <HAL_DMA_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800224e:	f7ff ff6f 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 8002256:	639a      	str	r2, [r3, #56]	@ 0x38
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_ADC_MspInit+0xe8>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	@ 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40012000 	.word	0x40012000
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000
 8002274:	200000fc 	.word	0x200000fc
 8002278:	40026410 	.word	0x40026410

0800227c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a30      	ldr	r2, [pc, #192]	@ (800234c <HAL_TIM_Base_MspInit+0xd0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d13e      	bne.n	800230c <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_TIM_Base_MspInit+0xd4>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002296:	4a2e      	ldr	r2, [pc, #184]	@ (8002350 <HAL_TIM_Base_MspInit+0xd4>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6453      	str	r3, [r2, #68]	@ 0x44
 800229e:	4b2c      	ldr	r3, [pc, #176]	@ (8002350 <HAL_TIM_Base_MspInit+0xd4>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80022aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002358 <HAL_TIM_Base_MspInit+0xdc>)
 80022ae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80022b0:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022b2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80022b6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b8:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022ba:	2240      	movs	r2, #64	@ 0x40
 80022bc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022be:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ca:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022cc:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022d2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022da:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80022ee:	4819      	ldr	r0, [pc, #100]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 80022f0:	f000 ff84 	bl	80031fc <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022fa:	f7ff ff19 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 8002302:	625a      	str	r2, [r3, #36]	@ 0x24
 8002304:	4a13      	ldr	r2, [pc, #76]	@ (8002354 <HAL_TIM_Base_MspInit+0xd8>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800230a:	e01a      	b.n	8002342 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d115      	bne.n	8002342 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_TIM_Base_MspInit+0xd4>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a0c      	ldr	r2, [pc, #48]	@ (8002350 <HAL_TIM_Base_MspInit+0xd4>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_TIM_Base_MspInit+0xd4>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	201c      	movs	r0, #28
 8002338:	f000 ff29 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800233c:	201c      	movs	r0, #28
 800233e:	f000 ff42 	bl	80031c6 <HAL_NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40023800 	.word	0x40023800
 8002354:	200001ec 	.word	0x200001ec
 8002358:	40026428 	.word	0x40026428

0800235c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <HAL_TIM_MspPostInit+0x68>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d11e      	bne.n	80023bc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	@ (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800239a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800239e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4619      	mov	r1, r3
 80023b6:	4805      	ldr	r0, [pc, #20]	@ (80023cc <HAL_TIM_MspPostInit+0x70>)
 80023b8:	f001 fab2 	bl	8003920 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000

080023d0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	@ 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f0:	d132      	bne.n	8002458 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a19      	ldr	r2, [pc, #100]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800240e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002420:	230a      	movs	r3, #10
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	480e      	ldr	r0, [pc, #56]	@ (8002464 <HAL_PCD_MspInit+0x94>)
 800242c:	f001 fa78 	bl	8003920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 8002436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800243a:	6353      	str	r3, [r2, #52]	@ 0x34
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	4a06      	ldr	r2, [pc, #24]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244a:	6453      	str	r3, [r2, #68]	@ 0x44
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <HAL_PCD_MspInit+0x90>)
 800244e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	@ 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <HAL_FSMC_MspInit+0x88>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d131      	bne.n	80024e8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <HAL_FSMC_MspInit+0x88>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_FSMC_MspInit+0x8c>)
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_FSMC_MspInit+0x8c>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6393      	str	r3, [r2, #56]	@ 0x38
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_FSMC_MspInit+0x8c>)
 800249c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024a6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80024aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024b8:	230c      	movs	r3, #12
 80024ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	480d      	ldr	r0, [pc, #52]	@ (80024f8 <HAL_FSMC_MspInit+0x90>)
 80024c2:	f001 fa2d 	bl	8003920 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80024c6:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80024ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024d8:	230c      	movs	r3, #12
 80024da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4806      	ldr	r0, [pc, #24]	@ (80024fc <HAL_FSMC_MspInit+0x94>)
 80024e2:	f001 fa1d 	bl	8003920 <HAL_GPIO_Init>
 80024e6:	e000      	b.n	80024ea <HAL_FSMC_MspInit+0x82>
    return;
 80024e8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	200016e8 	.word	0x200016e8
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40020c00 	.word	0x40020c00

08002500 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002508:	f7ff ffae 	bl	8002468 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <NMI_Handler+0x4>

0800251c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <MemManage_Handler+0x4>

0800252c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <UsageFault_Handler+0x4>

0800253c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256a:	f000 f8e5 	bl	8002738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <TIM2_IRQHandler+0x10>)
 800257a:	f002 fd05 	bl	8004f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200001a4 	.word	0x200001a4

08002588 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <DMA2_Stream0_IRQHandler+0x10>)
 800258e:	f000 ff5d 	bl	800344c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200000fc 	.word	0x200000fc

0800259c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <DMA2_Stream1_IRQHandler+0x10>)
 80025a2:	f000 ff53 	bl	800344c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200001ec 	.word	0x200001ec

080025b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b8:	4a14      	ldr	r2, [pc, #80]	@ (800260c <_sbrk+0x5c>)
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <_sbrk+0x60>)
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c4:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025cc:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <_sbrk+0x64>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <_sbrk+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e0:	f004 fd7a 	bl	80070d8 <__errno>
 80025e4:	4603      	mov	r3, r0
 80025e6:	220c      	movs	r2, #12
 80025e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e009      	b.n	8002604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	4a05      	ldr	r2, [pc, #20]	@ (8002614 <_sbrk+0x64>)
 8002600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20020000 	.word	0x20020000
 8002610:	00000400 	.word	0x00000400
 8002614:	200016ec 	.word	0x200016ec
 8002618:	20001948 	.word	0x20001948

0800261c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <SystemInit+0x20>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	4a05      	ldr	r2, [pc, #20]	@ (800263c <SystemInit+0x20>)
 8002628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002644:	f7ff ffea 	bl	800261c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800264a:	490d      	ldr	r1, [pc, #52]	@ (8002680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002650:	e002      	b.n	8002658 <LoopCopyDataInit>

08002652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002656:	3304      	adds	r3, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800265c:	d3f9      	bcc.n	8002652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265e:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002660:	4c0a      	ldr	r4, [pc, #40]	@ (800268c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002664:	e001      	b.n	800266a <LoopFillZerobss>

08002666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002668:	3204      	adds	r2, #4

0800266a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800266c:	d3fb      	bcc.n	8002666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800266e:	f004 fd39 	bl	80070e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7fe fc31 	bl	8000ed8 <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002684:	0800c7b8 	.word	0x0800c7b8
  ldr r2, =_sbss
 8002688:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800268c:	20001944 	.word	0x20001944

08002690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC_IRQHandler>
	...

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002698:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <HAL_Init+0x40>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <HAL_Init+0x40>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b0:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <HAL_Init+0x40>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	2003      	movs	r0, #3
 80026be:	f000 fd5b 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c2:	200f      	movs	r0, #15
 80026c4:	f000 f808 	bl	80026d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c8:	f7ff fd38 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e0:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_InitTick+0x54>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_InitTick+0x58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd73 	bl	80031e2 <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00e      	b.n	8002724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d80a      	bhi.n	8002722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f000 fd3b 	bl	800318e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002718:	4a06      	ldr	r2, [pc, #24]	@ (8002734 <HAL_InitTick+0x5c>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000004 	.word	0x20000004
 8002730:	2000000c 	.word	0x2000000c
 8002734:	20000008 	.word	0x20000008

08002738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <HAL_IncTick+0x20>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_IncTick+0x24>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	@ (800275c <HAL_IncTick+0x24>)
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000000c 	.word	0x2000000c
 800275c:	200016f0 	.word	0x200016f0

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200016f0 	.word	0x200016f0

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d005      	beq.n	800279e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <HAL_Delay+0x44>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800279e:	bf00      	nop
 80027a0:	f7ff ffde 	bl	8002760 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d8f7      	bhi.n	80027a0 <HAL_Delay+0x28>
  {
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e033      	b.n	800283e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fcd4 	bl	800218c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002806:	f023 0302 	bic.w	r3, r3, #2
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa62 	bl	8002cdc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f023 0303 	bic.w	r3, r3, #3
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
 800282e:	e001      	b.n	8002834 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_ADC_Start_DMA+0x22>
 8002866:	2302      	movs	r3, #2
 8002868:	e0eb      	b.n	8002a42 <HAL_ADC_Start_DMA+0x1fa>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d018      	beq.n	80028b2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002890:	4b6e      	ldr	r3, [pc, #440]	@ (8002a4c <HAL_ADC_Start_DMA+0x204>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6e      	ldr	r2, [pc, #440]	@ (8002a50 <HAL_ADC_Start_DMA+0x208>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9a      	lsrs	r2, r3, #18
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c0:	d107      	bne.n	80028d2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028d0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	f040 80a3 	bne.w	8002a28 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800290c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800291c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002920:	d106      	bne.n	8002930 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f023 0206 	bic.w	r2, r3, #6
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44
 800292e:	e002      	b.n	8002936 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293e:	4b45      	ldr	r3, [pc, #276]	@ (8002a54 <HAL_ADC_Start_DMA+0x20c>)
 8002940:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	4a44      	ldr	r2, [pc, #272]	@ (8002a58 <HAL_ADC_Start_DMA+0x210>)
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294e:	4a43      	ldr	r2, [pc, #268]	@ (8002a5c <HAL_ADC_Start_DMA+0x214>)
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002956:	4a42      	ldr	r2, [pc, #264]	@ (8002a60 <HAL_ADC_Start_DMA+0x218>)
 8002958:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002962:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002972:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002982:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	334c      	adds	r3, #76	@ 0x4c
 800298e:	4619      	mov	r1, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f000 fce0 	bl	8003358 <HAL_DMA_Start_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d12a      	bne.n	80029fe <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002a64 <HAL_ADC_Start_DMA+0x21c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d015      	beq.n	80029de <HAL_ADC_Start_DMA+0x196>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a68 <HAL_ADC_Start_DMA+0x220>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_Start_DMA+0x180>
 80029bc:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <HAL_ADC_Start_DMA+0x20c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a27      	ldr	r2, [pc, #156]	@ (8002a6c <HAL_ADC_Start_DMA+0x224>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d136      	bne.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_ADC_Start_DMA+0x20c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d130      	bne.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d129      	bne.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e020      	b.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_ADC_Start_DMA+0x21c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d11b      	bne.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d114      	bne.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	e00b      	b.n	8002a40 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	40012300 	.word	0x40012300
 8002a58:	08002ed5 	.word	0x08002ed5
 8002a5c:	08002f8f 	.word	0x08002f8f
 8002a60:	08002fab 	.word	0x08002fab
 8002a64:	40012000 	.word	0x40012000
 8002a68:	40012100 	.word	0x40012100
 8002a6c:	40012200 	.word	0x40012200

08002a70 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e105      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x228>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d925      	bls.n	8002b10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	2207      	movs	r2, #7
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68d9      	ldr	r1, [r3, #12]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4403      	add	r3, r0
 8002b02:	3b1e      	subs	r3, #30
 8002b04:	409a      	lsls	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	e022      	b.n	8002b56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6919      	ldr	r1, [r3, #16]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	2207      	movs	r2, #7
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6919      	ldr	r1, [r3, #16]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4403      	add	r3, r0
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d824      	bhi.n	8002ba8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b05      	subs	r3, #5
 8002b70:	221f      	movs	r2, #31
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b05      	subs	r3, #5
 8002b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ba6:	e04c      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d824      	bhi.n	8002bfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b23      	subs	r3, #35	@ 0x23
 8002bc2:	221f      	movs	r2, #31
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	400a      	ands	r2, r1
 8002bd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	3b23      	subs	r3, #35	@ 0x23
 8002bec:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bf8:	e023      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b41      	subs	r3, #65	@ 0x41
 8002c0c:	221f      	movs	r2, #31
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	3b41      	subs	r3, #65	@ 0x41
 8002c36:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_ADC_ConfigChannel+0x234>)
 8002c44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a21      	ldr	r2, [pc, #132]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x238>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d109      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1cc>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a19      	ldr	r2, [pc, #100]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x238>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d123      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x21e>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d003      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0x1e6>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b11      	cmp	r3, #17
 8002c7c:	d11b      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d111      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x23c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x240>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9a      	lsrs	r2, r3, #18
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f9      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40012300 	.word	0x40012300
 8002cd0:	40012000 	.word	0x40012000
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	431bde83 	.word	0x431bde83

08002cdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce4:	4b79      	ldr	r3, [pc, #484]	@ (8002ecc <ADC_Init+0x1f0>)
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	021a      	lsls	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	4a58      	ldr	r2, [pc, #352]	@ (8002ed0 <ADC_Init+0x1f4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e00f      	b.n	8002dda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0202 	bic.w	r2, r2, #2
 8002de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7e1b      	ldrb	r3, [r3, #24]
 8002df4:	005a      	lsls	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	3b01      	subs	r3, #1
 8002e34:	035a      	lsls	r2, r3, #13
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	e007      	b.n	8002e50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	051a      	lsls	r2, r3, #20
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e92:	025a      	lsls	r2, r3, #9
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	029a      	lsls	r2, r3, #10
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40012300 	.word	0x40012300
 8002ed0:	0f000001 	.word	0x0f000001

08002ed4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d13c      	bne.n	8002f68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d12b      	bne.n	8002f60 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d127      	bne.n	8002f60 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d119      	bne.n	8002f60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0220 	bic.w	r2, r2, #32
 8002f3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fd85 	bl	8002a70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f66:	e00e      	b.n	8002f86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff fd85 	bl	8002a84 <HAL_ADC_ErrorCallback>
}
 8002f7a:	e004      	b.n	8002f86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7fe fb39 	bl	8001614 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f043 0204 	orr.w	r2, r3, #4
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff fd5a 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	60d3      	str	r3, [r2, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	@ (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
         );
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003144:	d301      	bcc.n	800314a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <SysTick_Config+0x40>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003152:	210f      	movs	r1, #15
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f7ff ff8e 	bl	8003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <SysTick_Config+0x40>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <SysTick_Config+0x40>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff29 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a0:	f7ff ff3e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 80031a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff ff8e 	bl	80030cc <NVIC_EncodePriority>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff5d 	bl	8003078 <__NVIC_SetPriority>
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff31 	bl	800303c <__NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffa2 	bl	8003134 <SysTick_Config>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff faaa 	bl	8002760 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e099      	b.n	800334c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003238:	e00f      	b.n	800325a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323a:	f7ff fa91 	bl	8002760 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b05      	cmp	r3, #5
 8003246:	d908      	bls.n	800325a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2203      	movs	r2, #3
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e078      	b.n	800334c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e8      	bne.n	800323a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <HAL_DMA_Init+0x158>)
 8003274:	4013      	ands	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003286:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d107      	bne.n	80032c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4313      	orrs	r3, r2
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d117      	bne.n	800331e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fa91 	bl	8003828 <DMA_CheckFifoParam>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2240      	movs	r2, #64	@ 0x40
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800331a:	2301      	movs	r3, #1
 800331c:	e016      	b.n	800334c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa48 	bl	80037bc <DMA_CalcBaseAndBitshift>
 800332c:	4603      	mov	r3, r0
 800332e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	223f      	movs	r2, #63	@ 0x3f
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	f010803f 	.word	0xf010803f

08003358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_DMA_Start_IT+0x26>
 800337a:	2302      	movs	r3, #2
 800337c:	e040      	b.n	8003400 <HAL_DMA_Start_IT+0xa8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d12f      	bne.n	80033f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f9da 	bl	8003760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b0:	223f      	movs	r2, #63	@ 0x3f
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0216 	orr.w	r2, r2, #22
 80033c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e005      	b.n	80033fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
 80033fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d004      	beq.n	8003426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2280      	movs	r2, #128	@ 0x80
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00c      	b.n	8003440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2205      	movs	r2, #5
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003458:	4b8e      	ldr	r3, [pc, #568]	@ (8003694 <HAL_DMA_IRQHandler+0x248>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a8e      	ldr	r2, [pc, #568]	@ (8003698 <HAL_DMA_IRQHandler+0x24c>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0a9b      	lsrs	r3, r3, #10
 8003464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	2208      	movs	r2, #8
 8003478:	409a      	lsls	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01a      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0204 	bic.w	r2, r2, #4
 800349e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	2208      	movs	r2, #8
 80034a6:	409a      	lsls	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	2201      	movs	r2, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	f043 0202 	orr.w	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	2204      	movs	r2, #4
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	2204      	movs	r2, #4
 8003512:	409a      	lsls	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	2210      	movs	r2, #16
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d043      	beq.n	80035bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03c      	beq.n	80035bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	2210      	movs	r2, #16
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d018      	beq.n	800358e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d108      	bne.n	800357c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d024      	beq.n	80035bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
 800357a:	e01f      	b.n	80035bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	e016      	b.n	80035bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0208 	bic.w	r2, r2, #8
 80035aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c0:	2220      	movs	r2, #32
 80035c2:	409a      	lsls	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 808f 	beq.w	80036ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8087 	beq.w	80036ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e2:	2220      	movs	r2, #32
 80035e4:	409a      	lsls	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d136      	bne.n	8003664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0216 	bic.w	r2, r2, #22
 8003604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <HAL_DMA_IRQHandler+0x1da>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0208 	bic.w	r2, r2, #8
 8003634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	223f      	movs	r2, #63	@ 0x3f
 800363c:	409a      	lsls	r2, r3
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d07e      	beq.n	8003758 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
        }
        return;
 8003662:	e079      	b.n	8003758 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01d      	beq.n	80036ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003684:	2b00      	cmp	r3, #0
 8003686:	d031      	beq.n	80036ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
 8003690:	e02c      	b.n	80036ec <HAL_DMA_IRQHandler+0x2a0>
 8003692:	bf00      	nop
 8003694:	20000004 	.word	0x20000004
 8003698:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d023      	beq.n	80036ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e01e      	b.n	80036ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10f      	bne.n	80036dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0210 	bic.w	r2, r2, #16
 80036ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d032      	beq.n	800375a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d022      	beq.n	8003746 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2205      	movs	r2, #5
 8003704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3301      	adds	r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	429a      	cmp	r2, r3
 8003722:	d307      	bcc.n	8003734 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f2      	bne.n	8003718 <HAL_DMA_IRQHandler+0x2cc>
 8003732:	e000      	b.n	8003736 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003734:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e000      	b.n	800375a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003758:	bf00      	nop
    }
  }
}
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800377c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b40      	cmp	r3, #64	@ 0x40
 800378c:	d108      	bne.n	80037a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800379e:	e007      	b.n	80037b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	3b10      	subs	r3, #16
 80037cc:	4a14      	ldr	r2, [pc, #80]	@ (8003820 <DMA_CalcBaseAndBitshift+0x64>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037d6:	4a13      	ldr	r2, [pc, #76]	@ (8003824 <DMA_CalcBaseAndBitshift+0x68>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d909      	bls.n	80037fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80037fc:	e007      	b.n	800380e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003806:	f023 0303 	bic.w	r3, r3, #3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	aaaaaaab 	.word	0xaaaaaaab
 8003824:	08008bb0 	.word	0x08008bb0

08003828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d11f      	bne.n	8003882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b03      	cmp	r3, #3
 8003846:	d856      	bhi.n	80038f6 <DMA_CheckFifoParam+0xce>
 8003848:	a201      	add	r2, pc, #4	@ (adr r2, 8003850 <DMA_CheckFifoParam+0x28>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	08003861 	.word	0x08003861
 8003854:	08003873 	.word	0x08003873
 8003858:	08003861 	.word	0x08003861
 800385c:	080038f7 	.word	0x080038f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d046      	beq.n	80038fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003870:	e043      	b.n	80038fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800387a:	d140      	bne.n	80038fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e03d      	b.n	80038fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800388a:	d121      	bne.n	80038d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d837      	bhi.n	8003902 <DMA_CheckFifoParam+0xda>
 8003892:	a201      	add	r2, pc, #4	@ (adr r2, 8003898 <DMA_CheckFifoParam+0x70>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038af 	.word	0x080038af
 80038a0:	080038a9 	.word	0x080038a9
 80038a4:	080038c1 	.word	0x080038c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      break;
 80038ac:	e030      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d025      	beq.n	8003906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038be:	e022      	b.n	8003906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038c8:	d11f      	bne.n	800390a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ce:	e01c      	b.n	800390a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d903      	bls.n	80038de <DMA_CheckFifoParam+0xb6>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d003      	beq.n	80038e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038dc:	e018      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
      break;
 80038e2:	e015      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00e      	beq.n	800390e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      break;
 80038f4:	e00b      	b.n	800390e <DMA_CheckFifoParam+0xe6>
      break;
 80038f6:	bf00      	nop
 80038f8:	e00a      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      break;
 80038fa:	bf00      	nop
 80038fc:	e008      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      break;
 80038fe:	bf00      	nop
 8003900:	e006      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      break;
 8003902:	bf00      	nop
 8003904:	e004      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      break;   
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <DMA_CheckFifoParam+0xe8>
      break;
 800390e:	bf00      	nop
    }
  } 
  
  return status; 
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop

08003920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	@ 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e16b      	b.n	8003c14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800393c:	2201      	movs	r2, #1
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	f040 815a 	bne.w	8003c0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d005      	beq.n	8003972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800396e:	2b02      	cmp	r3, #2
 8003970:	d130      	bne.n	80039d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039a8:	2201      	movs	r2, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 0201 	and.w	r2, r3, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d017      	beq.n	8003a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d123      	bne.n	8003a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	08da      	lsrs	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3208      	adds	r2, #8
 8003a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	220f      	movs	r2, #15
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	08da      	lsrs	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3208      	adds	r2, #8
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0203 	and.w	r2, r3, #3
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80b4 	beq.w	8003c0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b60      	ldr	r3, [pc, #384]	@ (8003c2c <HAL_GPIO_Init+0x30c>)
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	4a5f      	ldr	r2, [pc, #380]	@ (8003c2c <HAL_GPIO_Init+0x30c>)
 8003ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c2c <HAL_GPIO_Init+0x30c>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c30 <HAL_GPIO_Init+0x310>)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	3302      	adds	r3, #2
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	220f      	movs	r2, #15
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a52      	ldr	r2, [pc, #328]	@ (8003c34 <HAL_GPIO_Init+0x314>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02b      	beq.n	8003b46 <HAL_GPIO_Init+0x226>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a51      	ldr	r2, [pc, #324]	@ (8003c38 <HAL_GPIO_Init+0x318>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d025      	beq.n	8003b42 <HAL_GPIO_Init+0x222>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a50      	ldr	r2, [pc, #320]	@ (8003c3c <HAL_GPIO_Init+0x31c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <HAL_GPIO_Init+0x21e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4f      	ldr	r2, [pc, #316]	@ (8003c40 <HAL_GPIO_Init+0x320>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x21a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4e      	ldr	r2, [pc, #312]	@ (8003c44 <HAL_GPIO_Init+0x324>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x216>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a4d      	ldr	r2, [pc, #308]	@ (8003c48 <HAL_GPIO_Init+0x328>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x212>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a4c      	ldr	r2, [pc, #304]	@ (8003c4c <HAL_GPIO_Init+0x32c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x20e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4b      	ldr	r2, [pc, #300]	@ (8003c50 <HAL_GPIO_Init+0x330>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x20a>
 8003b26:	2307      	movs	r3, #7
 8003b28:	e00e      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	e00c      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b2e:	2306      	movs	r3, #6
 8003b30:	e00a      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b32:	2305      	movs	r3, #5
 8003b34:	e008      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b36:	2304      	movs	r3, #4
 8003b38:	e006      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e004      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e002      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_GPIO_Init+0x228>
 8003b46:	2300      	movs	r3, #0
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f002 0203 	and.w	r2, r2, #3
 8003b4e:	0092      	lsls	r2, r2, #2
 8003b50:	4093      	lsls	r3, r2
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b58:	4935      	ldr	r1, [pc, #212]	@ (8003c30 <HAL_GPIO_Init+0x310>)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b66:	4b3b      	ldr	r3, [pc, #236]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b8a:	4a32      	ldr	r2, [pc, #200]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b90:	4b30      	ldr	r3, [pc, #192]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb4:	4a27      	ldr	r2, [pc, #156]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bba:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bde:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c08:	4a12      	ldr	r2, [pc, #72]	@ (8003c54 <HAL_GPIO_Init+0x334>)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	f67f ae90 	bls.w	800393c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3724      	adds	r7, #36	@ 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40013800 	.word	0x40013800
 8003c34:	40020000 	.word	0x40020000
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40021400 	.word	0x40021400
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	40021c00 	.word	0x40021c00
 8003c54:	40013c00 	.word	0x40013c00

08003c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	e001      	b.n	8003c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
 8003c94:	4613      	mov	r3, r2
 8003c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c98:	787b      	ldrb	r3, [r7, #1]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca4:	e003      	b.n	8003cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ca6:	887b      	ldrh	r3, [r7, #2]
 8003ca8:	041a      	lsls	r2, r3, #16
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	619a      	str	r2, [r3, #24]
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af02      	add	r7, sp, #8
 8003cc0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e101      	b.n	8003ed0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe fb72 	bl	80023d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cfa:	d102      	bne.n	8003d02 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 f9f0 	bl	80060ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7c1a      	ldrb	r2, [r3, #16]
 8003d14:	f88d 2000 	strb.w	r2, [sp]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d1c:	f002 f982 	bl	8006024 <USB_CoreInit>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e0ce      	b.n	8003ed0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f002 f9e8 	bl	800610e <USB_SetCurrentMode>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0bf      	b.n	8003ed0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	e04a      	b.n	8003dec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	3315      	adds	r3, #21
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3314      	adds	r3, #20
 8003d7a:	7bfa      	ldrb	r2, [r7, #15]
 8003d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	b298      	uxth	r0, r3
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	332e      	adds	r3, #46	@ 0x2e
 8003d92:	4602      	mov	r2, r0
 8003d94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d96:	7bfa      	ldrb	r2, [r7, #15]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3318      	adds	r3, #24
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003daa:	7bfa      	ldrb	r2, [r7, #15]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	331c      	adds	r3, #28
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3320      	adds	r3, #32
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3324      	adds	r3, #36	@ 0x24
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	3301      	adds	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	791b      	ldrb	r3, [r3, #4]
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d3af      	bcc.n	8003d56 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	e044      	b.n	8003e86 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	3301      	adds	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	791b      	ldrb	r3, [r3, #4]
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3b5      	bcc.n	8003dfc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7c1a      	ldrb	r2, [r3, #16]
 8003e98:	f88d 2000 	strb.w	r2, [sp]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea0:	f002 f982 	bl	80061a8 <USB_DevInit>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00c      	b.n	8003ed0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f002 fb4a 	bl	8006562 <USB_DevDisconnect>

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e267      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d075      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ef6:	4b88      	ldr	r3, [pc, #544]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d00c      	beq.n	8003f1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f02:	4b85      	ldr	r3, [pc, #532]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d112      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0e:	4b82      	ldr	r3, [pc, #520]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05b      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x108>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d157      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e242      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3c:	d106      	bne.n	8003f4c <HAL_RCC_OscConfig+0x74>
 8003f3e:	4b76      	ldr	r3, [pc, #472]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a75      	ldr	r2, [pc, #468]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e01d      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b70      	ldr	r3, [pc, #448]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6f      	ldr	r2, [pc, #444]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6c      	ldr	r2, [pc, #432]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e00b      	b.n	8003f88 <HAL_RCC_OscConfig+0xb0>
 8003f70:	4b69      	ldr	r3, [pc, #420]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a68      	ldr	r2, [pc, #416]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b66      	ldr	r3, [pc, #408]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a65      	ldr	r2, [pc, #404]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fe fbe6 	bl	8002760 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fe fbe2 	bl	8002760 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	@ 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e207      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b5b      	ldr	r3, [pc, #364]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0xc0>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe fbd2 	bl	8002760 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fe fbce 	bl	8002760 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	@ 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1f3      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0xe8>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fee:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004002:	2b08      	cmp	r3, #8
 8004004:	d11c      	bne.n	8004040 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004006:	4b44      	ldr	r3, [pc, #272]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_RCC_OscConfig+0x152>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1c7      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4937      	ldr	r1, [pc, #220]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	e03a      	b.n	80040b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004048:	4b34      	ldr	r3, [pc, #208]	@ (800411c <HAL_RCC_OscConfig+0x244>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fe fb87 	bl	8002760 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004056:	f7fe fb83 	bl	8002760 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1a8      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b28      	ldr	r3, [pc, #160]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4925      	ldr	r1, [pc, #148]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408a:	4b24      	ldr	r3, [pc, #144]	@ (800411c <HAL_RCC_OscConfig+0x244>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe fb66 	bl	8002760 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004098:	f7fe fb62 	bl	8002760 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e187      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d036      	beq.n	8004130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <HAL_RCC_OscConfig+0x248>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fe fb46 	bl	8002760 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d8:	f7fe fb42 	bl	8002760 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e167      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_OscConfig+0x240>)
 80040ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x200>
 80040f6:	e01b      	b.n	8004130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f8:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_OscConfig+0x248>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fb2f 	bl	8002760 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	e00e      	b.n	8004124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004106:	f7fe fb2b 	bl	8002760 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d907      	bls.n	8004124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e150      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
 8004118:	40023800 	.word	0x40023800
 800411c:	42470000 	.word	0x42470000
 8004120:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b88      	ldr	r3, [pc, #544]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ea      	bne.n	8004106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8097 	beq.w	800426c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b81      	ldr	r3, [pc, #516]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	4b7d      	ldr	r3, [pc, #500]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	4a7c      	ldr	r2, [pc, #496]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415c:	6413      	str	r3, [r2, #64]	@ 0x40
 800415e:	4b7a      	ldr	r3, [pc, #488]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b77      	ldr	r3, [pc, #476]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417a:	4b74      	ldr	r3, [pc, #464]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a73      	ldr	r2, [pc, #460]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fe faeb 	bl	8002760 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe fae7 	bl	8002760 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e10c      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b6a      	ldr	r3, [pc, #424]	@ (800434c <HAL_RCC_OscConfig+0x474>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x2ea>
 80041b4:	4b64      	ldr	r3, [pc, #400]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	4a63      	ldr	r2, [pc, #396]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0x324>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x30c>
 80041ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	4a5b      	ldr	r2, [pc, #364]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0x324>
 80041e4:	4b58      	ldr	r3, [pc, #352]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e8:	4a57      	ldr	r2, [pc, #348]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f0:	4b55      	ldr	r3, [pc, #340]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	4a54      	ldr	r2, [pc, #336]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80041f6:	f023 0304 	bic.w	r3, r3, #4
 80041fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d015      	beq.n	8004230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fe faac 	bl	8002760 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420c:	f7fe faa8 	bl	8002760 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0cb      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004222:	4b49      	ldr	r3, [pc, #292]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ee      	beq.n	800420c <HAL_RCC_OscConfig+0x334>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fe fa96 	bl	8002760 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fe fa92 	bl	8002760 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0b5      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800424e:	4b3e      	ldr	r3, [pc, #248]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d105      	bne.n	800426c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004260:	4b39      	ldr	r3, [pc, #228]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	4a38      	ldr	r2, [pc, #224]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800426a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80a1 	beq.w	80043b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b08      	cmp	r3, #8
 8004280:	d05c      	beq.n	800433c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d141      	bne.n	800430e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b31      	ldr	r3, [pc, #196]	@ (8004350 <HAL_RCC_OscConfig+0x478>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe fa66 	bl	8002760 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fe fa62 	bl	8002760 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e087      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042aa:	4b27      	ldr	r3, [pc, #156]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	491b      	ldr	r1, [pc, #108]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x478>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe fa3b 	bl	8002760 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ee:	f7fe fa37 	bl	8002760 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e05c      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x416>
 800430c:	e054      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <HAL_RCC_OscConfig+0x478>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fe fa24 	bl	8002760 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe fa20 	bl	8002760 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e045      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_OscConfig+0x470>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x444>
 800433a:	e03d      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e038      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004354:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d028      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d121      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d11a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800438a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0cc      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b68      	ldr	r3, [pc, #416]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d90c      	bls.n	8004404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b65      	ldr	r3, [pc, #404]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b63      	ldr	r3, [pc, #396]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0b8      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d020      	beq.n	8004452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800441c:	4b59      	ldr	r3, [pc, #356]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4a58      	ldr	r2, [pc, #352]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004434:	4b53      	ldr	r3, [pc, #332]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a52      	ldr	r2, [pc, #328]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800443e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004440:	4b50      	ldr	r3, [pc, #320]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	494d      	ldr	r1, [pc, #308]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d044      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b47      	ldr	r3, [pc, #284]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d119      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e07f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d003      	beq.n	8004486 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004482:	2b03      	cmp	r3, #3
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	4b3f      	ldr	r3, [pc, #252]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004496:	4b3b      	ldr	r3, [pc, #236]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e067      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a6:	4b37      	ldr	r3, [pc, #220]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 0203 	bic.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4934      	ldr	r1, [pc, #208]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044b8:	f7fe f952 	bl	8002760 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c0:	f7fe f94e 	bl	8002760 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e04f      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 020c 	and.w	r2, r3, #12
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1eb      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e8:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d20c      	bcs.n	8004510 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e032      	b.n	8004576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451c:	4b19      	ldr	r3, [pc, #100]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4916      	ldr	r1, [pc, #88]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453a:	4b12      	ldr	r3, [pc, #72]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	490e      	ldr	r1, [pc, #56]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800454e:	f000 f821 	bl	8004594 <HAL_RCC_GetSysClockFreq>
 8004552:	4602      	mov	r2, r0
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	490a      	ldr	r1, [pc, #40]	@ (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	5ccb      	ldrb	r3, [r1, r3]
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	4a09      	ldr	r2, [pc, #36]	@ (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800456a:	4b09      	ldr	r3, [pc, #36]	@ (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f8b2 	bl	80026d8 <HAL_InitTick>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40023c00 	.word	0x40023c00
 8004584:	40023800 	.word	0x40023800
 8004588:	08008ba0 	.word	0x08008ba0
 800458c:	20000004 	.word	0x20000004
 8004590:	20000008 	.word	0x20000008

08004594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b094      	sub	sp, #80	@ 0x50
 800459a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ac:	4b79      	ldr	r3, [pc, #484]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 030c 	and.w	r3, r3, #12
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d00d      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x40>
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	f200 80e1 	bhi.w	8004780 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0x34>
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x3a>
 80045c6:	e0db      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4b73      	ldr	r3, [pc, #460]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045cc:	e0db      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ce:	4b73      	ldr	r3, [pc, #460]	@ (800479c <HAL_RCC_GetSysClockFreq+0x208>)
 80045d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045d2:	e0d8      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	2200      	movs	r2, #0
 80045f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045fe:	2300      	movs	r3, #0
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
 8004602:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004606:	4622      	mov	r2, r4
 8004608:	462b      	mov	r3, r5
 800460a:	f04f 0000 	mov.w	r0, #0
 800460e:	f04f 0100 	mov.w	r1, #0
 8004612:	0159      	lsls	r1, r3, #5
 8004614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004618:	0150      	lsls	r0, r2, #5
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4621      	mov	r1, r4
 8004620:	1a51      	subs	r1, r2, r1
 8004622:	6139      	str	r1, [r7, #16]
 8004624:	4629      	mov	r1, r5
 8004626:	eb63 0301 	sbc.w	r3, r3, r1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004638:	4659      	mov	r1, fp
 800463a:	018b      	lsls	r3, r1, #6
 800463c:	4651      	mov	r1, sl
 800463e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004642:	4651      	mov	r1, sl
 8004644:	018a      	lsls	r2, r1, #6
 8004646:	4651      	mov	r1, sl
 8004648:	ebb2 0801 	subs.w	r8, r2, r1
 800464c:	4659      	mov	r1, fp
 800464e:	eb63 0901 	sbc.w	r9, r3, r1
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004666:	4690      	mov	r8, r2
 8004668:	4699      	mov	r9, r3
 800466a:	4623      	mov	r3, r4
 800466c:	eb18 0303 	adds.w	r3, r8, r3
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	462b      	mov	r3, r5
 8004674:	eb49 0303 	adc.w	r3, r9, r3
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004686:	4629      	mov	r1, r5
 8004688:	024b      	lsls	r3, r1, #9
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004690:	4621      	mov	r1, r4
 8004692:	024a      	lsls	r2, r1, #9
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800469a:	2200      	movs	r2, #0
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046a4:	f7fc fa82 	bl	8000bac <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b0:	e058      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b2:	4b38      	ldr	r3, [pc, #224]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	2200      	movs	r2, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	4611      	mov	r1, r2
 80046be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046c2:	623b      	str	r3, [r7, #32]
 80046c4:	2300      	movs	r3, #0
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046cc:	4642      	mov	r2, r8
 80046ce:	464b      	mov	r3, r9
 80046d0:	f04f 0000 	mov.w	r0, #0
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	0159      	lsls	r1, r3, #5
 80046da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046de:	0150      	lsls	r0, r2, #5
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4641      	mov	r1, r8
 80046e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ea:	4649      	mov	r1, r9
 80046ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004700:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004704:	ebb2 040a 	subs.w	r4, r2, sl
 8004708:	eb63 050b 	sbc.w	r5, r3, fp
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	00eb      	lsls	r3, r5, #3
 8004716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471a:	00e2      	lsls	r2, r4, #3
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
 8004720:	4643      	mov	r3, r8
 8004722:	18e3      	adds	r3, r4, r3
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	464b      	mov	r3, r9
 8004728:	eb45 0303 	adc.w	r3, r5, r3
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800473a:	4629      	mov	r1, r5
 800473c:	028b      	lsls	r3, r1, #10
 800473e:	4621      	mov	r1, r4
 8004740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004744:	4621      	mov	r1, r4
 8004746:	028a      	lsls	r2, r1, #10
 8004748:	4610      	mov	r0, r2
 800474a:	4619      	mov	r1, r3
 800474c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800474e:	2200      	movs	r2, #0
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	61fa      	str	r2, [r7, #28]
 8004754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004758:	f7fc fa28 	bl	8000bac <__aeabi_uldivmod>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4613      	mov	r3, r2
 8004762:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004764:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x200>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	3301      	adds	r3, #1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004774:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800477e:	e002      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x204>)
 8004782:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004788:	4618      	mov	r0, r3
 800478a:	3750      	adds	r7, #80	@ 0x50
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	00f42400 	.word	0x00f42400
 800479c:	007a1200 	.word	0x007a1200

080047a0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e038      	b.n	8004828 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7fd fe98 	bl	8002500 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3308      	adds	r3, #8
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f001 fb52 	bl	8005e84 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	461a      	mov	r2, r3
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	f001 fbb4 	bl	8005f58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6858      	ldr	r0, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	f001 fbd9 	bl	8005fb4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6892      	ldr	r2, [r2, #8]
 800480a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	6892      	ldr	r2, [r2, #8]
 8004816:	f041 0101 	orr.w	r1, r1, #1
 800481a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e041      	b.n	80048c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fd fd10 	bl	800227c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 ff10 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d001      	beq.n	80048e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e046      	b.n	8004976 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a23      	ldr	r2, [pc, #140]	@ (8004984 <HAL_TIM_Base_Start+0xb4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004902:	d01d      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_TIM_Base_Start+0xb8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <HAL_TIM_Base_Start+0xbc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_TIM_Base_Start+0xc0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <HAL_TIM_Base_Start+0xc4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <HAL_TIM_Base_Start+0xc8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_Base_Start+0x70>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a18      	ldr	r2, [pc, #96]	@ (800499c <HAL_TIM_Base_Start+0xcc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d111      	bne.n	8004964 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d010      	beq.n	8004974 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004962:	e007      	b.n	8004974 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40010400 	.word	0x40010400
 8004998:	40014000 	.word	0x40014000
 800499c:	40001800 	.word	0x40001800

080049a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e041      	b.n	8004a36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f839 	bl	8004a3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fe58 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e022      	b.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d109      	bne.n	8004a9a <HAL_TIM_PWM_Start_DMA+0x46>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e015      	b.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x60>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e008      	b.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
 8004acc:	e171      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e022      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start_DMA+0xae>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e015      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e008      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d024      	beq.n	8004b7c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_TIM_PWM_Start_DMA+0xea>
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e137      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b50:	e016      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b60:	e00e      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	e006      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b7a:	e001      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e118      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	f200 80ae 	bhi.w	8004ce4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004ce5 	.word	0x08004ce5
 8004b98:	08004ce5 	.word	0x08004ce5
 8004b9c:	08004ce5 	.word	0x08004ce5
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004ce5 	.word	0x08004ce5
 8004ba8:	08004ce5 	.word	0x08004ce5
 8004bac:	08004ce5 	.word	0x08004ce5
 8004bb0:	08004c55 	.word	0x08004c55
 8004bb4:	08004ce5 	.word	0x08004ce5
 8004bb8:	08004ce5 	.word	0x08004ce5
 8004bbc:	08004ce5 	.word	0x08004ce5
 8004bc0:	08004c9d 	.word	0x08004c9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	4a7c      	ldr	r2, [pc, #496]	@ (8004dbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8004bca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	4a7b      	ldr	r2, [pc, #492]	@ (8004dc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	4a7a      	ldr	r2, [pc, #488]	@ (8004dc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004bda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3334      	adds	r3, #52	@ 0x34
 8004be8:	461a      	mov	r2, r3
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	f7fe fbb4 	bl	8003358 <HAL_DMA_Start_IT>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0db      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c08:	60da      	str	r2, [r3, #12]
      break;
 8004c0a:	e06e      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	4a6a      	ldr	r2, [pc, #424]	@ (8004dbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8004c12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	4a69      	ldr	r2, [pc, #420]	@ (8004dc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	4a68      	ldr	r2, [pc, #416]	@ (8004dc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3338      	adds	r3, #56	@ 0x38
 8004c30:	461a      	mov	r2, r3
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	f7fe fb90 	bl	8003358 <HAL_DMA_Start_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e0b7      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c50:	60da      	str	r2, [r3, #12]
      break;
 8004c52:	e04a      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a58      	ldr	r2, [pc, #352]	@ (8004dbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8004c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	4a57      	ldr	r2, [pc, #348]	@ (8004dc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a56      	ldr	r2, [pc, #344]	@ (8004dc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	333c      	adds	r3, #60	@ 0x3c
 8004c78:	461a      	mov	r2, r3
 8004c7a:	887b      	ldrh	r3, [r7, #2]
 8004c7c:	f7fe fb6c 	bl	8003358 <HAL_DMA_Start_IT>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e093      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c98:	60da      	str	r2, [r3, #12]
      break;
 8004c9a:	e026      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	4a46      	ldr	r2, [pc, #280]	@ (8004dbc <HAL_TIM_PWM_Start_DMA+0x368>)
 8004ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca8:	4a45      	ldr	r2, [pc, #276]	@ (8004dc0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	4a44      	ldr	r2, [pc, #272]	@ (8004dc4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004cb2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3340      	adds	r3, #64	@ 0x40
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	f7fe fb48 	bl	8003358 <HAL_DMA_Start_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06f      	b.n	8004db2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ce0:	60da      	str	r2, [r3, #12]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15f      	bne.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 ffbb 	bl	8005c74 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a31      	ldr	r2, [pc, #196]	@ (8004dc8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_PWM_Start_DMA+0x2be>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004dcc <HAL_TIM_PWM_Start_DMA+0x378>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a25      	ldr	r2, [pc, #148]	@ (8004dc8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d022      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d01d      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a22      	ldr	r2, [pc, #136]	@ (8004dd0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d018      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a21      	ldr	r2, [pc, #132]	@ (8004dd4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d013      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd8 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00e      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <HAL_TIM_PWM_Start_DMA+0x378>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d009      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ddc <HAL_TIM_PWM_Start_DMA+0x388>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_TIM_PWM_Start_DMA+0x328>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1a      	ldr	r2, [pc, #104]	@ (8004de0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d111      	bne.n	8004da0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b06      	cmp	r3, #6
 8004d8c:	d010      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0201 	orr.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	e007      	b.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	08005585 	.word	0x08005585
 8004dc0:	0800562d 	.word	0x0800562d
 8004dc4:	080054f3 	.word	0x080054f3
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40001800 	.word	0x40001800

08004de4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d855      	bhi.n	8004ea4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004df8:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e35 	.word	0x08004e35
 8004e04:	08004ea5 	.word	0x08004ea5
 8004e08:	08004ea5 	.word	0x08004ea5
 8004e0c:	08004ea5 	.word	0x08004ea5
 8004e10:	08004e51 	.word	0x08004e51
 8004e14:	08004ea5 	.word	0x08004ea5
 8004e18:	08004ea5 	.word	0x08004ea5
 8004e1c:	08004ea5 	.word	0x08004ea5
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004ea5 	.word	0x08004ea5
 8004e28:	08004ea5 	.word	0x08004ea5
 8004e2c:	08004ea5 	.word	0x08004ea5
 8004e30:	08004e89 	.word	0x08004e89
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fadd 	bl	8003408 <HAL_DMA_Abort_IT>
      break;
 8004e4e:	e02c      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe facf 	bl	8003408 <HAL_DMA_Abort_IT>
      break;
 8004e6a:	e01e      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe fac1 	bl	8003408 <HAL_DMA_Abort_IT>
      break;
 8004e86:	e010      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fe fab3 	bl	8003408 <HAL_DMA_Abort_IT>
      break;
 8004ea2:	e002      	b.n	8004eaa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d161      	bne.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fedb 	bl	8005c74 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8004f80 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8004f84 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d017      	beq.n	8004f0c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10f      	bne.n	8004f0c <HAL_TIM_PWM_Stop_DMA+0x128>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a1a      	ldr	r2, [r3, #32]
 8004ef2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_PWM_Stop_DMA+0x128>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10f      	bne.n	8004f3c <HAL_TIM_PWM_Stop_DMA+0x158>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_PWM_Stop_DMA+0x158>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d104      	bne.n	8004f4c <HAL_TIM_PWM_Stop_DMA+0x168>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f4a:	e013      	b.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d104      	bne.n	8004f5c <HAL_TIM_PWM_Stop_DMA+0x178>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f5a:	e00b      	b.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d104      	bne.n	8004f6c <HAL_TIM_PWM_Stop_DMA+0x188>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f6a:	e003      	b.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d020      	beq.n	8004fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01b      	beq.n	8004fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0202 	mvn.w	r2, #2
 8004fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa65 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa57 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fc fdb7 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d020      	beq.n	8005038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0204 	mvn.w	r2, #4
 8005008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa3f 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa31 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fc fd91 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d020      	beq.n	8005084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01b      	beq.n	8005084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0208 	mvn.w	r2, #8
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa19 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa0b 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fc fd6b 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01b      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9f3 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9e5 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fc fd45 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0201 	mvn.w	r2, #1
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9c3 	bl	800547a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 feac 	bl	8005e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9c7 	bl	80054ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0220 	mvn.w	r2, #32
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fe7e 	bl	8005e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e0ae      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	f200 809f 	bhi.w	80052d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005196:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080052d5 	.word	0x080052d5
 80051a4:	080052d5 	.word	0x080052d5
 80051a8:	080052d5 	.word	0x080052d5
 80051ac:	08005211 	.word	0x08005211
 80051b0:	080052d5 	.word	0x080052d5
 80051b4:	080052d5 	.word	0x080052d5
 80051b8:	080052d5 	.word	0x080052d5
 80051bc:	08005253 	.word	0x08005253
 80051c0:	080052d5 	.word	0x080052d5
 80051c4:	080052d5 	.word	0x080052d5
 80051c8:	080052d5 	.word	0x080052d5
 80051cc:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb02 	bl	80057e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6999      	ldr	r1, [r3, #24]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]
      break;
 800520e:	e064      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb52 	bl	80058c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800522a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6999      	ldr	r1, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]
      break;
 8005250:	e043      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fba7 	bl	80059ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0208 	orr.w	r2, r2, #8
 800526c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0204 	bic.w	r2, r2, #4
 800527c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69d9      	ldr	r1, [r3, #28]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
      break;
 8005290:	e023      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fbfb 	bl	8005a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	021a      	lsls	r2, r3, #8
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	61da      	str	r2, [r3, #28]
      break;
 80052d2:	e002      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
      break;
 80052d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIM_ConfigClockSource+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e0b4      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x186>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800532e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005340:	d03e      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005346:	f200 8087 	bhi.w	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534e:	f000 8086 	beq.w	800545e <HAL_TIM_ConfigClockSource+0x172>
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005356:	d87f      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b70      	cmp	r3, #112	@ 0x70
 800535a:	d01a      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xa6>
 800535c:	2b70      	cmp	r3, #112	@ 0x70
 800535e:	d87b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b60      	cmp	r3, #96	@ 0x60
 8005362:	d050      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x11a>
 8005364:	2b60      	cmp	r3, #96	@ 0x60
 8005366:	d877      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b50      	cmp	r3, #80	@ 0x50
 800536a:	d03c      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0xfa>
 800536c:	2b50      	cmp	r3, #80	@ 0x50
 800536e:	d873      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d058      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x13a>
 8005374:	2b40      	cmp	r3, #64	@ 0x40
 8005376:	d86f      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b30      	cmp	r3, #48	@ 0x30
 800537a:	d064      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b30      	cmp	r3, #48	@ 0x30
 800537e:	d86b      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d060      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d867      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d05c      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	2b10      	cmp	r3, #16
 800538e:	d05a      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	e062      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053a2:	f000 fc47 	bl	8005c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
      break;
 80053be:	e04f      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d0:	f000 fc30 	bl	8005c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053e2:	609a      	str	r2, [r3, #8]
      break;
 80053e4:	e03c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	461a      	mov	r2, r3
 80053f4:	f000 fba4 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2150      	movs	r1, #80	@ 0x50
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fbfd 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005404:	e02c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fbc3 	bl	8005b9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2160      	movs	r1, #96	@ 0x60
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fbed 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005424:	e01c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fb84 	bl	8005b40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2140      	movs	r1, #64	@ 0x40
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fbdd 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005444:	e00c      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f000 fbd4 	bl	8005bfe <TIM_ITRx_SetConfig>
      break;
 8005456:	e003      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      break;
 800545c:	e000      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800545e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d107      	bne.n	800551a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005518:	e02a      	b.n	8005570 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d107      	bne.n	8005534 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2202      	movs	r2, #2
 8005528:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005532:	e01d      	b.n	8005570 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	429a      	cmp	r2, r3
 800553c:	d107      	bne.n	800554e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2204      	movs	r2, #4
 8005542:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554c:	e010      	b.n	8005570 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2208      	movs	r2, #8
 800555c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005566:	e003      	b.n	8005570 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff ffb4 	bl	80054de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	429a      	cmp	r2, r3
 800559a:	d10b      	bne.n	80055b4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d136      	bne.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055b2:	e031      	b.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d10b      	bne.n	80055d6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d125      	bne.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055d4:	e020      	b.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d10b      	bne.n	80055f8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2204      	movs	r2, #4
 80055e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d114      	bne.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f6:	e00f      	b.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10a      	bne.n	8005618 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2208      	movs	r2, #8
 8005606:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7fc fa9b 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d103      	bne.n	800564c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	771a      	strb	r2, [r3, #28]
 800564a:	e019      	b.n	8005680 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d103      	bne.n	800565e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2202      	movs	r2, #2
 800565a:	771a      	strb	r2, [r3, #28]
 800565c:	e010      	b.n	8005680 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	429a      	cmp	r2, r3
 8005666:	d103      	bne.n	8005670 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2204      	movs	r2, #4
 800566c:	771a      	strb	r2, [r3, #28]
 800566e:	e007      	b.n	8005680 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	429a      	cmp	r2, r3
 8005678:	d102      	bne.n	8005680 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2208      	movs	r2, #8
 800567e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff ff18 	bl	80054b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a43      	ldr	r2, [pc, #268]	@ (80057b4 <TIM_Base_SetConfig+0x120>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b2:	d00f      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a40      	ldr	r2, [pc, #256]	@ (80057b8 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a3f      	ldr	r2, [pc, #252]	@ (80057bc <TIM_Base_SetConfig+0x128>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a3e      	ldr	r2, [pc, #248]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a3d      	ldr	r2, [pc, #244]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d108      	bne.n	80056e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a32      	ldr	r2, [pc, #200]	@ (80057b4 <TIM_Base_SetConfig+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d02b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f4:	d027      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2f      	ldr	r2, [pc, #188]	@ (80057b8 <TIM_Base_SetConfig+0x124>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d023      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2e      	ldr	r2, [pc, #184]	@ (80057bc <TIM_Base_SetConfig+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01f      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a2d      	ldr	r2, [pc, #180]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2c      	ldr	r2, [pc, #176]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d017      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2b      	ldr	r2, [pc, #172]	@ (80057c8 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2a      	ldr	r2, [pc, #168]	@ (80057cc <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a29      	ldr	r2, [pc, #164]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a28      	ldr	r2, [pc, #160]	@ (80057d4 <TIM_Base_SetConfig+0x140>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <TIM_Base_SetConfig+0x144>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <TIM_Base_SetConfig+0x148>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d108      	bne.n	8005758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a0e      	ldr	r2, [pc, #56]	@ (80057b4 <TIM_Base_SetConfig+0x120>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0xf2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a10      	ldr	r2, [pc, #64]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d103      	bne.n	800578e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]
}
 80057a6:	bf00      	nop
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40010400 	.word	0x40010400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40014400 	.word	0x40014400
 80057d0:	40014800 	.word	0x40014800
 80057d4:	40001800 	.word	0x40001800
 80057d8:	40001c00 	.word	0x40001c00
 80057dc:	40002000 	.word	0x40002000

080057e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f023 0201 	bic.w	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 0302 	bic.w	r3, r3, #2
 8005828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a20      	ldr	r2, [pc, #128]	@ (80058b8 <TIM_OC1_SetConfig+0xd8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC1_SetConfig+0x64>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1f      	ldr	r2, [pc, #124]	@ (80058bc <TIM_OC1_SetConfig+0xdc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d10c      	bne.n	800585e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f023 0308 	bic.w	r3, r3, #8
 800584a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f023 0304 	bic.w	r3, r3, #4
 800585c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a15      	ldr	r2, [pc, #84]	@ (80058b8 <TIM_OC1_SetConfig+0xd8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC1_SetConfig+0x8e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a14      	ldr	r2, [pc, #80]	@ (80058bc <TIM_OC1_SetConfig+0xdc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d111      	bne.n	8005892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800587c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	621a      	str	r2, [r3, #32]
}
 80058ac:	bf00      	nop
 80058ae:	371c      	adds	r7, #28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40010400 	.word	0x40010400

080058c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f023 0210 	bic.w	r2, r3, #16
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0320 	bic.w	r3, r3, #32
 800590a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <TIM_OC2_SetConfig+0xe4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC2_SetConfig+0x68>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a21      	ldr	r2, [pc, #132]	@ (80059a8 <TIM_OC2_SetConfig+0xe8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10d      	bne.n	8005944 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a17      	ldr	r2, [pc, #92]	@ (80059a4 <TIM_OC2_SetConfig+0xe4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC2_SetConfig+0x94>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <TIM_OC2_SetConfig+0xe8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d113      	bne.n	800597c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800595a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400

080059ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <TIM_OC3_SetConfig+0xe0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_OC3_SetConfig+0x66>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a20      	ldr	r2, [pc, #128]	@ (8005a90 <TIM_OC3_SetConfig+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10d      	bne.n	8005a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <TIM_OC3_SetConfig+0xe0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC3_SetConfig+0x92>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <TIM_OC3_SetConfig+0xe4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d113      	bne.n	8005a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40010400 	.word	0x40010400

08005a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	031b      	lsls	r3, r3, #12
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a12      	ldr	r2, [pc, #72]	@ (8005b38 <TIM_OC4_SetConfig+0xa4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_OC4_SetConfig+0x68>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <TIM_OC4_SetConfig+0xa8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d109      	bne.n	8005b10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	019b      	lsls	r3, r3, #6
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 030a 	bic.w	r3, r3, #10
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b087      	sub	sp, #28
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f023 0210 	bic.w	r2, r3, #16
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f043 0307 	orr.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2201      	movs	r2, #1
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1a      	ldr	r2, [r3, #32]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e05a      	b.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d24:	d01d      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10c      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40001800 	.word	0x40001800

08005db8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e03d      	b.n	8005e50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	f023 0101 	bic.w	r1, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d102      	bne.n	8005eb4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005eae:	2340      	movs	r3, #64	@ 0x40
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e001      	b.n	8005eb8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005ec4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005eca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005ed0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005ed6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005edc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005ee2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8005ee8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005eee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005ef4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005f12:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <FSMC_NORSRAM_Init+0xd0>)
 8005f14:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f1c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005f24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	43db      	mvns	r3, r3
 8005f34:	ea02 0103 	and.w	r1, r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4319      	orrs	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	0008fb7f 	.word	0x0008fb7f

08005f58 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005f6e:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005f76:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005f7e:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005f88:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	3b02      	subs	r3, #2
 8005f90:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005f92:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005f9e:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc8:	d11d      	bne.n	8006006 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fd2:	4b13      	ldr	r3, [pc, #76]	@ (8006020 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	6811      	ldr	r1, [r2, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	6852      	ldr	r2, [r2, #4]
 8005fde:	0112      	lsls	r2, r2, #4
 8005fe0:	4311      	orrs	r1, r2
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	6892      	ldr	r2, [r2, #8]
 8005fe6:	0212      	lsls	r2, r2, #8
 8005fe8:	4311      	orrs	r1, r2
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	6992      	ldr	r2, [r2, #24]
 8005fee:	4311      	orrs	r1, r2
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	68d2      	ldr	r2, [r2, #12]
 8005ff4:	0412      	lsls	r2, r2, #16
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	ea43 0102 	orr.w	r1, r3, r2
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006004:	e005      	b.n	8006012 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800600e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	cff00000 	.word	0xcff00000

08006024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 001c 	add.w	r0, r7, #28
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006036:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800603a:	2b01      	cmp	r3, #1
 800603c:	d123      	bne.n	8006086 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 faa0 	bl	80065c0 <USB_CoreReset>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	e01b      	b.n	80060be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa94 	bl	80065c0 <USB_CoreReset>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800609c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80060b0:	e005      	b.n	80060be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060be:	7fbb      	ldrb	r3, [r7, #30]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d10b      	bne.n	80060dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f043 0206 	orr.w	r2, r3, #6
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060e8:	b004      	add	sp, #16
 80060ea:	4770      	bx	lr

080060ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f023 0201 	bic.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d115      	bne.n	800615c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800613c:	200a      	movs	r0, #10
 800613e:	f7fc fb1b 	bl	8002778 <HAL_Delay>
      ms += 10U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	330a      	adds	r3, #10
 8006146:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fa2b 	bl	80065a4 <USB_GetMode>
 800614e:	4603      	mov	r3, r0
 8006150:	2b01      	cmp	r3, #1
 8006152:	d01e      	beq.n	8006192 <USB_SetCurrentMode+0x84>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2bc7      	cmp	r3, #199	@ 0xc7
 8006158:	d9f0      	bls.n	800613c <USB_SetCurrentMode+0x2e>
 800615a:	e01a      	b.n	8006192 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d115      	bne.n	800618e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800616e:	200a      	movs	r0, #10
 8006170:	f7fc fb02 	bl	8002778 <HAL_Delay>
      ms += 10U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	330a      	adds	r3, #10
 8006178:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa12 	bl	80065a4 <USB_GetMode>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <USB_SetCurrentMode+0x84>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2bc7      	cmp	r3, #199	@ 0xc7
 800618a:	d9f0      	bls.n	800616e <USB_SetCurrentMode+0x60>
 800618c:	e001      	b.n	8006192 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e005      	b.n	800619e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2bc8      	cmp	r3, #200	@ 0xc8
 8006196:	d101      	bne.n	800619c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061a8:	b084      	sub	sp, #16
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	e009      	b.n	80061dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3340      	adds	r3, #64	@ 0x40
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3301      	adds	r3, #1
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b0e      	cmp	r3, #14
 80061e0:	d9f2      	bls.n	80061c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d11c      	bne.n	8006224 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006202:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	639a      	str	r2, [r3, #56]	@ 0x38
 8006222:	e00b      	b.n	800623c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006228:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006242:	461a      	mov	r2, r3
 8006244:	2300      	movs	r3, #0
 8006246:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006248:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10d      	bne.n	800626c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f968 	bl	8006530 <USB_SetDevSpeed>
 8006260:	e008      	b.n	8006274 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006262:	2101      	movs	r1, #1
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f963 	bl	8006530 <USB_SetDevSpeed>
 800626a:	e003      	b.n	8006274 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800626c:	2103      	movs	r1, #3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f95e 	bl	8006530 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006274:	2110      	movs	r1, #16
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8fa 	bl	8006470 <USB_FlushTxFifo>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f924 	bl	80064d4 <USB_FlushRxFifo>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800629c:	461a      	mov	r2, r3
 800629e:	2300      	movs	r3, #0
 80062a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a8:	461a      	mov	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b4:	461a      	mov	r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e043      	b.n	8006348 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d6:	d118      	bne.n	800630a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ea:	461a      	mov	r2, r3
 80062ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e013      	b.n	800631c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	461a      	mov	r2, r3
 8006302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e008      	b.n	800631c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006316:	461a      	mov	r2, r3
 8006318:	2300      	movs	r3, #0
 800631a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633a:	461a      	mov	r2, r3
 800633c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3301      	adds	r3, #1
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800634c:	461a      	mov	r2, r3
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4293      	cmp	r3, r2
 8006352:	d3b5      	bcc.n	80062c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	e043      	b.n	80063e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006370:	d118      	bne.n	80063a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006384:	461a      	mov	r2, r3
 8006386:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e013      	b.n	80063b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639a:	461a      	mov	r2, r3
 800639c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e008      	b.n	80063b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b0:	461a      	mov	r2, r3
 80063b2:	2300      	movs	r3, #0
 80063b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	461a      	mov	r2, r3
 80063d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3301      	adds	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063e6:	461a      	mov	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d3b5      	bcc.n	800635a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006400:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800640e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f043 0210 	orr.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	4b10      	ldr	r3, [pc, #64]	@ (800646c <USB_DevInit+0x2c4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006430:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0208 	orr.w	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006444:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006448:	2b01      	cmp	r3, #1
 800644a:	d107      	bne.n	800645c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006468:	b004      	add	sp, #16
 800646a:	4770      	bx	lr
 800646c:	803c3800 	.word	0x803c3800

08006470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800648a:	d901      	bls.n	8006490 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e01b      	b.n	80064c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	daf2      	bge.n	800647e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	019b      	lsls	r3, r3, #6
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b4:	d901      	bls.n	80064ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e006      	b.n	80064c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d0f0      	beq.n	80064a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ec:	d901      	bls.n	80064f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e018      	b.n	8006524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	daf2      	bge.n	80064e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2210      	movs	r2, #16
 8006502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006510:	d901      	bls.n	8006516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e006      	b.n	8006524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b10      	cmp	r3, #16
 8006520:	d0f0      	beq.n	8006504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0301 	and.w	r3, r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065d8:	d901      	bls.n	80065de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e022      	b.n	8006624 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	daf2      	bge.n	80065cc <USB_CoreReset+0xc>

  count = 10U;
 80065e6:	230a      	movs	r3, #10
 80065e8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80065ea:	e002      	b.n	80065f2 <USB_CoreReset+0x32>
  {
    count--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f9      	bne.n	80065ec <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f043 0201 	orr.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006610:	d901      	bls.n	8006616 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e006      	b.n	8006624 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b01      	cmp	r3, #1
 8006620:	d0f0      	beq.n	8006604 <USB_CoreReset+0x44>

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8006636:	2300      	movs	r3, #0
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	2301      	movs	r3, #1
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	2200      	movs	r2, #0
 8006642:	2101      	movs	r1, #1
 8006644:	2000      	movs	r0, #0
 8006646:	f000 fcdd 	bl	8007004 <lcdBuildMemoryAccessControlConfig>
 800664a:	4603      	mov	r3, r0
 800664c:	461a      	mov	r2, r3
 800664e:	4bae      	ldr	r3, [pc, #696]	@ (8006908 <lcdInit+0x2d8>)
 8006650:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8006652:	2300      	movs	r3, #0
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2301      	movs	r3, #1
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	2201      	movs	r2, #1
 800665e:	2100      	movs	r1, #0
 8006660:	2000      	movs	r0, #0
 8006662:	f000 fccf 	bl	8007004 <lcdBuildMemoryAccessControlConfig>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	4ba8      	ldr	r3, [pc, #672]	@ (800690c <lcdInit+0x2dc>)
 800666c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800666e:	2300      	movs	r3, #0
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	2301      	movs	r3, #1
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	2001      	movs	r0, #1
 800667e:	f000 fcc1 	bl	8007004 <lcdBuildMemoryAccessControlConfig>
 8006682:	4603      	mov	r3, r0
 8006684:	461a      	mov	r2, r3
 8006686:	4ba2      	ldr	r3, [pc, #648]	@ (8006910 <lcdInit+0x2e0>)
 8006688:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800668a:	2300      	movs	r3, #0
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	2301      	movs	r3, #1
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2300      	movs	r3, #0
 8006694:	2201      	movs	r2, #1
 8006696:	2101      	movs	r1, #1
 8006698:	2001      	movs	r0, #1
 800669a:	f000 fcb3 	bl	8007004 <lcdBuildMemoryAccessControlConfig>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006914 <lcdInit+0x2e4>)
 80066a4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80066a6:	f000 fc83 	bl	8006fb0 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80066aa:	2028      	movs	r0, #40	@ 0x28
 80066ac:	f000 fc8a 	bl	8006fc4 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80066b0:	20cf      	movs	r0, #207	@ 0xcf
 80066b2:	f000 fc87 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x00);
 80066b6:	2000      	movs	r0, #0
 80066b8:	f000 fc94 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x83);
 80066bc:	2083      	movs	r0, #131	@ 0x83
 80066be:	f000 fc91 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x30);
 80066c2:	2030      	movs	r0, #48	@ 0x30
 80066c4:	f000 fc8e 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(0xED);
 80066c8:	20ed      	movs	r0, #237	@ 0xed
 80066ca:	f000 fc7b 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x64);
 80066ce:	2064      	movs	r0, #100	@ 0x64
 80066d0:	f000 fc88 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x03);
 80066d4:	2003      	movs	r0, #3
 80066d6:	f000 fc85 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x12);
 80066da:	2012      	movs	r0, #18
 80066dc:	f000 fc82 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x81);
 80066e0:	2081      	movs	r0, #129	@ 0x81
 80066e2:	f000 fc7f 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80066e6:	20e8      	movs	r0, #232	@ 0xe8
 80066e8:	f000 fc6c 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x85);
 80066ec:	2085      	movs	r0, #133	@ 0x85
 80066ee:	f000 fc79 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x01);
 80066f2:	2001      	movs	r0, #1
 80066f4:	f000 fc76 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x79);
 80066f8:	2079      	movs	r0, #121	@ 0x79
 80066fa:	f000 fc73 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(0xCB);
 80066fe:	20cb      	movs	r0, #203	@ 0xcb
 8006700:	f000 fc60 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x39);
 8006704:	2039      	movs	r0, #57	@ 0x39
 8006706:	f000 fc6d 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x2C);
 800670a:	202c      	movs	r0, #44	@ 0x2c
 800670c:	f000 fc6a 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 8006710:	2000      	movs	r0, #0
 8006712:	f000 fc67 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x34);
 8006716:	2034      	movs	r0, #52	@ 0x34
 8006718:	f000 fc64 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x02);
 800671c:	2002      	movs	r0, #2
 800671e:	f000 fc61 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(0xF7);
 8006722:	20f7      	movs	r0, #247	@ 0xf7
 8006724:	f000 fc4e 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x20);
 8006728:	2020      	movs	r0, #32
 800672a:	f000 fc5b 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(0xEA);
 800672e:	20ea      	movs	r0, #234	@ 0xea
 8006730:	f000 fc48 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x00);
 8006734:	2000      	movs	r0, #0
 8006736:	f000 fc55 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 800673a:	2000      	movs	r0, #0
 800673c:	f000 fc52 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8006740:	20c0      	movs	r0, #192	@ 0xc0
 8006742:	f000 fc3f 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x26);
 8006746:	2026      	movs	r0, #38	@ 0x26
 8006748:	f000 fc4c 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800674c:	20c1      	movs	r0, #193	@ 0xc1
 800674e:	f000 fc39 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x11);
 8006752:	2011      	movs	r0, #17
 8006754:	f000 fc46 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8006758:	20c5      	movs	r0, #197	@ 0xc5
 800675a:	f000 fc33 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x35);
 800675e:	2035      	movs	r0, #53	@ 0x35
 8006760:	f000 fc40 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x3E);
 8006764:	203e      	movs	r0, #62	@ 0x3e
 8006766:	f000 fc3d 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800676a:	20c7      	movs	r0, #199	@ 0xc7
 800676c:	f000 fc2a 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8006770:	20be      	movs	r0, #190	@ 0xbe
 8006772:	f000 fc37 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8006776:	2036      	movs	r0, #54	@ 0x36
 8006778:	f000 fc24 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 800677c:	4b62      	ldr	r3, [pc, #392]	@ (8006908 <lcdInit+0x2d8>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fc2f 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8006786:	203a      	movs	r0, #58	@ 0x3a
 8006788:	f000 fc1c 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x55);
 800678c:	2055      	movs	r0, #85	@ 0x55
 800678e:	f000 fc29 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8006792:	20b1      	movs	r0, #177	@ 0xb1
 8006794:	f000 fc16 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x00);
 8006798:	2000      	movs	r0, #0
 800679a:	f000 fc23 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x1B);
 800679e:	201b      	movs	r0, #27
 80067a0:	f000 fc20 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80067a4:	20f2      	movs	r0, #242	@ 0xf2
 80067a6:	f000 fc0d 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x08);
 80067aa:	2008      	movs	r0, #8
 80067ac:	f000 fc1a 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80067b0:	2026      	movs	r0, #38	@ 0x26
 80067b2:	f000 fc07 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x01);
 80067b6:	2001      	movs	r0, #1
 80067b8:	f000 fc14 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80067bc:	20e0      	movs	r0, #224	@ 0xe0
 80067be:	f000 fc01 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80067c2:	201f      	movs	r0, #31
 80067c4:	f000 fc0e 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x1A);
 80067c8:	201a      	movs	r0, #26
 80067ca:	f000 fc0b 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x18);
 80067ce:	2018      	movs	r0, #24
 80067d0:	f000 fc08 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x0A);
 80067d4:	200a      	movs	r0, #10
 80067d6:	f000 fc05 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x0F);
 80067da:	200f      	movs	r0, #15
 80067dc:	f000 fc02 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x06);
 80067e0:	2006      	movs	r0, #6
 80067e2:	f000 fbff 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x45);
 80067e6:	2045      	movs	r0, #69	@ 0x45
 80067e8:	f000 fbfc 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x87);
 80067ec:	2087      	movs	r0, #135	@ 0x87
 80067ee:	f000 fbf9 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x32);
 80067f2:	2032      	movs	r0, #50	@ 0x32
 80067f4:	f000 fbf6 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x0A);
 80067f8:	200a      	movs	r0, #10
 80067fa:	f000 fbf3 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x07);
 80067fe:	2007      	movs	r0, #7
 8006800:	f000 fbf0 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x02);
 8006804:	2002      	movs	r0, #2
 8006806:	f000 fbed 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x07);
 800680a:	2007      	movs	r0, #7
 800680c:	f000 fbea 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x05);
 8006810:	2005      	movs	r0, #5
 8006812:	f000 fbe7 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 8006816:	2000      	movs	r0, #0
 8006818:	f000 fbe4 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 800681c:	20e1      	movs	r0, #225	@ 0xe1
 800681e:	f000 fbd1 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x00);
 8006822:	2000      	movs	r0, #0
 8006824:	f000 fbde 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x25);
 8006828:	2025      	movs	r0, #37	@ 0x25
 800682a:	f000 fbdb 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x27);
 800682e:	2027      	movs	r0, #39	@ 0x27
 8006830:	f000 fbd8 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x05);
 8006834:	2005      	movs	r0, #5
 8006836:	f000 fbd5 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x10);
 800683a:	2010      	movs	r0, #16
 800683c:	f000 fbd2 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x09);
 8006840:	2009      	movs	r0, #9
 8006842:	f000 fbcf 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x3A);
 8006846:	203a      	movs	r0, #58	@ 0x3a
 8006848:	f000 fbcc 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x78);
 800684c:	2078      	movs	r0, #120	@ 0x78
 800684e:	f000 fbc9 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x4D);
 8006852:	204d      	movs	r0, #77	@ 0x4d
 8006854:	f000 fbc6 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x05);
 8006858:	2005      	movs	r0, #5
 800685a:	f000 fbc3 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x18);
 800685e:	2018      	movs	r0, #24
 8006860:	f000 fbc0 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x0D);
 8006864:	200d      	movs	r0, #13
 8006866:	f000 fbbd 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x38);
 800686a:	2038      	movs	r0, #56	@ 0x38
 800686c:	f000 fbba 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x3A);
 8006870:	203a      	movs	r0, #58	@ 0x3a
 8006872:	f000 fbb7 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x1F);
 8006876:	201f      	movs	r0, #31
 8006878:	f000 fbb4 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 800687c:	202a      	movs	r0, #42	@ 0x2a
 800687e:	f000 fba1 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x00);
 8006882:	2000      	movs	r0, #0
 8006884:	f000 fbae 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 8006888:	2000      	movs	r0, #0
 800688a:	f000 fbab 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 800688e:	2000      	movs	r0, #0
 8006890:	f000 fba8 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0xEF);
 8006894:	20ef      	movs	r0, #239	@ 0xef
 8006896:	f000 fba5 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 800689a:	202b      	movs	r0, #43	@ 0x2b
 800689c:	f000 fb92 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x00);
 80068a0:	2000      	movs	r0, #0
 80068a2:	f000 fb9f 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 80068a6:	2000      	movs	r0, #0
 80068a8:	f000 fb9c 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x01);
 80068ac:	2001      	movs	r0, #1
 80068ae:	f000 fb99 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x3F);
 80068b2:	203f      	movs	r0, #63	@ 0x3f
 80068b4:	f000 fb96 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80068b8:	20b7      	movs	r0, #183	@ 0xb7
 80068ba:	f000 fb83 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x07);
 80068be:	2007      	movs	r0, #7
 80068c0:	f000 fb90 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80068c4:	20b6      	movs	r0, #182	@ 0xb6
 80068c6:	f000 fb7d 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80068ca:	200a      	movs	r0, #10
 80068cc:	f000 fb8a 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x82);
 80068d0:	2082      	movs	r0, #130	@ 0x82
 80068d2:	f000 fb87 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x27);
 80068d6:	2027      	movs	r0, #39	@ 0x27
 80068d8:	f000 fb84 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(0x00);
 80068dc:	2000      	movs	r0, #0
 80068de:	f000 fb81 	bl	8006fe4 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80068e2:	2011      	movs	r0, #17
 80068e4:	f000 fb6e 	bl	8006fc4 <lcdWriteCommand>
  HAL_Delay(100);
 80068e8:	2064      	movs	r0, #100	@ 0x64
 80068ea:	f7fb ff45 	bl	8002778 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80068ee:	2029      	movs	r0, #41	@ 0x29
 80068f0:	f000 fb68 	bl	8006fc4 <lcdWriteCommand>
  HAL_Delay(100);
 80068f4:	2064      	movs	r0, #100	@ 0x64
 80068f6:	f7fb ff3f 	bl	8002778 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80068fa:	202c      	movs	r0, #44	@ 0x2c
 80068fc:	f000 fb62 	bl	8006fc4 <lcdWriteCommand>
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200016f8 	.word	0x200016f8
 800690c:	200016f9 	.word	0x200016f9
 8006910:	200016fa 	.word	0x200016fa
 8006914:	200016fb 	.word	0x200016fb

08006918 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8006922:	4b11      	ldr	r3, [pc, #68]	@ (8006968 <lcdFillRGB+0x50>)
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	4b0f      	ldr	r3, [pc, #60]	@ (8006968 <lcdFillRGB+0x50>)
 800692c:	885b      	ldrh	r3, [r3, #2]
 800692e:	3b01      	subs	r3, #1
 8006930:	b29b      	uxth	r3, r3
 8006932:	2100      	movs	r1, #0
 8006934:	2000      	movs	r0, #0
 8006936:	f000 faef 	bl	8006f18 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 800693a:	4b0b      	ldr	r3, [pc, #44]	@ (8006968 <lcdFillRGB+0x50>)
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	4b09      	ldr	r3, [pc, #36]	@ (8006968 <lcdFillRGB+0x50>)
 8006942:	885b      	ldrh	r3, [r3, #2]
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 800694a:	e003      	b.n	8006954 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb48 	bl	8006fe4 <lcdWriteData>
  while(dimensions--)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	60fa      	str	r2, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f6      	bne.n	800694c <lcdFillRGB+0x34>
  }
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20000030 	.word	0x20000030

0800696c <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	80fb      	strh	r3, [r7, #6]
 8006976:	460b      	mov	r3, r1
 8006978:	80bb      	strh	r3, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800697e:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <lcdDrawPixel+0x44>)
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	429a      	cmp	r2, r3
 8006986:	d20f      	bcs.n	80069a8 <lcdDrawPixel+0x3c>
 8006988:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <lcdDrawPixel+0x44>)
 800698a:	885b      	ldrh	r3, [r3, #2]
 800698c:	88ba      	ldrh	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d20a      	bcs.n	80069a8 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8006992:	88bb      	ldrh	r3, [r7, #4]
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	88b9      	ldrh	r1, [r7, #4]
 8006998:	88f8      	ldrh	r0, [r7, #6]
 800699a:	f000 fabd 	bl	8006f18 <lcdSetWindow>
    lcdWriteData(color);
 800699e:	887b      	ldrh	r3, [r7, #2]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fb1f 	bl	8006fe4 <lcdWriteData>
 80069a6:	e000      	b.n	80069aa <lcdDrawPixel+0x3e>
        return;
 80069a8:	bf00      	nop
}
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000030 	.word	0x20000030

080069b4 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	4611      	mov	r1, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	80fb      	strh	r3, [r7, #6]
 80069c6:	4603      	mov	r3, r0
 80069c8:	80bb      	strh	r3, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	807b      	strh	r3, [r7, #2]
 80069ce:	4613      	mov	r3, r2
 80069d0:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 80069d2:	88ba      	ldrh	r2, [r7, #4]
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d205      	bcs.n	80069e6 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	817b      	strh	r3, [r7, #10]
 80069de:	88bb      	ldrh	r3, [r7, #4]
 80069e0:	80fb      	strh	r3, [r7, #6]
 80069e2:	897b      	ldrh	r3, [r7, #10]
 80069e4:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 80069e6:	4b15      	ldr	r3, [pc, #84]	@ (8006a3c <lcdDrawHLine+0x88>)
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	88ba      	ldrh	r2, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d303      	bcc.n	80069f8 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 80069f0:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <lcdDrawHLine+0x88>)
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 80069f8:	4b10      	ldr	r3, [pc, #64]	@ (8006a3c <lcdDrawHLine+0x88>)
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	88fa      	ldrh	r2, [r7, #6]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d303      	bcc.n	8006a0a <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8006a02:	4b0e      	ldr	r3, [pc, #56]	@ (8006a3c <lcdDrawHLine+0x88>)
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8006a0a:	887b      	ldrh	r3, [r7, #2]
 8006a0c:	88ba      	ldrh	r2, [r7, #4]
 8006a0e:	8879      	ldrh	r1, [r7, #2]
 8006a10:	88f8      	ldrh	r0, [r7, #6]
 8006a12:	f000 fa81 	bl	8006f18 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	e006      	b.n	8006a2a <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8006a1c:	883b      	ldrh	r3, [r7, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fae0 	bl	8006fe4 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	88bb      	ldrh	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	ddf4      	ble.n	8006a1c <lcdDrawHLine+0x68>
	}
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd90      	pop	{r4, r7, pc}
 8006a3c:	20000030 	.word	0x20000030

08006a40 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4623      	mov	r3, r4
 8006a50:	80fb      	strh	r3, [r7, #6]
 8006a52:	4603      	mov	r3, r0
 8006a54:	80bb      	strh	r3, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	807b      	strh	r3, [r7, #2]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8006a5e:	887a      	ldrh	r2, [r7, #2]
 8006a60:	88bb      	ldrh	r3, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d205      	bcs.n	8006a72 <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8006a66:	88bb      	ldrh	r3, [r7, #4]
 8006a68:	817b      	strh	r3, [r7, #10]
 8006a6a:	887b      	ldrh	r3, [r7, #2]
 8006a6c:	80bb      	strh	r3, [r7, #4]
 8006a6e:	897b      	ldrh	r3, [r7, #10]
 8006a70:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8006a72:	4b1a      	ldr	r3, [pc, #104]	@ (8006adc <lcdDrawVLine+0x9c>)
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	88fa      	ldrh	r2, [r7, #6]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d303      	bcc.n	8006a84 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8006a7c:	4b17      	ldr	r3, [pc, #92]	@ (8006adc <lcdDrawVLine+0x9c>)
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8006a84:	4b15      	ldr	r3, [pc, #84]	@ (8006adc <lcdDrawVLine+0x9c>)
 8006a86:	885b      	ldrh	r3, [r3, #2]
 8006a88:	88ba      	ldrh	r2, [r7, #4]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d303      	bcc.n	8006a96 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8006a8e:	4b13      	ldr	r3, [pc, #76]	@ (8006adc <lcdDrawVLine+0x9c>)
 8006a90:	885b      	ldrh	r3, [r3, #2]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8006a96:	4b11      	ldr	r3, [pc, #68]	@ (8006adc <lcdDrawVLine+0x9c>)
 8006a98:	885b      	ldrh	r3, [r3, #2]
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d303      	bcc.n	8006aa8 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8006adc <lcdDrawVLine+0x9c>)
 8006aa2:	885b      	ldrh	r3, [r3, #2]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8006aa8:	887b      	ldrh	r3, [r7, #2]
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	88b9      	ldrh	r1, [r7, #4]
 8006aae:	88f8      	ldrh	r0, [r7, #6]
 8006ab0:	f000 fa32 	bl	8006f18 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8006ab4:	88bb      	ldrh	r3, [r7, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e006      	b.n	8006ac8 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8006aba:	883b      	ldrh	r3, [r7, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fa91 	bl	8006fe4 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	887b      	ldrh	r3, [r7, #2]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	ddf4      	ble.n	8006aba <lcdDrawVLine+0x7a>
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd90      	pop	{r4, r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000030 	.word	0x20000030

08006ae0 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	4611      	mov	r1, r2
 8006aec:	461a      	mov	r2, r3
 8006aee:	4623      	mov	r3, r4
 8006af0:	80fb      	strh	r3, [r7, #6]
 8006af2:	4603      	mov	r3, r0
 8006af4:	80bb      	strh	r3, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	807b      	strh	r3, [r7, #2]
 8006afa:	4613      	mov	r3, r2
 8006afc:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8006afe:	88f8      	ldrh	r0, [r7, #6]
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	4413      	add	r3, r2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b299      	uxth	r1, r3
 8006b0c:	88ba      	ldrh	r2, [r7, #4]
 8006b0e:	8b3b      	ldrh	r3, [r7, #24]
 8006b10:	f7ff ff50 	bl	80069b4 <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8006b14:	88f8      	ldrh	r0, [r7, #6]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	887b      	ldrh	r3, [r7, #2]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b299      	uxth	r1, r3
 8006b22:	88ba      	ldrh	r2, [r7, #4]
 8006b24:	883b      	ldrh	r3, [r7, #0]
 8006b26:	4413      	add	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	8b3b      	ldrh	r3, [r7, #24]
 8006b30:	f7ff ff40 	bl	80069b4 <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8006b34:	88f8      	ldrh	r0, [r7, #6]
 8006b36:	88b9      	ldrh	r1, [r7, #4]
 8006b38:	88ba      	ldrh	r2, [r7, #4]
 8006b3a:	883b      	ldrh	r3, [r7, #0]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	8b3b      	ldrh	r3, [r7, #24]
 8006b46:	f7ff ff7b 	bl	8006a40 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	887b      	ldrh	r3, [r7, #2]
 8006b4e:	4413      	add	r3, r2
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b298      	uxth	r0, r3
 8006b56:	88b9      	ldrh	r1, [r7, #4]
 8006b58:	88ba      	ldrh	r2, [r7, #4]
 8006b5a:	883b      	ldrh	r3, [r7, #0]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	8b3b      	ldrh	r3, [r7, #24]
 8006b66:	f7ff ff6b 	bl	8006a40 <lcdDrawVLine>
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd90      	pop	{r4, r7, pc}
	...

08006b74 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8006b74:	b590      	push	{r4, r7, lr}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	4623      	mov	r3, r4
 8006b84:	80fb      	strh	r3, [r7, #6]
 8006b86:	4603      	mov	r3, r0
 8006b88:	80bb      	strh	r3, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	807b      	strh	r3, [r7, #2]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8006b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b96:	4a24      	ldr	r2, [pc, #144]	@ (8006c28 <lcdFillRect+0xb4>)
 8006b98:	8812      	ldrh	r2, [r2, #0]
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	da3f      	bge.n	8006c1e <lcdFillRect+0xaa>
 8006b9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <lcdFillRect+0xb4>)
 8006ba4:	8852      	ldrh	r2, [r2, #2]
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	da39      	bge.n	8006c1e <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8006baa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006bae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c28 <lcdFillRect+0xb4>)
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	dd05      	ble.n	8006bc8 <lcdFillRect+0x54>
 8006bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c28 <lcdFillRect+0xb4>)
 8006bbe:	881a      	ldrh	r2, [r3, #0]
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8006bc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006bcc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	4a15      	ldr	r2, [pc, #84]	@ (8006c28 <lcdFillRect+0xb4>)
 8006bd4:	8852      	ldrh	r2, [r2, #2]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	dd05      	ble.n	8006be6 <lcdFillRect+0x72>
 8006bda:	4b13      	ldr	r3, [pc, #76]	@ (8006c28 <lcdFillRect+0xb4>)
 8006bdc:	885a      	ldrh	r2, [r3, #2]
 8006bde:	88bb      	ldrh	r3, [r7, #4]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8006be6:	88bb      	ldrh	r3, [r7, #4]
 8006be8:	81fb      	strh	r3, [r7, #14]
 8006bea:	e00e      	b.n	8006c0a <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8006bec:	88f8      	ldrh	r0, [r7, #6]
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	b299      	uxth	r1, r3
 8006bf6:	89fa      	ldrh	r2, [r7, #14]
 8006bf8:	8c3b      	ldrh	r3, [r7, #32]
 8006bfa:	f7ff fedb 	bl	80069b4 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8006bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3301      	adds	r3, #1
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	81fb      	strh	r3, [r7, #14]
 8006c0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006c0e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006c12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c16:	440b      	add	r3, r1
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	dde7      	ble.n	8006bec <lcdFillRect+0x78>
 8006c1c:	e000      	b.n	8006c20 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8006c1e:	bf00      	nop
	}
}
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000030 	.word	0x20000030

08006c2c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	4611      	mov	r1, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	80fb      	strh	r3, [r7, #6]
 8006c3e:	4603      	mov	r3, r0
 8006c40:	80bb      	strh	r3, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
 8006c46:	4613      	mov	r3, r2
 8006c48:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8006c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d78 <lcdDrawChar+0x14c>)
 8006c50:	8812      	ldrh	r2, [r2, #0]
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f280 808c 	bge.w	8006d70 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8006c58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c5c:	4a46      	ldr	r2, [pc, #280]	@ (8006d78 <lcdDrawChar+0x14c>)
 8006c5e:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8006c60:	4293      	cmp	r3, r2
 8006c62:	f280 8085 	bge.w	8006d70 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8006c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c6a:	4a44      	ldr	r2, [pc, #272]	@ (8006d7c <lcdDrawChar+0x150>)
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	8892      	ldrh	r2, [r2, #4]
 8006c70:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	db7c      	blt.n	8006d70 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8006c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c7a:	4a40      	ldr	r2, [pc, #256]	@ (8006d7c <lcdDrawChar+0x150>)
 8006c7c:	6892      	ldr	r2, [r2, #8]
 8006c7e:	88d2      	ldrh	r2, [r2, #6]
 8006c80:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	db74      	blt.n	8006d70 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8006c86:	4b3d      	ldr	r3, [pc, #244]	@ (8006d7c <lcdDrawChar+0x150>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	88db      	ldrh	r3, [r3, #6]
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8006c96:	2300      	movs	r3, #0
 8006c98:	73bb      	strb	r3, [r7, #14]
 8006c9a:	e061      	b.n	8006d60 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	733b      	strb	r3, [r7, #12]
 8006ca0:	e055      	b.n	8006d4e <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8006ca2:	4b36      	ldr	r3, [pc, #216]	@ (8006d7c <lcdDrawChar+0x150>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	3a20      	subs	r2, #32
 8006cac:	4933      	ldr	r1, [pc, #204]	@ (8006d7c <lcdDrawChar+0x150>)
 8006cae:	6889      	ldr	r1, [r1, #8]
 8006cb0:	88c9      	ldrh	r1, [r1, #6]
 8006cb2:	fb01 f202 	mul.w	r2, r1, r2
 8006cb6:	7ab9      	ldrb	r1, [r7, #10]
 8006cb8:	fb02 f101 	mul.w	r1, r2, r1
 8006cbc:	7bba      	ldrb	r2, [r7, #14]
 8006cbe:	7ab8      	ldrb	r0, [r7, #10]
 8006cc0:	fb00 f202 	mul.w	r2, r0, r2
 8006cc4:	4411      	add	r1, r2
 8006cc6:	7b3a      	ldrb	r2, [r7, #12]
 8006cc8:	440a      	add	r2, r1
 8006cca:	4413      	add	r3, r2
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	72fb      	strb	r3, [r7, #11]
 8006cd4:	e032      	b.n	8006d3c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8006cd6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da12      	bge.n	8006d04 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4413      	add	r3, r2
 8006cee:	b298      	uxth	r0, r3
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	88bb      	ldrh	r3, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	883a      	ldrh	r2, [r7, #0]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	f7ff fe35 	bl	800696c <lcdDrawPixel>
 8006d02:	e015      	b.n	8006d30 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8006d04:	8c3a      	ldrh	r2, [r7, #32]
 8006d06:	883b      	ldrh	r3, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d011      	beq.n	8006d30 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	4413      	add	r3, r2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	b298      	uxth	r0, r3
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8c3a      	ldrh	r2, [r7, #32]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f7ff fe1e 	bl	800696c <lcdDrawPixel>
				}
				line <<= 1;
 8006d30:	7b7b      	ldrb	r3, [r7, #13]
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8006d36:	7afb      	ldrb	r3, [r7, #11]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	72fb      	strb	r3, [r7, #11]
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	2b07      	cmp	r3, #7
 8006d40:	d9c9      	bls.n	8006cd6 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	3308      	adds	r3, #8
 8006d46:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8006d48:	7b3b      	ldrb	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	733b      	strb	r3, [r7, #12]
 8006d4e:	7b3a      	ldrb	r2, [r7, #12]
 8006d50:	7abb      	ldrb	r3, [r7, #10]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d3a5      	bcc.n	8006ca2 <lcdDrawChar+0x76>
		}

		xP = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	73bb      	strb	r3, [r7, #14]
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <lcdDrawChar+0x150>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	88db      	ldrh	r3, [r3, #6]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d396      	bcc.n	8006c9c <lcdDrawChar+0x70>
 8006d6e:	e000      	b.n	8006d72 <lcdDrawChar+0x146>
		return;
 8006d70:	bf00      	nop
	}
}
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd90      	pop	{r4, r7, pc}
 8006d78:	20000030 	.word	0x20000030
 8006d7c:	20000038 	.word	0x20000038

08006d80 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8006d80:	b40f      	push	{r0, r1, r2, r3}
 8006d82:	b590      	push	{r4, r7, lr}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8006d88:	f107 031c 	add.w	r3, r7, #28
 8006d8c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	483d      	ldr	r0, [pc, #244]	@ (8006e88 <lcdPrintf+0x108>)
 8006d94:	f000 f98e 	bl	80070b4 <vsiprintf>
	va_end(lst);

	p = buf;
 8006d98:	4b3b      	ldr	r3, [pc, #236]	@ (8006e88 <lcdPrintf+0x108>)
 8006d9a:	607b      	str	r3, [r7, #4]
	while (*p)
 8006d9c:	e067      	b.n	8006e6e <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b0a      	cmp	r3, #10
 8006da4:	d10c      	bne.n	8006dc0 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8006da6:	4b39      	ldr	r3, [pc, #228]	@ (8006e8c <lcdPrintf+0x10c>)
 8006da8:	885a      	ldrh	r2, [r3, #2]
 8006daa:	4b39      	ldr	r3, [pc, #228]	@ (8006e90 <lcdPrintf+0x110>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	88db      	ldrh	r3, [r3, #6]
 8006db0:	4413      	add	r3, r2
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	4b35      	ldr	r3, [pc, #212]	@ (8006e8c <lcdPrintf+0x10c>)
 8006db6:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8006db8:	4b34      	ldr	r3, [pc, #208]	@ (8006e8c <lcdPrintf+0x10c>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e04a      	b.n	8006e56 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b0d      	cmp	r3, #13
 8006dc6:	d046      	beq.n	8006e56 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b09      	cmp	r3, #9
 8006dce:	d10b      	bne.n	8006de8 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8006dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8006e8c <lcdPrintf+0x10c>)
 8006dd2:	881a      	ldrh	r2, [r3, #0]
 8006dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8006e90 <lcdPrintf+0x110>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	889b      	ldrh	r3, [r3, #4]
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	4413      	add	r3, r2
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	4b2a      	ldr	r3, [pc, #168]	@ (8006e8c <lcdPrintf+0x10c>)
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e036      	b.n	8006e56 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8006de8:	4b28      	ldr	r3, [pc, #160]	@ (8006e8c <lcdPrintf+0x10c>)
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b218      	sxth	r0, r3
 8006dee:	4b27      	ldr	r3, [pc, #156]	@ (8006e8c <lcdPrintf+0x10c>)
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	b219      	sxth	r1, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	781a      	ldrb	r2, [r3, #0]
 8006df8:	4b25      	ldr	r3, [pc, #148]	@ (8006e90 <lcdPrintf+0x110>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b29c      	uxth	r4, r3
 8006dfe:	4b24      	ldr	r3, [pc, #144]	@ (8006e90 <lcdPrintf+0x110>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	4623      	mov	r3, r4
 8006e08:	f7ff ff10 	bl	8006c2c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8006e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	4b1f      	ldr	r3, [pc, #124]	@ (8006e90 <lcdPrintf+0x110>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	889b      	ldrh	r3, [r3, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e1c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8006e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e90 <lcdPrintf+0x110>)
 8006e20:	7b1b      	ldrb	r3, [r3, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <lcdPrintf+0xd6>
 8006e26:	4b19      	ldr	r3, [pc, #100]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	4b19      	ldr	r3, [pc, #100]	@ (8006e94 <lcdPrintf+0x114>)
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	4619      	mov	r1, r3
 8006e32:	4b17      	ldr	r3, [pc, #92]	@ (8006e90 <lcdPrintf+0x110>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	889b      	ldrh	r3, [r3, #4]
 8006e38:	1acb      	subs	r3, r1, r3
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	dd0b      	ble.n	8006e56 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8006e3e:	4b13      	ldr	r3, [pc, #76]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e40:	885a      	ldrh	r2, [r3, #2]
 8006e42:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <lcdPrintf+0x110>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	88db      	ldrh	r3, [r3, #6]
 8006e48:	4413      	add	r3, r2
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e4e:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8006e50:	4b0e      	ldr	r3, [pc, #56]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e5e:	885a      	ldrh	r2, [r3, #2]
 8006e60:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <lcdPrintf+0x114>)
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8006e68:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <lcdPrintf+0x10c>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	805a      	strh	r2, [r3, #2]
	while (*p)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d193      	bne.n	8006d9e <lcdPrintf+0x1e>
		}
	}
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006e82:	b004      	add	sp, #16
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	200016fc 	.word	0x200016fc
 8006e8c:	200016f4 	.word	0x200016f4
 8006e90:	20000038 	.word	0x20000038
 8006e94:	20000030 	.word	0x20000030

08006e98 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8006ea0:	4a04      	ldr	r2, [pc, #16]	@ (8006eb4 <lcdSetTextFont+0x1c>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6093      	str	r3, [r2, #8]
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000038 	.word	0x20000038

08006eb8 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	460a      	mov	r2, r1
 8006ec2:	80fb      	strh	r3, [r7, #6]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8006ec8:	88fb      	ldrh	r3, [r7, #6]
 8006eca:	4a05      	ldr	r2, [pc, #20]	@ (8006ee0 <lcdSetTextColor+0x28>)
 8006ecc:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8006ece:	88bb      	ldrh	r3, [r7, #4]
 8006ed0:	4a03      	ldr	r2, [pc, #12]	@ (8006ee0 <lcdSetTextColor+0x28>)
 8006ed2:	6053      	str	r3, [r2, #4]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20000038 	.word	0x20000038

08006ee4 <lcdSetCursor>:
	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
}

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	460a      	mov	r2, r1
 8006eee:	80fb      	strh	r3, [r7, #6]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8006ef4:	4a07      	ldr	r2, [pc, #28]	@ (8006f14 <lcdSetCursor+0x30>)
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8006efa:	4a06      	ldr	r2, [pc, #24]	@ (8006f14 <lcdSetCursor+0x30>)
 8006efc:	88bb      	ldrh	r3, [r7, #4]
 8006efe:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8006f00:	88bb      	ldrh	r3, [r7, #4]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	88b9      	ldrh	r1, [r7, #4]
 8006f06:	88f8      	ldrh	r0, [r7, #6]
 8006f08:	f000 f806 	bl	8006f18 <lcdSetWindow>
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	200016f4 	.word	0x200016f4

08006f18 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4604      	mov	r4, r0
 8006f20:	4608      	mov	r0, r1
 8006f22:	4611      	mov	r1, r2
 8006f24:	461a      	mov	r2, r3
 8006f26:	4623      	mov	r3, r4
 8006f28:	80fb      	strh	r3, [r7, #6]
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	80bb      	strh	r3, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	807b      	strh	r3, [r7, #2]
 8006f32:	4613      	mov	r3, r2
 8006f34:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8006f36:	202a      	movs	r0, #42	@ 0x2a
 8006f38:	f000 f844 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 f84e 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f848 	bl	8006fe4 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8006f54:	887b      	ldrh	r3, [r7, #2]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f842 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8006f60:	887b      	ldrh	r3, [r7, #2]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f83c 	bl	8006fe4 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8006f6c:	202b      	movs	r0, #43	@ 0x2b
 8006f6e:	f000 f829 	bl	8006fc4 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8006f72:	88bb      	ldrh	r3, [r7, #4]
 8006f74:	0a1b      	lsrs	r3, r3, #8
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f833 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8006f7e:	88bb      	ldrh	r3, [r7, #4]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 f82d 	bl	8006fe4 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8006f8a:	883b      	ldrh	r3, [r7, #0]
 8006f8c:	0a1b      	lsrs	r3, r3, #8
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 f827 	bl	8006fe4 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8006f96:	883b      	ldrh	r3, [r7, #0]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f821 	bl	8006fe4 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8006fa2:	202c      	movs	r0, #44	@ 0x2c
 8006fa4:	f000 f80e 	bl	8006fc4 <lcdWriteCommand>
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd90      	pop	{r4, r7, pc}

08006fb0 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	f000 f805 	bl	8006fc4 <lcdWriteCommand>
	HAL_Delay(50);
 8006fba:	2032      	movs	r0, #50	@ 0x32
 8006fbc:	f7fb fbdc 	bl	8002778 <HAL_Delay>
}
 8006fc0:	bf00      	nop
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8006fce:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8006fd2:	79fa      	ldrb	r2, [r7, #7]
 8006fd4:	b292      	uxth	r2, r2
 8006fd6:	801a      	strh	r2, [r3, #0]
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8006fee:	4a04      	ldr	r2, [pc, #16]	@ (8007000 <lcdWriteData+0x1c>)
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	8013      	strh	r3, [r2, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	60080000 	.word	0x60080000

08007004 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8007004:	b490      	push	{r4, r7}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	461a      	mov	r2, r3
 8007012:	4623      	mov	r3, r4
 8007014:	71fb      	strb	r3, [r7, #7]
 8007016:	4603      	mov	r3, r0
 8007018:	71bb      	strb	r3, [r7, #6]
 800701a:	460b      	mov	r3, r1
 800701c:	717b      	strb	r3, [r7, #5]
 800701e:	4613      	mov	r3, r2
 8007020:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8007026:	7f3b      	ldrb	r3, [r7, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d003      	beq.n	8007034 <lcdBuildMemoryAccessControlConfig+0x30>
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	f043 0304 	orr.w	r3, r3, #4
 8007032:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8007034:	7e3b      	ldrb	r3, [r7, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <lcdBuildMemoryAccessControlConfig+0x3e>
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	f043 0308 	orr.w	r3, r3, #8
 8007040:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8007042:	793b      	ldrb	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <lcdBuildMemoryAccessControlConfig+0x4c>
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	f043 0310 	orr.w	r3, r3, #16
 800704e:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8007050:	797b      	ldrb	r3, [r7, #5]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <lcdBuildMemoryAccessControlConfig+0x5a>
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	f043 0320 	orr.w	r3, r3, #32
 800705c:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 800705e:	79bb      	ldrb	r3, [r7, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <lcdBuildMemoryAccessControlConfig+0x68>
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800706a:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <lcdBuildMemoryAccessControlConfig+0x76>
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007078:	73fb      	strb	r3, [r7, #15]
  return value;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bc90      	pop	{r4, r7}
 8007084:	4770      	bx	lr
	...

08007088 <_vsiprintf_r>:
 8007088:	b510      	push	{r4, lr}
 800708a:	b09a      	sub	sp, #104	@ 0x68
 800708c:	2400      	movs	r4, #0
 800708e:	9100      	str	r1, [sp, #0]
 8007090:	9104      	str	r1, [sp, #16]
 8007092:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	9102      	str	r1, [sp, #8]
 800709a:	4905      	ldr	r1, [pc, #20]	@ (80070b0 <_vsiprintf_r+0x28>)
 800709c:	9103      	str	r1, [sp, #12]
 800709e:	4669      	mov	r1, sp
 80070a0:	9419      	str	r4, [sp, #100]	@ 0x64
 80070a2:	f000 f999 	bl	80073d8 <_svfiprintf_r>
 80070a6:	9b00      	ldr	r3, [sp, #0]
 80070a8:	701c      	strb	r4, [r3, #0]
 80070aa:	b01a      	add	sp, #104	@ 0x68
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	ffff0208 	.word	0xffff0208

080070b4 <vsiprintf>:
 80070b4:	4613      	mov	r3, r2
 80070b6:	460a      	mov	r2, r1
 80070b8:	4601      	mov	r1, r0
 80070ba:	4802      	ldr	r0, [pc, #8]	@ (80070c4 <vsiprintf+0x10>)
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f7ff bfe3 	b.w	8007088 <_vsiprintf_r>
 80070c2:	bf00      	nop
 80070c4:	20000048 	.word	0x20000048

080070c8 <memset>:
 80070c8:	4402      	add	r2, r0
 80070ca:	4603      	mov	r3, r0
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d100      	bne.n	80070d2 <memset+0xa>
 80070d0:	4770      	bx	lr
 80070d2:	f803 1b01 	strb.w	r1, [r3], #1
 80070d6:	e7f9      	b.n	80070cc <memset+0x4>

080070d8 <__errno>:
 80070d8:	4b01      	ldr	r3, [pc, #4]	@ (80070e0 <__errno+0x8>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000048 	.word	0x20000048

080070e4 <__libc_init_array>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4d0d      	ldr	r5, [pc, #52]	@ (800711c <__libc_init_array+0x38>)
 80070e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007120 <__libc_init_array+0x3c>)
 80070ea:	1b64      	subs	r4, r4, r5
 80070ec:	10a4      	asrs	r4, r4, #2
 80070ee:	2600      	movs	r6, #0
 80070f0:	42a6      	cmp	r6, r4
 80070f2:	d109      	bne.n	8007108 <__libc_init_array+0x24>
 80070f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007124 <__libc_init_array+0x40>)
 80070f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007128 <__libc_init_array+0x44>)
 80070f8:	f001 fd0e 	bl	8008b18 <_init>
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	2600      	movs	r6, #0
 8007102:	42a6      	cmp	r6, r4
 8007104:	d105      	bne.n	8007112 <__libc_init_array+0x2e>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f855 3b04 	ldr.w	r3, [r5], #4
 800710c:	4798      	blx	r3
 800710e:	3601      	adds	r6, #1
 8007110:	e7ee      	b.n	80070f0 <__libc_init_array+0xc>
 8007112:	f855 3b04 	ldr.w	r3, [r5], #4
 8007116:	4798      	blx	r3
 8007118:	3601      	adds	r6, #1
 800711a:	e7f2      	b.n	8007102 <__libc_init_array+0x1e>
 800711c:	0800c7b0 	.word	0x0800c7b0
 8007120:	0800c7b0 	.word	0x0800c7b0
 8007124:	0800c7b0 	.word	0x0800c7b0
 8007128:	0800c7b4 	.word	0x0800c7b4

0800712c <__retarget_lock_acquire_recursive>:
 800712c:	4770      	bx	lr

0800712e <__retarget_lock_release_recursive>:
 800712e:	4770      	bx	lr

08007130 <_free_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4605      	mov	r5, r0
 8007134:	2900      	cmp	r1, #0
 8007136:	d041      	beq.n	80071bc <_free_r+0x8c>
 8007138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713c:	1f0c      	subs	r4, r1, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	bfb8      	it	lt
 8007142:	18e4      	addlt	r4, r4, r3
 8007144:	f000 f8e0 	bl	8007308 <__malloc_lock>
 8007148:	4a1d      	ldr	r2, [pc, #116]	@ (80071c0 <_free_r+0x90>)
 800714a:	6813      	ldr	r3, [r2, #0]
 800714c:	b933      	cbnz	r3, 800715c <_free_r+0x2c>
 800714e:	6063      	str	r3, [r4, #4]
 8007150:	6014      	str	r4, [r2, #0]
 8007152:	4628      	mov	r0, r5
 8007154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007158:	f000 b8dc 	b.w	8007314 <__malloc_unlock>
 800715c:	42a3      	cmp	r3, r4
 800715e:	d908      	bls.n	8007172 <_free_r+0x42>
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	1821      	adds	r1, r4, r0
 8007164:	428b      	cmp	r3, r1
 8007166:	bf01      	itttt	eq
 8007168:	6819      	ldreq	r1, [r3, #0]
 800716a:	685b      	ldreq	r3, [r3, #4]
 800716c:	1809      	addeq	r1, r1, r0
 800716e:	6021      	streq	r1, [r4, #0]
 8007170:	e7ed      	b.n	800714e <_free_r+0x1e>
 8007172:	461a      	mov	r2, r3
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	b10b      	cbz	r3, 800717c <_free_r+0x4c>
 8007178:	42a3      	cmp	r3, r4
 800717a:	d9fa      	bls.n	8007172 <_free_r+0x42>
 800717c:	6811      	ldr	r1, [r2, #0]
 800717e:	1850      	adds	r0, r2, r1
 8007180:	42a0      	cmp	r0, r4
 8007182:	d10b      	bne.n	800719c <_free_r+0x6c>
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	4401      	add	r1, r0
 8007188:	1850      	adds	r0, r2, r1
 800718a:	4283      	cmp	r3, r0
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	d1e0      	bne.n	8007152 <_free_r+0x22>
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	6053      	str	r3, [r2, #4]
 8007196:	4408      	add	r0, r1
 8007198:	6010      	str	r0, [r2, #0]
 800719a:	e7da      	b.n	8007152 <_free_r+0x22>
 800719c:	d902      	bls.n	80071a4 <_free_r+0x74>
 800719e:	230c      	movs	r3, #12
 80071a0:	602b      	str	r3, [r5, #0]
 80071a2:	e7d6      	b.n	8007152 <_free_r+0x22>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	1821      	adds	r1, r4, r0
 80071a8:	428b      	cmp	r3, r1
 80071aa:	bf04      	itt	eq
 80071ac:	6819      	ldreq	r1, [r3, #0]
 80071ae:	685b      	ldreq	r3, [r3, #4]
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	bf04      	itt	eq
 80071b4:	1809      	addeq	r1, r1, r0
 80071b6:	6021      	streq	r1, [r4, #0]
 80071b8:	6054      	str	r4, [r2, #4]
 80071ba:	e7ca      	b.n	8007152 <_free_r+0x22>
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20001940 	.word	0x20001940

080071c4 <sbrk_aligned>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007204 <sbrk_aligned+0x40>)
 80071c8:	460c      	mov	r4, r1
 80071ca:	6831      	ldr	r1, [r6, #0]
 80071cc:	4605      	mov	r5, r0
 80071ce:	b911      	cbnz	r1, 80071d6 <sbrk_aligned+0x12>
 80071d0:	f000 fba4 	bl	800791c <_sbrk_r>
 80071d4:	6030      	str	r0, [r6, #0]
 80071d6:	4621      	mov	r1, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 fb9f 	bl	800791c <_sbrk_r>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d103      	bne.n	80071ea <sbrk_aligned+0x26>
 80071e2:	f04f 34ff 	mov.w	r4, #4294967295
 80071e6:	4620      	mov	r0, r4
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	1cc4      	adds	r4, r0, #3
 80071ec:	f024 0403 	bic.w	r4, r4, #3
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d0f8      	beq.n	80071e6 <sbrk_aligned+0x22>
 80071f4:	1a21      	subs	r1, r4, r0
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fb90 	bl	800791c <_sbrk_r>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d1f2      	bne.n	80071e6 <sbrk_aligned+0x22>
 8007200:	e7ef      	b.n	80071e2 <sbrk_aligned+0x1e>
 8007202:	bf00      	nop
 8007204:	2000193c 	.word	0x2000193c

08007208 <_malloc_r>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	1ccd      	adds	r5, r1, #3
 800720e:	f025 0503 	bic.w	r5, r5, #3
 8007212:	3508      	adds	r5, #8
 8007214:	2d0c      	cmp	r5, #12
 8007216:	bf38      	it	cc
 8007218:	250c      	movcc	r5, #12
 800721a:	2d00      	cmp	r5, #0
 800721c:	4606      	mov	r6, r0
 800721e:	db01      	blt.n	8007224 <_malloc_r+0x1c>
 8007220:	42a9      	cmp	r1, r5
 8007222:	d904      	bls.n	800722e <_malloc_r+0x26>
 8007224:	230c      	movs	r3, #12
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	2000      	movs	r0, #0
 800722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007304 <_malloc_r+0xfc>
 8007232:	f000 f869 	bl	8007308 <__malloc_lock>
 8007236:	f8d8 3000 	ldr.w	r3, [r8]
 800723a:	461c      	mov	r4, r3
 800723c:	bb44      	cbnz	r4, 8007290 <_malloc_r+0x88>
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff ffbf 	bl	80071c4 <sbrk_aligned>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	4604      	mov	r4, r0
 800724a:	d158      	bne.n	80072fe <_malloc_r+0xf6>
 800724c:	f8d8 4000 	ldr.w	r4, [r8]
 8007250:	4627      	mov	r7, r4
 8007252:	2f00      	cmp	r7, #0
 8007254:	d143      	bne.n	80072de <_malloc_r+0xd6>
 8007256:	2c00      	cmp	r4, #0
 8007258:	d04b      	beq.n	80072f2 <_malloc_r+0xea>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	4639      	mov	r1, r7
 800725e:	4630      	mov	r0, r6
 8007260:	eb04 0903 	add.w	r9, r4, r3
 8007264:	f000 fb5a 	bl	800791c <_sbrk_r>
 8007268:	4581      	cmp	r9, r0
 800726a:	d142      	bne.n	80072f2 <_malloc_r+0xea>
 800726c:	6821      	ldr	r1, [r4, #0]
 800726e:	1a6d      	subs	r5, r5, r1
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f7ff ffa6 	bl	80071c4 <sbrk_aligned>
 8007278:	3001      	adds	r0, #1
 800727a:	d03a      	beq.n	80072f2 <_malloc_r+0xea>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	442b      	add	r3, r5
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	f8d8 3000 	ldr.w	r3, [r8]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	bb62      	cbnz	r2, 80072e4 <_malloc_r+0xdc>
 800728a:	f8c8 7000 	str.w	r7, [r8]
 800728e:	e00f      	b.n	80072b0 <_malloc_r+0xa8>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	1b52      	subs	r2, r2, r5
 8007294:	d420      	bmi.n	80072d8 <_malloc_r+0xd0>
 8007296:	2a0b      	cmp	r2, #11
 8007298:	d917      	bls.n	80072ca <_malloc_r+0xc2>
 800729a:	1961      	adds	r1, r4, r5
 800729c:	42a3      	cmp	r3, r4
 800729e:	6025      	str	r5, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	6059      	strne	r1, [r3, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	bf08      	it	eq
 80072a8:	f8c8 1000 	streq.w	r1, [r8]
 80072ac:	5162      	str	r2, [r4, r5]
 80072ae:	604b      	str	r3, [r1, #4]
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f82f 	bl	8007314 <__malloc_unlock>
 80072b6:	f104 000b 	add.w	r0, r4, #11
 80072ba:	1d23      	adds	r3, r4, #4
 80072bc:	f020 0007 	bic.w	r0, r0, #7
 80072c0:	1ac2      	subs	r2, r0, r3
 80072c2:	bf1c      	itt	ne
 80072c4:	1a1b      	subne	r3, r3, r0
 80072c6:	50a3      	strne	r3, [r4, r2]
 80072c8:	e7af      	b.n	800722a <_malloc_r+0x22>
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	bf0c      	ite	eq
 80072d0:	f8c8 2000 	streq.w	r2, [r8]
 80072d4:	605a      	strne	r2, [r3, #4]
 80072d6:	e7eb      	b.n	80072b0 <_malloc_r+0xa8>
 80072d8:	4623      	mov	r3, r4
 80072da:	6864      	ldr	r4, [r4, #4]
 80072dc:	e7ae      	b.n	800723c <_malloc_r+0x34>
 80072de:	463c      	mov	r4, r7
 80072e0:	687f      	ldr	r7, [r7, #4]
 80072e2:	e7b6      	b.n	8007252 <_malloc_r+0x4a>
 80072e4:	461a      	mov	r2, r3
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d1fb      	bne.n	80072e4 <_malloc_r+0xdc>
 80072ec:	2300      	movs	r3, #0
 80072ee:	6053      	str	r3, [r2, #4]
 80072f0:	e7de      	b.n	80072b0 <_malloc_r+0xa8>
 80072f2:	230c      	movs	r3, #12
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	4630      	mov	r0, r6
 80072f8:	f000 f80c 	bl	8007314 <__malloc_unlock>
 80072fc:	e794      	b.n	8007228 <_malloc_r+0x20>
 80072fe:	6005      	str	r5, [r0, #0]
 8007300:	e7d6      	b.n	80072b0 <_malloc_r+0xa8>
 8007302:	bf00      	nop
 8007304:	20001940 	.word	0x20001940

08007308 <__malloc_lock>:
 8007308:	4801      	ldr	r0, [pc, #4]	@ (8007310 <__malloc_lock+0x8>)
 800730a:	f7ff bf0f 	b.w	800712c <__retarget_lock_acquire_recursive>
 800730e:	bf00      	nop
 8007310:	20001938 	.word	0x20001938

08007314 <__malloc_unlock>:
 8007314:	4801      	ldr	r0, [pc, #4]	@ (800731c <__malloc_unlock+0x8>)
 8007316:	f7ff bf0a 	b.w	800712e <__retarget_lock_release_recursive>
 800731a:	bf00      	nop
 800731c:	20001938 	.word	0x20001938

08007320 <__ssputs_r>:
 8007320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	688e      	ldr	r6, [r1, #8]
 8007326:	461f      	mov	r7, r3
 8007328:	42be      	cmp	r6, r7
 800732a:	680b      	ldr	r3, [r1, #0]
 800732c:	4682      	mov	sl, r0
 800732e:	460c      	mov	r4, r1
 8007330:	4690      	mov	r8, r2
 8007332:	d82d      	bhi.n	8007390 <__ssputs_r+0x70>
 8007334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007338:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800733c:	d026      	beq.n	800738c <__ssputs_r+0x6c>
 800733e:	6965      	ldr	r5, [r4, #20]
 8007340:	6909      	ldr	r1, [r1, #16]
 8007342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007346:	eba3 0901 	sub.w	r9, r3, r1
 800734a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800734e:	1c7b      	adds	r3, r7, #1
 8007350:	444b      	add	r3, r9
 8007352:	106d      	asrs	r5, r5, #1
 8007354:	429d      	cmp	r5, r3
 8007356:	bf38      	it	cc
 8007358:	461d      	movcc	r5, r3
 800735a:	0553      	lsls	r3, r2, #21
 800735c:	d527      	bpl.n	80073ae <__ssputs_r+0x8e>
 800735e:	4629      	mov	r1, r5
 8007360:	f7ff ff52 	bl	8007208 <_malloc_r>
 8007364:	4606      	mov	r6, r0
 8007366:	b360      	cbz	r0, 80073c2 <__ssputs_r+0xa2>
 8007368:	6921      	ldr	r1, [r4, #16]
 800736a:	464a      	mov	r2, r9
 800736c:	f000 fae6 	bl	800793c <memcpy>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	6126      	str	r6, [r4, #16]
 800737e:	6165      	str	r5, [r4, #20]
 8007380:	444e      	add	r6, r9
 8007382:	eba5 0509 	sub.w	r5, r5, r9
 8007386:	6026      	str	r6, [r4, #0]
 8007388:	60a5      	str	r5, [r4, #8]
 800738a:	463e      	mov	r6, r7
 800738c:	42be      	cmp	r6, r7
 800738e:	d900      	bls.n	8007392 <__ssputs_r+0x72>
 8007390:	463e      	mov	r6, r7
 8007392:	6820      	ldr	r0, [r4, #0]
 8007394:	4632      	mov	r2, r6
 8007396:	4641      	mov	r1, r8
 8007398:	f000 faa6 	bl	80078e8 <memmove>
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	1b9b      	subs	r3, r3, r6
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	4433      	add	r3, r6
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	2000      	movs	r0, #0
 80073aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ae:	462a      	mov	r2, r5
 80073b0:	f000 fad2 	bl	8007958 <_realloc_r>
 80073b4:	4606      	mov	r6, r0
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d1e0      	bne.n	800737c <__ssputs_r+0x5c>
 80073ba:	6921      	ldr	r1, [r4, #16]
 80073bc:	4650      	mov	r0, sl
 80073be:	f7ff feb7 	bl	8007130 <_free_r>
 80073c2:	230c      	movs	r3, #12
 80073c4:	f8ca 3000 	str.w	r3, [sl]
 80073c8:	89a3      	ldrh	r3, [r4, #12]
 80073ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e7e9      	b.n	80073aa <__ssputs_r+0x8a>
	...

080073d8 <_svfiprintf_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4698      	mov	r8, r3
 80073de:	898b      	ldrh	r3, [r1, #12]
 80073e0:	061b      	lsls	r3, r3, #24
 80073e2:	b09d      	sub	sp, #116	@ 0x74
 80073e4:	4607      	mov	r7, r0
 80073e6:	460d      	mov	r5, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	d510      	bpl.n	800740e <_svfiprintf_r+0x36>
 80073ec:	690b      	ldr	r3, [r1, #16]
 80073ee:	b973      	cbnz	r3, 800740e <_svfiprintf_r+0x36>
 80073f0:	2140      	movs	r1, #64	@ 0x40
 80073f2:	f7ff ff09 	bl	8007208 <_malloc_r>
 80073f6:	6028      	str	r0, [r5, #0]
 80073f8:	6128      	str	r0, [r5, #16]
 80073fa:	b930      	cbnz	r0, 800740a <_svfiprintf_r+0x32>
 80073fc:	230c      	movs	r3, #12
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b01d      	add	sp, #116	@ 0x74
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	2340      	movs	r3, #64	@ 0x40
 800740c:	616b      	str	r3, [r5, #20]
 800740e:	2300      	movs	r3, #0
 8007410:	9309      	str	r3, [sp, #36]	@ 0x24
 8007412:	2320      	movs	r3, #32
 8007414:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007418:	f8cd 800c 	str.w	r8, [sp, #12]
 800741c:	2330      	movs	r3, #48	@ 0x30
 800741e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075bc <_svfiprintf_r+0x1e4>
 8007422:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007426:	f04f 0901 	mov.w	r9, #1
 800742a:	4623      	mov	r3, r4
 800742c:	469a      	mov	sl, r3
 800742e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007432:	b10a      	cbz	r2, 8007438 <_svfiprintf_r+0x60>
 8007434:	2a25      	cmp	r2, #37	@ 0x25
 8007436:	d1f9      	bne.n	800742c <_svfiprintf_r+0x54>
 8007438:	ebba 0b04 	subs.w	fp, sl, r4
 800743c:	d00b      	beq.n	8007456 <_svfiprintf_r+0x7e>
 800743e:	465b      	mov	r3, fp
 8007440:	4622      	mov	r2, r4
 8007442:	4629      	mov	r1, r5
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ff6b 	bl	8007320 <__ssputs_r>
 800744a:	3001      	adds	r0, #1
 800744c:	f000 80a7 	beq.w	800759e <_svfiprintf_r+0x1c6>
 8007450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007452:	445a      	add	r2, fp
 8007454:	9209      	str	r2, [sp, #36]	@ 0x24
 8007456:	f89a 3000 	ldrb.w	r3, [sl]
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 809f 	beq.w	800759e <_svfiprintf_r+0x1c6>
 8007460:	2300      	movs	r3, #0
 8007462:	f04f 32ff 	mov.w	r2, #4294967295
 8007466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800746a:	f10a 0a01 	add.w	sl, sl, #1
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007476:	931a      	str	r3, [sp, #104]	@ 0x68
 8007478:	4654      	mov	r4, sl
 800747a:	2205      	movs	r2, #5
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	484e      	ldr	r0, [pc, #312]	@ (80075bc <_svfiprintf_r+0x1e4>)
 8007482:	f7f8 fea5 	bl	80001d0 <memchr>
 8007486:	9a04      	ldr	r2, [sp, #16]
 8007488:	b9d8      	cbnz	r0, 80074c2 <_svfiprintf_r+0xea>
 800748a:	06d0      	lsls	r0, r2, #27
 800748c:	bf44      	itt	mi
 800748e:	2320      	movmi	r3, #32
 8007490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007494:	0711      	lsls	r1, r2, #28
 8007496:	bf44      	itt	mi
 8007498:	232b      	movmi	r3, #43	@ 0x2b
 800749a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800749e:	f89a 3000 	ldrb.w	r3, [sl]
 80074a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074a4:	d015      	beq.n	80074d2 <_svfiprintf_r+0xfa>
 80074a6:	9a07      	ldr	r2, [sp, #28]
 80074a8:	4654      	mov	r4, sl
 80074aa:	2000      	movs	r0, #0
 80074ac:	f04f 0c0a 	mov.w	ip, #10
 80074b0:	4621      	mov	r1, r4
 80074b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b6:	3b30      	subs	r3, #48	@ 0x30
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d94b      	bls.n	8007554 <_svfiprintf_r+0x17c>
 80074bc:	b1b0      	cbz	r0, 80074ec <_svfiprintf_r+0x114>
 80074be:	9207      	str	r2, [sp, #28]
 80074c0:	e014      	b.n	80074ec <_svfiprintf_r+0x114>
 80074c2:	eba0 0308 	sub.w	r3, r0, r8
 80074c6:	fa09 f303 	lsl.w	r3, r9, r3
 80074ca:	4313      	orrs	r3, r2
 80074cc:	9304      	str	r3, [sp, #16]
 80074ce:	46a2      	mov	sl, r4
 80074d0:	e7d2      	b.n	8007478 <_svfiprintf_r+0xa0>
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	1d19      	adds	r1, r3, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	9103      	str	r1, [sp, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bfbb      	ittet	lt
 80074de:	425b      	neglt	r3, r3
 80074e0:	f042 0202 	orrlt.w	r2, r2, #2
 80074e4:	9307      	strge	r3, [sp, #28]
 80074e6:	9307      	strlt	r3, [sp, #28]
 80074e8:	bfb8      	it	lt
 80074ea:	9204      	strlt	r2, [sp, #16]
 80074ec:	7823      	ldrb	r3, [r4, #0]
 80074ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80074f0:	d10a      	bne.n	8007508 <_svfiprintf_r+0x130>
 80074f2:	7863      	ldrb	r3, [r4, #1]
 80074f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f6:	d132      	bne.n	800755e <_svfiprintf_r+0x186>
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	1d1a      	adds	r2, r3, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	9203      	str	r2, [sp, #12]
 8007500:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007504:	3402      	adds	r4, #2
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075cc <_svfiprintf_r+0x1f4>
 800750c:	7821      	ldrb	r1, [r4, #0]
 800750e:	2203      	movs	r2, #3
 8007510:	4650      	mov	r0, sl
 8007512:	f7f8 fe5d 	bl	80001d0 <memchr>
 8007516:	b138      	cbz	r0, 8007528 <_svfiprintf_r+0x150>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	eba0 000a 	sub.w	r0, r0, sl
 800751e:	2240      	movs	r2, #64	@ 0x40
 8007520:	4082      	lsls	r2, r0
 8007522:	4313      	orrs	r3, r2
 8007524:	3401      	adds	r4, #1
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752c:	4824      	ldr	r0, [pc, #144]	@ (80075c0 <_svfiprintf_r+0x1e8>)
 800752e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007532:	2206      	movs	r2, #6
 8007534:	f7f8 fe4c 	bl	80001d0 <memchr>
 8007538:	2800      	cmp	r0, #0
 800753a:	d036      	beq.n	80075aa <_svfiprintf_r+0x1d2>
 800753c:	4b21      	ldr	r3, [pc, #132]	@ (80075c4 <_svfiprintf_r+0x1ec>)
 800753e:	bb1b      	cbnz	r3, 8007588 <_svfiprintf_r+0x1b0>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	3307      	adds	r3, #7
 8007544:	f023 0307 	bic.w	r3, r3, #7
 8007548:	3308      	adds	r3, #8
 800754a:	9303      	str	r3, [sp, #12]
 800754c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754e:	4433      	add	r3, r6
 8007550:	9309      	str	r3, [sp, #36]	@ 0x24
 8007552:	e76a      	b.n	800742a <_svfiprintf_r+0x52>
 8007554:	fb0c 3202 	mla	r2, ip, r2, r3
 8007558:	460c      	mov	r4, r1
 800755a:	2001      	movs	r0, #1
 800755c:	e7a8      	b.n	80074b0 <_svfiprintf_r+0xd8>
 800755e:	2300      	movs	r3, #0
 8007560:	3401      	adds	r4, #1
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	4619      	mov	r1, r3
 8007566:	f04f 0c0a 	mov.w	ip, #10
 800756a:	4620      	mov	r0, r4
 800756c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007570:	3a30      	subs	r2, #48	@ 0x30
 8007572:	2a09      	cmp	r2, #9
 8007574:	d903      	bls.n	800757e <_svfiprintf_r+0x1a6>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0c6      	beq.n	8007508 <_svfiprintf_r+0x130>
 800757a:	9105      	str	r1, [sp, #20]
 800757c:	e7c4      	b.n	8007508 <_svfiprintf_r+0x130>
 800757e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007582:	4604      	mov	r4, r0
 8007584:	2301      	movs	r3, #1
 8007586:	e7f0      	b.n	800756a <_svfiprintf_r+0x192>
 8007588:	ab03      	add	r3, sp, #12
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	462a      	mov	r2, r5
 800758e:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <_svfiprintf_r+0x1f0>)
 8007590:	a904      	add	r1, sp, #16
 8007592:	4638      	mov	r0, r7
 8007594:	f3af 8000 	nop.w
 8007598:	1c42      	adds	r2, r0, #1
 800759a:	4606      	mov	r6, r0
 800759c:	d1d6      	bne.n	800754c <_svfiprintf_r+0x174>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	065b      	lsls	r3, r3, #25
 80075a2:	f53f af2d 	bmi.w	8007400 <_svfiprintf_r+0x28>
 80075a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a8:	e72c      	b.n	8007404 <_svfiprintf_r+0x2c>
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4b05      	ldr	r3, [pc, #20]	@ (80075c8 <_svfiprintf_r+0x1f0>)
 80075b2:	a904      	add	r1, sp, #16
 80075b4:	4638      	mov	r0, r7
 80075b6:	f000 f879 	bl	80076ac <_printf_i>
 80075ba:	e7ed      	b.n	8007598 <_svfiprintf_r+0x1c0>
 80075bc:	0800c59c 	.word	0x0800c59c
 80075c0:	0800c5a6 	.word	0x0800c5a6
 80075c4:	00000000 	.word	0x00000000
 80075c8:	08007321 	.word	0x08007321
 80075cc:	0800c5a2 	.word	0x0800c5a2

080075d0 <_printf_common>:
 80075d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	4616      	mov	r6, r2
 80075d6:	4698      	mov	r8, r3
 80075d8:	688a      	ldr	r2, [r1, #8]
 80075da:	690b      	ldr	r3, [r1, #16]
 80075dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	bfb8      	it	lt
 80075e4:	4613      	movlt	r3, r2
 80075e6:	6033      	str	r3, [r6, #0]
 80075e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075ec:	4607      	mov	r7, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	b10a      	cbz	r2, 80075f6 <_printf_common+0x26>
 80075f2:	3301      	adds	r3, #1
 80075f4:	6033      	str	r3, [r6, #0]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	0699      	lsls	r1, r3, #26
 80075fa:	bf42      	ittt	mi
 80075fc:	6833      	ldrmi	r3, [r6, #0]
 80075fe:	3302      	addmi	r3, #2
 8007600:	6033      	strmi	r3, [r6, #0]
 8007602:	6825      	ldr	r5, [r4, #0]
 8007604:	f015 0506 	ands.w	r5, r5, #6
 8007608:	d106      	bne.n	8007618 <_printf_common+0x48>
 800760a:	f104 0a19 	add.w	sl, r4, #25
 800760e:	68e3      	ldr	r3, [r4, #12]
 8007610:	6832      	ldr	r2, [r6, #0]
 8007612:	1a9b      	subs	r3, r3, r2
 8007614:	42ab      	cmp	r3, r5
 8007616:	dc26      	bgt.n	8007666 <_printf_common+0x96>
 8007618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	3b00      	subs	r3, #0
 8007620:	bf18      	it	ne
 8007622:	2301      	movne	r3, #1
 8007624:	0692      	lsls	r2, r2, #26
 8007626:	d42b      	bmi.n	8007680 <_printf_common+0xb0>
 8007628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800762c:	4641      	mov	r1, r8
 800762e:	4638      	mov	r0, r7
 8007630:	47c8      	blx	r9
 8007632:	3001      	adds	r0, #1
 8007634:	d01e      	beq.n	8007674 <_printf_common+0xa4>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	f003 0306 	and.w	r3, r3, #6
 800763e:	2b04      	cmp	r3, #4
 8007640:	bf02      	ittt	eq
 8007642:	68e5      	ldreq	r5, [r4, #12]
 8007644:	6833      	ldreq	r3, [r6, #0]
 8007646:	1aed      	subeq	r5, r5, r3
 8007648:	68a3      	ldr	r3, [r4, #8]
 800764a:	bf0c      	ite	eq
 800764c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007650:	2500      	movne	r5, #0
 8007652:	4293      	cmp	r3, r2
 8007654:	bfc4      	itt	gt
 8007656:	1a9b      	subgt	r3, r3, r2
 8007658:	18ed      	addgt	r5, r5, r3
 800765a:	2600      	movs	r6, #0
 800765c:	341a      	adds	r4, #26
 800765e:	42b5      	cmp	r5, r6
 8007660:	d11a      	bne.n	8007698 <_printf_common+0xc8>
 8007662:	2000      	movs	r0, #0
 8007664:	e008      	b.n	8007678 <_printf_common+0xa8>
 8007666:	2301      	movs	r3, #1
 8007668:	4652      	mov	r2, sl
 800766a:	4641      	mov	r1, r8
 800766c:	4638      	mov	r0, r7
 800766e:	47c8      	blx	r9
 8007670:	3001      	adds	r0, #1
 8007672:	d103      	bne.n	800767c <_printf_common+0xac>
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767c:	3501      	adds	r5, #1
 800767e:	e7c6      	b.n	800760e <_printf_common+0x3e>
 8007680:	18e1      	adds	r1, r4, r3
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	2030      	movs	r0, #48	@ 0x30
 8007686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800768a:	4422      	add	r2, r4
 800768c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007694:	3302      	adds	r3, #2
 8007696:	e7c7      	b.n	8007628 <_printf_common+0x58>
 8007698:	2301      	movs	r3, #1
 800769a:	4622      	mov	r2, r4
 800769c:	4641      	mov	r1, r8
 800769e:	4638      	mov	r0, r7
 80076a0:	47c8      	blx	r9
 80076a2:	3001      	adds	r0, #1
 80076a4:	d0e6      	beq.n	8007674 <_printf_common+0xa4>
 80076a6:	3601      	adds	r6, #1
 80076a8:	e7d9      	b.n	800765e <_printf_common+0x8e>
	...

080076ac <_printf_i>:
 80076ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	7e0f      	ldrb	r7, [r1, #24]
 80076b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076b4:	2f78      	cmp	r7, #120	@ 0x78
 80076b6:	4691      	mov	r9, r2
 80076b8:	4680      	mov	r8, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	469a      	mov	sl, r3
 80076be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076c2:	d807      	bhi.n	80076d4 <_printf_i+0x28>
 80076c4:	2f62      	cmp	r7, #98	@ 0x62
 80076c6:	d80a      	bhi.n	80076de <_printf_i+0x32>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	f000 80d1 	beq.w	8007870 <_printf_i+0x1c4>
 80076ce:	2f58      	cmp	r7, #88	@ 0x58
 80076d0:	f000 80b8 	beq.w	8007844 <_printf_i+0x198>
 80076d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076dc:	e03a      	b.n	8007754 <_printf_i+0xa8>
 80076de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076e2:	2b15      	cmp	r3, #21
 80076e4:	d8f6      	bhi.n	80076d4 <_printf_i+0x28>
 80076e6:	a101      	add	r1, pc, #4	@ (adr r1, 80076ec <_printf_i+0x40>)
 80076e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076ec:	08007745 	.word	0x08007745
 80076f0:	08007759 	.word	0x08007759
 80076f4:	080076d5 	.word	0x080076d5
 80076f8:	080076d5 	.word	0x080076d5
 80076fc:	080076d5 	.word	0x080076d5
 8007700:	080076d5 	.word	0x080076d5
 8007704:	08007759 	.word	0x08007759
 8007708:	080076d5 	.word	0x080076d5
 800770c:	080076d5 	.word	0x080076d5
 8007710:	080076d5 	.word	0x080076d5
 8007714:	080076d5 	.word	0x080076d5
 8007718:	08007857 	.word	0x08007857
 800771c:	08007783 	.word	0x08007783
 8007720:	08007811 	.word	0x08007811
 8007724:	080076d5 	.word	0x080076d5
 8007728:	080076d5 	.word	0x080076d5
 800772c:	08007879 	.word	0x08007879
 8007730:	080076d5 	.word	0x080076d5
 8007734:	08007783 	.word	0x08007783
 8007738:	080076d5 	.word	0x080076d5
 800773c:	080076d5 	.word	0x080076d5
 8007740:	08007819 	.word	0x08007819
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	1d1a      	adds	r2, r3, #4
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6032      	str	r2, [r6, #0]
 800774c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007754:	2301      	movs	r3, #1
 8007756:	e09c      	b.n	8007892 <_printf_i+0x1e6>
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	6820      	ldr	r0, [r4, #0]
 800775c:	1d19      	adds	r1, r3, #4
 800775e:	6031      	str	r1, [r6, #0]
 8007760:	0606      	lsls	r6, r0, #24
 8007762:	d501      	bpl.n	8007768 <_printf_i+0xbc>
 8007764:	681d      	ldr	r5, [r3, #0]
 8007766:	e003      	b.n	8007770 <_printf_i+0xc4>
 8007768:	0645      	lsls	r5, r0, #25
 800776a:	d5fb      	bpl.n	8007764 <_printf_i+0xb8>
 800776c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007770:	2d00      	cmp	r5, #0
 8007772:	da03      	bge.n	800777c <_printf_i+0xd0>
 8007774:	232d      	movs	r3, #45	@ 0x2d
 8007776:	426d      	negs	r5, r5
 8007778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800777c:	4858      	ldr	r0, [pc, #352]	@ (80078e0 <_printf_i+0x234>)
 800777e:	230a      	movs	r3, #10
 8007780:	e011      	b.n	80077a6 <_printf_i+0xfa>
 8007782:	6821      	ldr	r1, [r4, #0]
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	0608      	lsls	r0, r1, #24
 8007788:	f853 5b04 	ldr.w	r5, [r3], #4
 800778c:	d402      	bmi.n	8007794 <_printf_i+0xe8>
 800778e:	0649      	lsls	r1, r1, #25
 8007790:	bf48      	it	mi
 8007792:	b2ad      	uxthmi	r5, r5
 8007794:	2f6f      	cmp	r7, #111	@ 0x6f
 8007796:	4852      	ldr	r0, [pc, #328]	@ (80078e0 <_printf_i+0x234>)
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	bf14      	ite	ne
 800779c:	230a      	movne	r3, #10
 800779e:	2308      	moveq	r3, #8
 80077a0:	2100      	movs	r1, #0
 80077a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077a6:	6866      	ldr	r6, [r4, #4]
 80077a8:	60a6      	str	r6, [r4, #8]
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	db05      	blt.n	80077ba <_printf_i+0x10e>
 80077ae:	6821      	ldr	r1, [r4, #0]
 80077b0:	432e      	orrs	r6, r5
 80077b2:	f021 0104 	bic.w	r1, r1, #4
 80077b6:	6021      	str	r1, [r4, #0]
 80077b8:	d04b      	beq.n	8007852 <_printf_i+0x1a6>
 80077ba:	4616      	mov	r6, r2
 80077bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80077c0:	fb03 5711 	mls	r7, r3, r1, r5
 80077c4:	5dc7      	ldrb	r7, [r0, r7]
 80077c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077ca:	462f      	mov	r7, r5
 80077cc:	42bb      	cmp	r3, r7
 80077ce:	460d      	mov	r5, r1
 80077d0:	d9f4      	bls.n	80077bc <_printf_i+0x110>
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d10b      	bne.n	80077ee <_printf_i+0x142>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	07df      	lsls	r7, r3, #31
 80077da:	d508      	bpl.n	80077ee <_printf_i+0x142>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	6861      	ldr	r1, [r4, #4]
 80077e0:	4299      	cmp	r1, r3
 80077e2:	bfde      	ittt	le
 80077e4:	2330      	movle	r3, #48	@ 0x30
 80077e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ee:	1b92      	subs	r2, r2, r6
 80077f0:	6122      	str	r2, [r4, #16]
 80077f2:	f8cd a000 	str.w	sl, [sp]
 80077f6:	464b      	mov	r3, r9
 80077f8:	aa03      	add	r2, sp, #12
 80077fa:	4621      	mov	r1, r4
 80077fc:	4640      	mov	r0, r8
 80077fe:	f7ff fee7 	bl	80075d0 <_printf_common>
 8007802:	3001      	adds	r0, #1
 8007804:	d14a      	bne.n	800789c <_printf_i+0x1f0>
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	b004      	add	sp, #16
 800780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f043 0320 	orr.w	r3, r3, #32
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	4832      	ldr	r0, [pc, #200]	@ (80078e4 <_printf_i+0x238>)
 800781a:	2778      	movs	r7, #120	@ 0x78
 800781c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	6831      	ldr	r1, [r6, #0]
 8007824:	061f      	lsls	r7, r3, #24
 8007826:	f851 5b04 	ldr.w	r5, [r1], #4
 800782a:	d402      	bmi.n	8007832 <_printf_i+0x186>
 800782c:	065f      	lsls	r7, r3, #25
 800782e:	bf48      	it	mi
 8007830:	b2ad      	uxthmi	r5, r5
 8007832:	6031      	str	r1, [r6, #0]
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	bf44      	itt	mi
 8007838:	f043 0320 	orrmi.w	r3, r3, #32
 800783c:	6023      	strmi	r3, [r4, #0]
 800783e:	b11d      	cbz	r5, 8007848 <_printf_i+0x19c>
 8007840:	2310      	movs	r3, #16
 8007842:	e7ad      	b.n	80077a0 <_printf_i+0xf4>
 8007844:	4826      	ldr	r0, [pc, #152]	@ (80078e0 <_printf_i+0x234>)
 8007846:	e7e9      	b.n	800781c <_printf_i+0x170>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	f023 0320 	bic.w	r3, r3, #32
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	e7f6      	b.n	8007840 <_printf_i+0x194>
 8007852:	4616      	mov	r6, r2
 8007854:	e7bd      	b.n	80077d2 <_printf_i+0x126>
 8007856:	6833      	ldr	r3, [r6, #0]
 8007858:	6825      	ldr	r5, [r4, #0]
 800785a:	6961      	ldr	r1, [r4, #20]
 800785c:	1d18      	adds	r0, r3, #4
 800785e:	6030      	str	r0, [r6, #0]
 8007860:	062e      	lsls	r6, r5, #24
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	d501      	bpl.n	800786a <_printf_i+0x1be>
 8007866:	6019      	str	r1, [r3, #0]
 8007868:	e002      	b.n	8007870 <_printf_i+0x1c4>
 800786a:	0668      	lsls	r0, r5, #25
 800786c:	d5fb      	bpl.n	8007866 <_printf_i+0x1ba>
 800786e:	8019      	strh	r1, [r3, #0]
 8007870:	2300      	movs	r3, #0
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	4616      	mov	r6, r2
 8007876:	e7bc      	b.n	80077f2 <_printf_i+0x146>
 8007878:	6833      	ldr	r3, [r6, #0]
 800787a:	1d1a      	adds	r2, r3, #4
 800787c:	6032      	str	r2, [r6, #0]
 800787e:	681e      	ldr	r6, [r3, #0]
 8007880:	6862      	ldr	r2, [r4, #4]
 8007882:	2100      	movs	r1, #0
 8007884:	4630      	mov	r0, r6
 8007886:	f7f8 fca3 	bl	80001d0 <memchr>
 800788a:	b108      	cbz	r0, 8007890 <_printf_i+0x1e4>
 800788c:	1b80      	subs	r0, r0, r6
 800788e:	6060      	str	r0, [r4, #4]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	2300      	movs	r3, #0
 8007896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800789a:	e7aa      	b.n	80077f2 <_printf_i+0x146>
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	4632      	mov	r2, r6
 80078a0:	4649      	mov	r1, r9
 80078a2:	4640      	mov	r0, r8
 80078a4:	47d0      	blx	sl
 80078a6:	3001      	adds	r0, #1
 80078a8:	d0ad      	beq.n	8007806 <_printf_i+0x15a>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	079b      	lsls	r3, r3, #30
 80078ae:	d413      	bmi.n	80078d8 <_printf_i+0x22c>
 80078b0:	68e0      	ldr	r0, [r4, #12]
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	4298      	cmp	r0, r3
 80078b6:	bfb8      	it	lt
 80078b8:	4618      	movlt	r0, r3
 80078ba:	e7a6      	b.n	800780a <_printf_i+0x15e>
 80078bc:	2301      	movs	r3, #1
 80078be:	4632      	mov	r2, r6
 80078c0:	4649      	mov	r1, r9
 80078c2:	4640      	mov	r0, r8
 80078c4:	47d0      	blx	sl
 80078c6:	3001      	adds	r0, #1
 80078c8:	d09d      	beq.n	8007806 <_printf_i+0x15a>
 80078ca:	3501      	adds	r5, #1
 80078cc:	68e3      	ldr	r3, [r4, #12]
 80078ce:	9903      	ldr	r1, [sp, #12]
 80078d0:	1a5b      	subs	r3, r3, r1
 80078d2:	42ab      	cmp	r3, r5
 80078d4:	dcf2      	bgt.n	80078bc <_printf_i+0x210>
 80078d6:	e7eb      	b.n	80078b0 <_printf_i+0x204>
 80078d8:	2500      	movs	r5, #0
 80078da:	f104 0619 	add.w	r6, r4, #25
 80078de:	e7f5      	b.n	80078cc <_printf_i+0x220>
 80078e0:	0800c5ad 	.word	0x0800c5ad
 80078e4:	0800c5be 	.word	0x0800c5be

080078e8 <memmove>:
 80078e8:	4288      	cmp	r0, r1
 80078ea:	b510      	push	{r4, lr}
 80078ec:	eb01 0402 	add.w	r4, r1, r2
 80078f0:	d902      	bls.n	80078f8 <memmove+0x10>
 80078f2:	4284      	cmp	r4, r0
 80078f4:	4623      	mov	r3, r4
 80078f6:	d807      	bhi.n	8007908 <memmove+0x20>
 80078f8:	1e43      	subs	r3, r0, #1
 80078fa:	42a1      	cmp	r1, r4
 80078fc:	d008      	beq.n	8007910 <memmove+0x28>
 80078fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007906:	e7f8      	b.n	80078fa <memmove+0x12>
 8007908:	4402      	add	r2, r0
 800790a:	4601      	mov	r1, r0
 800790c:	428a      	cmp	r2, r1
 800790e:	d100      	bne.n	8007912 <memmove+0x2a>
 8007910:	bd10      	pop	{r4, pc}
 8007912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800791a:	e7f7      	b.n	800790c <memmove+0x24>

0800791c <_sbrk_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d06      	ldr	r5, [pc, #24]	@ (8007938 <_sbrk_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7fa fe42 	bl	80025b0 <_sbrk>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_sbrk_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_sbrk_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	20001934 	.word	0x20001934

0800793c <memcpy>:
 800793c:	440a      	add	r2, r1
 800793e:	4291      	cmp	r1, r2
 8007940:	f100 33ff 	add.w	r3, r0, #4294967295
 8007944:	d100      	bne.n	8007948 <memcpy+0xc>
 8007946:	4770      	bx	lr
 8007948:	b510      	push	{r4, lr}
 800794a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007952:	4291      	cmp	r1, r2
 8007954:	d1f9      	bne.n	800794a <memcpy+0xe>
 8007956:	bd10      	pop	{r4, pc}

08007958 <_realloc_r>:
 8007958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795c:	4607      	mov	r7, r0
 800795e:	4614      	mov	r4, r2
 8007960:	460d      	mov	r5, r1
 8007962:	b921      	cbnz	r1, 800796e <_realloc_r+0x16>
 8007964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007968:	4611      	mov	r1, r2
 800796a:	f7ff bc4d 	b.w	8007208 <_malloc_r>
 800796e:	b92a      	cbnz	r2, 800797c <_realloc_r+0x24>
 8007970:	f7ff fbde 	bl	8007130 <_free_r>
 8007974:	4625      	mov	r5, r4
 8007976:	4628      	mov	r0, r5
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	f000 f81a 	bl	80079b4 <_malloc_usable_size_r>
 8007980:	4284      	cmp	r4, r0
 8007982:	4606      	mov	r6, r0
 8007984:	d802      	bhi.n	800798c <_realloc_r+0x34>
 8007986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800798a:	d8f4      	bhi.n	8007976 <_realloc_r+0x1e>
 800798c:	4621      	mov	r1, r4
 800798e:	4638      	mov	r0, r7
 8007990:	f7ff fc3a 	bl	8007208 <_malloc_r>
 8007994:	4680      	mov	r8, r0
 8007996:	b908      	cbnz	r0, 800799c <_realloc_r+0x44>
 8007998:	4645      	mov	r5, r8
 800799a:	e7ec      	b.n	8007976 <_realloc_r+0x1e>
 800799c:	42b4      	cmp	r4, r6
 800799e:	4622      	mov	r2, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	bf28      	it	cs
 80079a4:	4632      	movcs	r2, r6
 80079a6:	f7ff ffc9 	bl	800793c <memcpy>
 80079aa:	4629      	mov	r1, r5
 80079ac:	4638      	mov	r0, r7
 80079ae:	f7ff fbbf 	bl	8007130 <_free_r>
 80079b2:	e7f1      	b.n	8007998 <_realloc_r+0x40>

080079b4 <_malloc_usable_size_r>:
 80079b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b8:	1f18      	subs	r0, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bfbc      	itt	lt
 80079be:	580b      	ldrlt	r3, [r1, r0]
 80079c0:	18c0      	addlt	r0, r0, r3
 80079c2:	4770      	bx	lr
 80079c4:	0000      	movs	r0, r0
	...

080079c8 <tan>:
 80079c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ca:	ec53 2b10 	vmov	r2, r3, d0
 80079ce:	4816      	ldr	r0, [pc, #88]	@ (8007a28 <tan+0x60>)
 80079d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80079d4:	4281      	cmp	r1, r0
 80079d6:	d807      	bhi.n	80079e8 <tan+0x20>
 80079d8:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8007a20 <tan+0x58>
 80079dc:	2001      	movs	r0, #1
 80079de:	b005      	add	sp, #20
 80079e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e4:	f000 b848 	b.w	8007a78 <__kernel_tan>
 80079e8:	4810      	ldr	r0, [pc, #64]	@ (8007a2c <tan+0x64>)
 80079ea:	4281      	cmp	r1, r0
 80079ec:	d908      	bls.n	8007a00 <tan+0x38>
 80079ee:	4610      	mov	r0, r2
 80079f0:	4619      	mov	r1, r3
 80079f2:	f7f8 fc41 	bl	8000278 <__aeabi_dsub>
 80079f6:	ec41 0b10 	vmov	d0, r0, r1
 80079fa:	b005      	add	sp, #20
 80079fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a00:	4668      	mov	r0, sp
 8007a02:	f000 fa3d 	bl	8007e80 <__ieee754_rem_pio2>
 8007a06:	0040      	lsls	r0, r0, #1
 8007a08:	f000 0002 	and.w	r0, r0, #2
 8007a0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a10:	ed9d 0b00 	vldr	d0, [sp]
 8007a14:	f1c0 0001 	rsb	r0, r0, #1
 8007a18:	f000 f82e 	bl	8007a78 <__kernel_tan>
 8007a1c:	e7ed      	b.n	80079fa <tan+0x32>
 8007a1e:	bf00      	nop
	...
 8007a28:	3fe921fb 	.word	0x3fe921fb
 8007a2c:	7fefffff 	.word	0x7fefffff

08007a30 <sqrtf>:
 8007a30:	b508      	push	{r3, lr}
 8007a32:	ed2d 8b02 	vpush	{d8}
 8007a36:	eeb0 8a40 	vmov.f32	s16, s0
 8007a3a:	f000 f817 	bl	8007a6c <__ieee754_sqrtf>
 8007a3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	d60c      	bvs.n	8007a62 <sqrtf+0x32>
 8007a48:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007a68 <sqrtf+0x38>
 8007a4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a54:	d505      	bpl.n	8007a62 <sqrtf+0x32>
 8007a56:	f7ff fb3f 	bl	80070d8 <__errno>
 8007a5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007a5e:	2321      	movs	r3, #33	@ 0x21
 8007a60:	6003      	str	r3, [r0, #0]
 8007a62:	ecbd 8b02 	vpop	{d8}
 8007a66:	bd08      	pop	{r3, pc}
 8007a68:	00000000 	.word	0x00000000

08007a6c <__ieee754_sqrtf>:
 8007a6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007a70:	4770      	bx	lr
 8007a72:	0000      	movs	r0, r0
 8007a74:	0000      	movs	r0, r0
	...

08007a78 <__kernel_tan>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	ec5b ab10 	vmov	sl, fp, d0
 8007a80:	4bdb      	ldr	r3, [pc, #876]	@ (8007df0 <__kernel_tan+0x378>)
 8007a82:	b089      	sub	sp, #36	@ 0x24
 8007a84:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8007a88:	429f      	cmp	r7, r3
 8007a8a:	ec59 8b11 	vmov	r8, r9, d1
 8007a8e:	4606      	mov	r6, r0
 8007a90:	f8cd b008 	str.w	fp, [sp, #8]
 8007a94:	d85d      	bhi.n	8007b52 <__kernel_tan+0xda>
 8007a96:	4650      	mov	r0, sl
 8007a98:	4659      	mov	r1, fp
 8007a9a:	f7f9 f83f 	bl	8000b1c <__aeabi_d2iz>
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d17c      	bne.n	8007b9e <__kernel_tan+0x126>
 8007aa4:	1c73      	adds	r3, r6, #1
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	433b      	orrs	r3, r7
 8007aac:	d110      	bne.n	8007ad0 <__kernel_tan+0x58>
 8007aae:	ec4b ab10 	vmov	d0, sl, fp
 8007ab2:	f000 fbe1 	bl	8008278 <fabs>
 8007ab6:	49cf      	ldr	r1, [pc, #828]	@ (8007df4 <__kernel_tan+0x37c>)
 8007ab8:	ec53 2b10 	vmov	r2, r3, d0
 8007abc:	2000      	movs	r0, #0
 8007abe:	f7f8 febd 	bl	800083c <__aeabi_ddiv>
 8007ac2:	4682      	mov	sl, r0
 8007ac4:	468b      	mov	fp, r1
 8007ac6:	ec4b ab10 	vmov	d0, sl, fp
 8007aca:	b009      	add	sp, #36	@ 0x24
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	2e01      	cmp	r6, #1
 8007ad2:	d0f8      	beq.n	8007ac6 <__kernel_tan+0x4e>
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	4650      	mov	r0, sl
 8007ada:	4659      	mov	r1, fp
 8007adc:	f7f8 fbce 	bl	800027c <__adddf3>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	49c3      	ldr	r1, [pc, #780]	@ (8007df8 <__kernel_tan+0x380>)
 8007aea:	f7f8 fea7 	bl	800083c <__aeabi_ddiv>
 8007aee:	e9cd 0100 	strd	r0, r1, [sp]
 8007af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af6:	462e      	mov	r6, r5
 8007af8:	4652      	mov	r2, sl
 8007afa:	462c      	mov	r4, r5
 8007afc:	4630      	mov	r0, r6
 8007afe:	461d      	mov	r5, r3
 8007b00:	4639      	mov	r1, r7
 8007b02:	465b      	mov	r3, fp
 8007b04:	f7f8 fbb8 	bl	8000278 <__aeabi_dsub>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f8 fbb2 	bl	8000278 <__aeabi_dsub>
 8007b14:	4632      	mov	r2, r6
 8007b16:	462b      	mov	r3, r5
 8007b18:	f7f8 fd66 	bl	80005e8 <__aeabi_dmul>
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4682      	mov	sl, r0
 8007b20:	468b      	mov	fp, r1
 8007b22:	462b      	mov	r3, r5
 8007b24:	4630      	mov	r0, r6
 8007b26:	4639      	mov	r1, r7
 8007b28:	f7f8 fd5e 	bl	80005e8 <__aeabi_dmul>
 8007b2c:	4bb1      	ldr	r3, [pc, #708]	@ (8007df4 <__kernel_tan+0x37c>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f7f8 fba4 	bl	800027c <__adddf3>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4650      	mov	r0, sl
 8007b3a:	4659      	mov	r1, fp
 8007b3c:	f7f8 fb9e 	bl	800027c <__adddf3>
 8007b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b44:	f7f8 fd50 	bl	80005e8 <__aeabi_dmul>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	f7f8 fb96 	bl	800027c <__adddf3>
 8007b50:	e7b7      	b.n	8007ac2 <__kernel_tan+0x4a>
 8007b52:	4baa      	ldr	r3, [pc, #680]	@ (8007dfc <__kernel_tan+0x384>)
 8007b54:	429f      	cmp	r7, r3
 8007b56:	d922      	bls.n	8007b9e <__kernel_tan+0x126>
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	da05      	bge.n	8007b6a <__kernel_tan+0xf2>
 8007b5e:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007b62:	469b      	mov	fp, r3
 8007b64:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007b68:	4699      	mov	r9, r3
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	465b      	mov	r3, fp
 8007b6e:	a182      	add	r1, pc, #520	@ (adr r1, 8007d78 <__kernel_tan+0x300>)
 8007b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b74:	f7f8 fb80 	bl	8000278 <__aeabi_dsub>
 8007b78:	4642      	mov	r2, r8
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	a17f      	add	r1, pc, #508	@ (adr r1, 8007d80 <__kernel_tan+0x308>)
 8007b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b86:	f7f8 fb77 	bl	8000278 <__aeabi_dsub>
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	f7f8 fb75 	bl	800027c <__adddf3>
 8007b92:	f04f 0800 	mov.w	r8, #0
 8007b96:	4682      	mov	sl, r0
 8007b98:	468b      	mov	fp, r1
 8007b9a:	f04f 0900 	mov.w	r9, #0
 8007b9e:	4652      	mov	r2, sl
 8007ba0:	465b      	mov	r3, fp
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	f7f8 fd1f 	bl	80005e8 <__aeabi_dmul>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	e9cd 2300 	strd	r2, r3, [sp]
 8007bb2:	f7f8 fd19 	bl	80005e8 <__aeabi_dmul>
 8007bb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bba:	4604      	mov	r4, r0
 8007bbc:	460d      	mov	r5, r1
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	4659      	mov	r1, fp
 8007bc2:	f7f8 fd11 	bl	80005e8 <__aeabi_dmul>
 8007bc6:	a370      	add	r3, pc, #448	@ (adr r3, 8007d88 <__kernel_tan+0x310>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f7f8 fd08 	bl	80005e8 <__aeabi_dmul>
 8007bd8:	a36d      	add	r3, pc, #436	@ (adr r3, 8007d90 <__kernel_tan+0x318>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fb4d 	bl	800027c <__adddf3>
 8007be2:	4622      	mov	r2, r4
 8007be4:	462b      	mov	r3, r5
 8007be6:	f7f8 fcff 	bl	80005e8 <__aeabi_dmul>
 8007bea:	a36b      	add	r3, pc, #428	@ (adr r3, 8007d98 <__kernel_tan+0x320>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fb44 	bl	800027c <__adddf3>
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f7f8 fcf6 	bl	80005e8 <__aeabi_dmul>
 8007bfc:	a368      	add	r3, pc, #416	@ (adr r3, 8007da0 <__kernel_tan+0x328>)
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fb3b 	bl	800027c <__adddf3>
 8007c06:	4622      	mov	r2, r4
 8007c08:	462b      	mov	r3, r5
 8007c0a:	f7f8 fced 	bl	80005e8 <__aeabi_dmul>
 8007c0e:	a366      	add	r3, pc, #408	@ (adr r3, 8007da8 <__kernel_tan+0x330>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f7f8 fb32 	bl	800027c <__adddf3>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	f7f8 fce4 	bl	80005e8 <__aeabi_dmul>
 8007c20:	a363      	add	r3, pc, #396	@ (adr r3, 8007db0 <__kernel_tan+0x338>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fb29 	bl	800027c <__adddf3>
 8007c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c2e:	f7f8 fcdb 	bl	80005e8 <__aeabi_dmul>
 8007c32:	a361      	add	r3, pc, #388	@ (adr r3, 8007db8 <__kernel_tan+0x340>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 fcd2 	bl	80005e8 <__aeabi_dmul>
 8007c44:	a35e      	add	r3, pc, #376	@ (adr r3, 8007dc0 <__kernel_tan+0x348>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fb17 	bl	800027c <__adddf3>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	f7f8 fcc9 	bl	80005e8 <__aeabi_dmul>
 8007c56:	a35c      	add	r3, pc, #368	@ (adr r3, 8007dc8 <__kernel_tan+0x350>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f7f8 fb0e 	bl	800027c <__adddf3>
 8007c60:	4622      	mov	r2, r4
 8007c62:	462b      	mov	r3, r5
 8007c64:	f7f8 fcc0 	bl	80005e8 <__aeabi_dmul>
 8007c68:	a359      	add	r3, pc, #356	@ (adr r3, 8007dd0 <__kernel_tan+0x358>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fb05 	bl	800027c <__adddf3>
 8007c72:	4622      	mov	r2, r4
 8007c74:	462b      	mov	r3, r5
 8007c76:	f7f8 fcb7 	bl	80005e8 <__aeabi_dmul>
 8007c7a:	a357      	add	r3, pc, #348	@ (adr r3, 8007dd8 <__kernel_tan+0x360>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 fafc 	bl	800027c <__adddf3>
 8007c84:	4622      	mov	r2, r4
 8007c86:	462b      	mov	r3, r5
 8007c88:	f7f8 fcae 	bl	80005e8 <__aeabi_dmul>
 8007c8c:	a354      	add	r3, pc, #336	@ (adr r3, 8007de0 <__kernel_tan+0x368>)
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f7f8 faf3 	bl	800027c <__adddf3>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c9e:	f7f8 faed 	bl	800027c <__adddf3>
 8007ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca6:	f7f8 fc9f 	bl	80005e8 <__aeabi_dmul>
 8007caa:	4642      	mov	r2, r8
 8007cac:	464b      	mov	r3, r9
 8007cae:	f7f8 fae5 	bl	800027c <__adddf3>
 8007cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb6:	f7f8 fc97 	bl	80005e8 <__aeabi_dmul>
 8007cba:	4642      	mov	r2, r8
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	f7f8 fadd 	bl	800027c <__adddf3>
 8007cc2:	a349      	add	r3, pc, #292	@ (adr r3, 8007de8 <__kernel_tan+0x370>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	4604      	mov	r4, r0
 8007cca:	460d      	mov	r5, r1
 8007ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd0:	f7f8 fc8a 	bl	80005e8 <__aeabi_dmul>
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	462b      	mov	r3, r5
 8007cd8:	f7f8 fad0 	bl	800027c <__adddf3>
 8007cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	f7f8 fac8 	bl	800027c <__adddf3>
 8007cec:	4b43      	ldr	r3, [pc, #268]	@ (8007dfc <__kernel_tan+0x384>)
 8007cee:	429f      	cmp	r7, r3
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	f240 8084 	bls.w	8007e00 <__kernel_tan+0x388>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	f7f8 fc0b 	bl	8000514 <__aeabi_i2d>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4680      	mov	r8, r0
 8007d02:	4689      	mov	r9, r1
 8007d04:	462b      	mov	r3, r5
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fc6d 	bl	80005e8 <__aeabi_dmul>
 8007d0e:	4642      	mov	r2, r8
 8007d10:	4606      	mov	r6, r0
 8007d12:	460f      	mov	r7, r1
 8007d14:	464b      	mov	r3, r9
 8007d16:	4620      	mov	r0, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7f8 faaf 	bl	800027c <__adddf3>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 fd89 	bl	800083c <__aeabi_ddiv>
 8007d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2e:	f7f8 faa3 	bl	8000278 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4650      	mov	r0, sl
 8007d38:	4659      	mov	r1, fp
 8007d3a:	f7f8 fa9d 	bl	8000278 <__aeabi_dsub>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	f7f8 fa9b 	bl	800027c <__adddf3>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 fa93 	bl	8000278 <__aeabi_dsub>
 8007d52:	9b02      	ldr	r3, [sp, #8]
 8007d54:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8007d58:	f00a 0a02 	and.w	sl, sl, #2
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	f1ca 0001 	rsb	r0, sl, #1
 8007d62:	460d      	mov	r5, r1
 8007d64:	f7f8 fbd6 	bl	8000514 <__aeabi_i2d>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	f7f8 fc3a 	bl	80005e8 <__aeabi_dmul>
 8007d74:	e6a5      	b.n	8007ac2 <__kernel_tan+0x4a>
 8007d76:	bf00      	nop
 8007d78:	54442d18 	.word	0x54442d18
 8007d7c:	3fe921fb 	.word	0x3fe921fb
 8007d80:	33145c07 	.word	0x33145c07
 8007d84:	3c81a626 	.word	0x3c81a626
 8007d88:	74bf7ad4 	.word	0x74bf7ad4
 8007d8c:	3efb2a70 	.word	0x3efb2a70
 8007d90:	32f0a7e9 	.word	0x32f0a7e9
 8007d94:	3f12b80f 	.word	0x3f12b80f
 8007d98:	1a8d1068 	.word	0x1a8d1068
 8007d9c:	3f3026f7 	.word	0x3f3026f7
 8007da0:	fee08315 	.word	0xfee08315
 8007da4:	3f57dbc8 	.word	0x3f57dbc8
 8007da8:	e96e8493 	.word	0xe96e8493
 8007dac:	3f8226e3 	.word	0x3f8226e3
 8007db0:	1bb341fe 	.word	0x1bb341fe
 8007db4:	3faba1ba 	.word	0x3faba1ba
 8007db8:	db605373 	.word	0xdb605373
 8007dbc:	bef375cb 	.word	0xbef375cb
 8007dc0:	a03792a6 	.word	0xa03792a6
 8007dc4:	3f147e88 	.word	0x3f147e88
 8007dc8:	f2f26501 	.word	0xf2f26501
 8007dcc:	3f4344d8 	.word	0x3f4344d8
 8007dd0:	c9560328 	.word	0xc9560328
 8007dd4:	3f6d6d22 	.word	0x3f6d6d22
 8007dd8:	8406d637 	.word	0x8406d637
 8007ddc:	3f9664f4 	.word	0x3f9664f4
 8007de0:	1110fe7a 	.word	0x1110fe7a
 8007de4:	3fc11111 	.word	0x3fc11111
 8007de8:	55555563 	.word	0x55555563
 8007dec:	3fd55555 	.word	0x3fd55555
 8007df0:	3e2fffff 	.word	0x3e2fffff
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	bff00000 	.word	0xbff00000
 8007dfc:	3fe59427 	.word	0x3fe59427
 8007e00:	2e01      	cmp	r6, #1
 8007e02:	d033      	beq.n	8007e6c <__kernel_tan+0x3f4>
 8007e04:	f04f 0800 	mov.w	r8, #0
 8007e08:	4689      	mov	r9, r1
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	2000      	movs	r0, #0
 8007e10:	4918      	ldr	r1, [pc, #96]	@ (8007e74 <__kernel_tan+0x3fc>)
 8007e12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007e16:	f7f8 fd11 	bl	800083c <__aeabi_ddiv>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	465b      	mov	r3, fp
 8007e20:	4606      	mov	r6, r0
 8007e22:	460d      	mov	r5, r1
 8007e24:	4640      	mov	r0, r8
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 fa26 	bl	8000278 <__aeabi_dsub>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e34:	f7f8 fa20 	bl	8000278 <__aeabi_dsub>
 8007e38:	4642      	mov	r2, r8
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	f7f8 fbd4 	bl	80005e8 <__aeabi_dmul>
 8007e40:	4642      	mov	r2, r8
 8007e42:	4682      	mov	sl, r0
 8007e44:	468b      	mov	fp, r1
 8007e46:	463b      	mov	r3, r7
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7f8 fbcc 	bl	80005e8 <__aeabi_dmul>
 8007e50:	4b09      	ldr	r3, [pc, #36]	@ (8007e78 <__kernel_tan+0x400>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	f7f8 fa12 	bl	800027c <__adddf3>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4650      	mov	r0, sl
 8007e5e:	4659      	mov	r1, fp
 8007e60:	f7f8 fa0c 	bl	800027c <__adddf3>
 8007e64:	4644      	mov	r4, r8
 8007e66:	4632      	mov	r2, r6
 8007e68:	463b      	mov	r3, r7
 8007e6a:	e66b      	b.n	8007b44 <__kernel_tan+0xcc>
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	468b      	mov	fp, r1
 8007e70:	e629      	b.n	8007ac6 <__kernel_tan+0x4e>
 8007e72:	bf00      	nop
 8007e74:	bff00000 	.word	0xbff00000
 8007e78:	3ff00000 	.word	0x3ff00000
 8007e7c:	00000000 	.word	0x00000000

08007e80 <__ieee754_rem_pio2>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	ec57 6b10 	vmov	r6, r7, d0
 8007e88:	4bc5      	ldr	r3, [pc, #788]	@ (80081a0 <__ieee754_rem_pio2+0x320>)
 8007e8a:	b08d      	sub	sp, #52	@ 0x34
 8007e8c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007e90:	4598      	cmp	r8, r3
 8007e92:	4604      	mov	r4, r0
 8007e94:	9704      	str	r7, [sp, #16]
 8007e96:	d807      	bhi.n	8007ea8 <__ieee754_rem_pio2+0x28>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	ed80 0b00 	vstr	d0, [r0]
 8007ea0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007ea4:	2500      	movs	r5, #0
 8007ea6:	e028      	b.n	8007efa <__ieee754_rem_pio2+0x7a>
 8007ea8:	4bbe      	ldr	r3, [pc, #760]	@ (80081a4 <__ieee754_rem_pio2+0x324>)
 8007eaa:	4598      	cmp	r8, r3
 8007eac:	d878      	bhi.n	8007fa0 <__ieee754_rem_pio2+0x120>
 8007eae:	9b04      	ldr	r3, [sp, #16]
 8007eb0:	4dbd      	ldr	r5, [pc, #756]	@ (80081a8 <__ieee754_rem_pio2+0x328>)
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008168 <__ieee754_rem_pio2+0x2e8>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	dd38      	ble.n	8007f32 <__ieee754_rem_pio2+0xb2>
 8007ec0:	f7f8 f9da 	bl	8000278 <__aeabi_dsub>
 8007ec4:	45a8      	cmp	r8, r5
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	d01a      	beq.n	8007f02 <__ieee754_rem_pio2+0x82>
 8007ecc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008170 <__ieee754_rem_pio2+0x2f0>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f7f8 f9d1 	bl	8000278 <__aeabi_dsub>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4680      	mov	r8, r0
 8007edc:	4689      	mov	r9, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 f9c9 	bl	8000278 <__aeabi_dsub>
 8007ee6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008170 <__ieee754_rem_pio2+0x2f0>)
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	f7f8 f9c4 	bl	8000278 <__aeabi_dsub>
 8007ef0:	e9c4 8900 	strd	r8, r9, [r4]
 8007ef4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ef8:	2501      	movs	r5, #1
 8007efa:	4628      	mov	r0, r5
 8007efc:	b00d      	add	sp, #52	@ 0x34
 8007efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f02:	a39d      	add	r3, pc, #628	@ (adr r3, 8008178 <__ieee754_rem_pio2+0x2f8>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 f9b6 	bl	8000278 <__aeabi_dsub>
 8007f0c:	a39c      	add	r3, pc, #624	@ (adr r3, 8008180 <__ieee754_rem_pio2+0x300>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	4606      	mov	r6, r0
 8007f14:	460f      	mov	r7, r1
 8007f16:	f7f8 f9af 	bl	8000278 <__aeabi_dsub>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4680      	mov	r8, r0
 8007f20:	4689      	mov	r9, r1
 8007f22:	4630      	mov	r0, r6
 8007f24:	4639      	mov	r1, r7
 8007f26:	f7f8 f9a7 	bl	8000278 <__aeabi_dsub>
 8007f2a:	a395      	add	r3, pc, #596	@ (adr r3, 8008180 <__ieee754_rem_pio2+0x300>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	e7dc      	b.n	8007eec <__ieee754_rem_pio2+0x6c>
 8007f32:	f7f8 f9a3 	bl	800027c <__adddf3>
 8007f36:	45a8      	cmp	r8, r5
 8007f38:	4606      	mov	r6, r0
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	d018      	beq.n	8007f70 <__ieee754_rem_pio2+0xf0>
 8007f3e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008170 <__ieee754_rem_pio2+0x2f0>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 f99a 	bl	800027c <__adddf3>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	4689      	mov	r9, r1
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 f990 	bl	8000278 <__aeabi_dsub>
 8007f58:	a385      	add	r3, pc, #532	@ (adr r3, 8008170 <__ieee754_rem_pio2+0x2f0>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 f98d 	bl	800027c <__adddf3>
 8007f62:	f04f 35ff 	mov.w	r5, #4294967295
 8007f66:	e9c4 8900 	strd	r8, r9, [r4]
 8007f6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f6e:	e7c4      	b.n	8007efa <__ieee754_rem_pio2+0x7a>
 8007f70:	a381      	add	r3, pc, #516	@ (adr r3, 8008178 <__ieee754_rem_pio2+0x2f8>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f981 	bl	800027c <__adddf3>
 8007f7a:	a381      	add	r3, pc, #516	@ (adr r3, 8008180 <__ieee754_rem_pio2+0x300>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	f7f8 f97a 	bl	800027c <__adddf3>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4689      	mov	r9, r1
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 f970 	bl	8000278 <__aeabi_dsub>
 8007f98:	a379      	add	r3, pc, #484	@ (adr r3, 8008180 <__ieee754_rem_pio2+0x300>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	e7de      	b.n	8007f5e <__ieee754_rem_pio2+0xde>
 8007fa0:	4b82      	ldr	r3, [pc, #520]	@ (80081ac <__ieee754_rem_pio2+0x32c>)
 8007fa2:	4598      	cmp	r8, r3
 8007fa4:	f200 80d1 	bhi.w	800814a <__ieee754_rem_pio2+0x2ca>
 8007fa8:	f000 f966 	bl	8008278 <fabs>
 8007fac:	ec57 6b10 	vmov	r6, r7, d0
 8007fb0:	a375      	add	r3, pc, #468	@ (adr r3, 8008188 <__ieee754_rem_pio2+0x308>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	f7f8 fb15 	bl	80005e8 <__aeabi_dmul>
 8007fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80081b0 <__ieee754_rem_pio2+0x330>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f7f8 f95b 	bl	800027c <__adddf3>
 8007fc6:	f7f8 fda9 	bl	8000b1c <__aeabi_d2iz>
 8007fca:	4605      	mov	r5, r0
 8007fcc:	f7f8 faa2 	bl	8000514 <__aeabi_i2d>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd8:	a363      	add	r3, pc, #396	@ (adr r3, 8008168 <__ieee754_rem_pio2+0x2e8>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fb03 	bl	80005e8 <__aeabi_dmul>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 f945 	bl	8000278 <__aeabi_dsub>
 8007fee:	a360      	add	r3, pc, #384	@ (adr r3, 8008170 <__ieee754_rem_pio2+0x2f0>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	468b      	mov	fp, r1
 8007ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffc:	f7f8 faf4 	bl	80005e8 <__aeabi_dmul>
 8008000:	2d1f      	cmp	r5, #31
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	dc0c      	bgt.n	8008022 <__ieee754_rem_pio2+0x1a2>
 8008008:	4b6a      	ldr	r3, [pc, #424]	@ (80081b4 <__ieee754_rem_pio2+0x334>)
 800800a:	1e6a      	subs	r2, r5, #1
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	4543      	cmp	r3, r8
 8008012:	d006      	beq.n	8008022 <__ieee754_rem_pio2+0x1a2>
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	4650      	mov	r0, sl
 800801a:	4659      	mov	r1, fp
 800801c:	f7f8 f92c 	bl	8000278 <__aeabi_dsub>
 8008020:	e00e      	b.n	8008040 <__ieee754_rem_pio2+0x1c0>
 8008022:	463b      	mov	r3, r7
 8008024:	4632      	mov	r2, r6
 8008026:	4650      	mov	r0, sl
 8008028:	4659      	mov	r1, fp
 800802a:	f7f8 f925 	bl	8000278 <__aeabi_dsub>
 800802e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008038:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800803c:	2b10      	cmp	r3, #16
 800803e:	dc02      	bgt.n	8008046 <__ieee754_rem_pio2+0x1c6>
 8008040:	e9c4 0100 	strd	r0, r1, [r4]
 8008044:	e039      	b.n	80080ba <__ieee754_rem_pio2+0x23a>
 8008046:	a34c      	add	r3, pc, #304	@ (adr r3, 8008178 <__ieee754_rem_pio2+0x2f8>)
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008050:	f7f8 faca 	bl	80005e8 <__aeabi_dmul>
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4650      	mov	r0, sl
 800805e:	4659      	mov	r1, fp
 8008060:	f7f8 f90a 	bl	8000278 <__aeabi_dsub>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4680      	mov	r8, r0
 800806a:	4689      	mov	r9, r1
 800806c:	4650      	mov	r0, sl
 800806e:	4659      	mov	r1, fp
 8008070:	f7f8 f902 	bl	8000278 <__aeabi_dsub>
 8008074:	4632      	mov	r2, r6
 8008076:	463b      	mov	r3, r7
 8008078:	f7f8 f8fe 	bl	8000278 <__aeabi_dsub>
 800807c:	a340      	add	r3, pc, #256	@ (adr r3, 8008180 <__ieee754_rem_pio2+0x300>)
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	4606      	mov	r6, r0
 8008084:	460f      	mov	r7, r1
 8008086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808a:	f7f8 faad 	bl	80005e8 <__aeabi_dmul>
 800808e:	4632      	mov	r2, r6
 8008090:	463b      	mov	r3, r7
 8008092:	f7f8 f8f1 	bl	8000278 <__aeabi_dsub>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 f8e9 	bl	8000278 <__aeabi_dsub>
 80080a6:	9a05      	ldr	r2, [sp, #20]
 80080a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b31      	cmp	r3, #49	@ 0x31
 80080b0:	dc20      	bgt.n	80080f4 <__ieee754_rem_pio2+0x274>
 80080b2:	e9c4 0100 	strd	r0, r1, [r4]
 80080b6:	46c2      	mov	sl, r8
 80080b8:	46cb      	mov	fp, r9
 80080ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80080be:	4650      	mov	r0, sl
 80080c0:	4642      	mov	r2, r8
 80080c2:	464b      	mov	r3, r9
 80080c4:	4659      	mov	r1, fp
 80080c6:	f7f8 f8d7 	bl	8000278 <__aeabi_dsub>
 80080ca:	463b      	mov	r3, r7
 80080cc:	4632      	mov	r2, r6
 80080ce:	f7f8 f8d3 	bl	8000278 <__aeabi_dsub>
 80080d2:	9b04      	ldr	r3, [sp, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80080da:	f6bf af0e 	bge.w	8007efa <__ieee754_rem_pio2+0x7a>
 80080de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80080e2:	6063      	str	r3, [r4, #4]
 80080e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080e8:	f8c4 8000 	str.w	r8, [r4]
 80080ec:	60a0      	str	r0, [r4, #8]
 80080ee:	60e3      	str	r3, [r4, #12]
 80080f0:	426d      	negs	r5, r5
 80080f2:	e702      	b.n	8007efa <__ieee754_rem_pio2+0x7a>
 80080f4:	a326      	add	r3, pc, #152	@ (adr r3, 8008190 <__ieee754_rem_pio2+0x310>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fe:	f7f8 fa73 	bl	80005e8 <__aeabi_dmul>
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4640      	mov	r0, r8
 800810c:	4649      	mov	r1, r9
 800810e:	f7f8 f8b3 	bl	8000278 <__aeabi_dsub>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4682      	mov	sl, r0
 8008118:	468b      	mov	fp, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 f8ab 	bl	8000278 <__aeabi_dsub>
 8008122:	4632      	mov	r2, r6
 8008124:	463b      	mov	r3, r7
 8008126:	f7f8 f8a7 	bl	8000278 <__aeabi_dsub>
 800812a:	a31b      	add	r3, pc, #108	@ (adr r3, 8008198 <__ieee754_rem_pio2+0x318>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	4606      	mov	r6, r0
 8008132:	460f      	mov	r7, r1
 8008134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008138:	f7f8 fa56 	bl	80005e8 <__aeabi_dmul>
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	f7f8 f89a 	bl	8000278 <__aeabi_dsub>
 8008144:	4606      	mov	r6, r0
 8008146:	460f      	mov	r7, r1
 8008148:	e764      	b.n	8008014 <__ieee754_rem_pio2+0x194>
 800814a:	4b1b      	ldr	r3, [pc, #108]	@ (80081b8 <__ieee754_rem_pio2+0x338>)
 800814c:	4598      	cmp	r8, r3
 800814e:	d935      	bls.n	80081bc <__ieee754_rem_pio2+0x33c>
 8008150:	4632      	mov	r2, r6
 8008152:	463b      	mov	r3, r7
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 f88e 	bl	8000278 <__aeabi_dsub>
 800815c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008160:	e9c4 0100 	strd	r0, r1, [r4]
 8008164:	e69e      	b.n	8007ea4 <__ieee754_rem_pio2+0x24>
 8008166:	bf00      	nop
 8008168:	54400000 	.word	0x54400000
 800816c:	3ff921fb 	.word	0x3ff921fb
 8008170:	1a626331 	.word	0x1a626331
 8008174:	3dd0b461 	.word	0x3dd0b461
 8008178:	1a600000 	.word	0x1a600000
 800817c:	3dd0b461 	.word	0x3dd0b461
 8008180:	2e037073 	.word	0x2e037073
 8008184:	3ba3198a 	.word	0x3ba3198a
 8008188:	6dc9c883 	.word	0x6dc9c883
 800818c:	3fe45f30 	.word	0x3fe45f30
 8008190:	2e000000 	.word	0x2e000000
 8008194:	3ba3198a 	.word	0x3ba3198a
 8008198:	252049c1 	.word	0x252049c1
 800819c:	397b839a 	.word	0x397b839a
 80081a0:	3fe921fb 	.word	0x3fe921fb
 80081a4:	4002d97b 	.word	0x4002d97b
 80081a8:	3ff921fb 	.word	0x3ff921fb
 80081ac:	413921fb 	.word	0x413921fb
 80081b0:	3fe00000 	.word	0x3fe00000
 80081b4:	0800c5d0 	.word	0x0800c5d0
 80081b8:	7fefffff 	.word	0x7fefffff
 80081bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80081c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80081c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80081c8:	4630      	mov	r0, r6
 80081ca:	460f      	mov	r7, r1
 80081cc:	f7f8 fca6 	bl	8000b1c <__aeabi_d2iz>
 80081d0:	f7f8 f9a0 	bl	8000514 <__aeabi_i2d>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4630      	mov	r0, r6
 80081da:	4639      	mov	r1, r7
 80081dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081e0:	f7f8 f84a 	bl	8000278 <__aeabi_dsub>
 80081e4:	4b22      	ldr	r3, [pc, #136]	@ (8008270 <__ieee754_rem_pio2+0x3f0>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	f7f8 f9fe 	bl	80005e8 <__aeabi_dmul>
 80081ec:	460f      	mov	r7, r1
 80081ee:	4606      	mov	r6, r0
 80081f0:	f7f8 fc94 	bl	8000b1c <__aeabi_d2iz>
 80081f4:	f7f8 f98e 	bl	8000514 <__aeabi_i2d>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008204:	f7f8 f838 	bl	8000278 <__aeabi_dsub>
 8008208:	4b19      	ldr	r3, [pc, #100]	@ (8008270 <__ieee754_rem_pio2+0x3f0>)
 800820a:	2200      	movs	r2, #0
 800820c:	f7f8 f9ec 	bl	80005e8 <__aeabi_dmul>
 8008210:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008214:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008218:	f04f 0803 	mov.w	r8, #3
 800821c:	2600      	movs	r6, #0
 800821e:	2700      	movs	r7, #0
 8008220:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008224:	4632      	mov	r2, r6
 8008226:	463b      	mov	r3, r7
 8008228:	46c2      	mov	sl, r8
 800822a:	f108 38ff 	add.w	r8, r8, #4294967295
 800822e:	f7f8 fc43 	bl	8000ab8 <__aeabi_dcmpeq>
 8008232:	2800      	cmp	r0, #0
 8008234:	d1f4      	bne.n	8008220 <__ieee754_rem_pio2+0x3a0>
 8008236:	4b0f      	ldr	r3, [pc, #60]	@ (8008274 <__ieee754_rem_pio2+0x3f4>)
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	2302      	movs	r3, #2
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	462a      	mov	r2, r5
 8008240:	4653      	mov	r3, sl
 8008242:	4621      	mov	r1, r4
 8008244:	a806      	add	r0, sp, #24
 8008246:	f000 f81f 	bl	8008288 <__kernel_rem_pio2>
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	4605      	mov	r5, r0
 8008250:	f6bf ae53 	bge.w	8007efa <__ieee754_rem_pio2+0x7a>
 8008254:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800825c:	e9c4 2300 	strd	r2, r3, [r4]
 8008260:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008268:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800826c:	e740      	b.n	80080f0 <__ieee754_rem_pio2+0x270>
 800826e:	bf00      	nop
 8008270:	41700000 	.word	0x41700000
 8008274:	0800c650 	.word	0x0800c650

08008278 <fabs>:
 8008278:	ec51 0b10 	vmov	r0, r1, d0
 800827c:	4602      	mov	r2, r0
 800827e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008282:	ec43 2b10 	vmov	d0, r2, r3
 8008286:	4770      	bx	lr

08008288 <__kernel_rem_pio2>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	ed2d 8b02 	vpush	{d8}
 8008290:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008294:	f112 0f14 	cmn.w	r2, #20
 8008298:	9306      	str	r3, [sp, #24]
 800829a:	9104      	str	r1, [sp, #16]
 800829c:	4bc2      	ldr	r3, [pc, #776]	@ (80085a8 <__kernel_rem_pio2+0x320>)
 800829e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80082a0:	9008      	str	r0, [sp, #32]
 80082a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80082ae:	bfa8      	it	ge
 80082b0:	1ed4      	subge	r4, r2, #3
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	bfb2      	itee	lt
 80082b6:	2400      	movlt	r4, #0
 80082b8:	2318      	movge	r3, #24
 80082ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80082be:	f06f 0317 	mvn.w	r3, #23
 80082c2:	fb04 3303 	mla	r3, r4, r3, r3
 80082c6:	eb03 0b02 	add.w	fp, r3, r2
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	9a05      	ldr	r2, [sp, #20]
 80082ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8008598 <__kernel_rem_pio2+0x310>
 80082d2:	eb03 0802 	add.w	r8, r3, r2
 80082d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80082d8:	1aa7      	subs	r7, r4, r2
 80082da:	ae20      	add	r6, sp, #128	@ 0x80
 80082dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80082e0:	2500      	movs	r5, #0
 80082e2:	4545      	cmp	r5, r8
 80082e4:	dd12      	ble.n	800830c <__kernel_rem_pio2+0x84>
 80082e6:	9b06      	ldr	r3, [sp, #24]
 80082e8:	aa20      	add	r2, sp, #128	@ 0x80
 80082ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80082ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80082f2:	2700      	movs	r7, #0
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	429f      	cmp	r7, r3
 80082f8:	dc2e      	bgt.n	8008358 <__kernel_rem_pio2+0xd0>
 80082fa:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8008598 <__kernel_rem_pio2+0x310>
 80082fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008302:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008306:	46a8      	mov	r8, r5
 8008308:	2600      	movs	r6, #0
 800830a:	e01b      	b.n	8008344 <__kernel_rem_pio2+0xbc>
 800830c:	42ef      	cmn	r7, r5
 800830e:	d407      	bmi.n	8008320 <__kernel_rem_pio2+0x98>
 8008310:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008314:	f7f8 f8fe 	bl	8000514 <__aeabi_i2d>
 8008318:	e8e6 0102 	strd	r0, r1, [r6], #8
 800831c:	3501      	adds	r5, #1
 800831e:	e7e0      	b.n	80082e2 <__kernel_rem_pio2+0x5a>
 8008320:	ec51 0b18 	vmov	r0, r1, d8
 8008324:	e7f8      	b.n	8008318 <__kernel_rem_pio2+0x90>
 8008326:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800832a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800832e:	f7f8 f95b 	bl	80005e8 <__aeabi_dmul>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800833a:	f7f7 ff9f 	bl	800027c <__adddf3>
 800833e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008342:	3601      	adds	r6, #1
 8008344:	9b05      	ldr	r3, [sp, #20]
 8008346:	429e      	cmp	r6, r3
 8008348:	dded      	ble.n	8008326 <__kernel_rem_pio2+0x9e>
 800834a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800834e:	3701      	adds	r7, #1
 8008350:	ecaa 7b02 	vstmia	sl!, {d7}
 8008354:	3508      	adds	r5, #8
 8008356:	e7cd      	b.n	80082f4 <__kernel_rem_pio2+0x6c>
 8008358:	9b00      	ldr	r3, [sp, #0]
 800835a:	f8dd 8000 	ldr.w	r8, [sp]
 800835e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008364:	930a      	str	r3, [sp, #40]	@ 0x28
 8008366:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008368:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800836c:	9309      	str	r3, [sp, #36]	@ 0x24
 800836e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008372:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008374:	ab98      	add	r3, sp, #608	@ 0x260
 8008376:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800837a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800837e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008382:	ac0c      	add	r4, sp, #48	@ 0x30
 8008384:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008386:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800838a:	46a1      	mov	r9, r4
 800838c:	46c2      	mov	sl, r8
 800838e:	f1ba 0f00 	cmp.w	sl, #0
 8008392:	dc77      	bgt.n	8008484 <__kernel_rem_pio2+0x1fc>
 8008394:	4658      	mov	r0, fp
 8008396:	ed9d 0b02 	vldr	d0, [sp, #8]
 800839a:	f000 fac5 	bl	8008928 <scalbn>
 800839e:	ec57 6b10 	vmov	r6, r7, d0
 80083a2:	2200      	movs	r2, #0
 80083a4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 f91c 	bl	80005e8 <__aeabi_dmul>
 80083b0:	ec41 0b10 	vmov	d0, r0, r1
 80083b4:	f000 fb34 	bl	8008a20 <floor>
 80083b8:	4b7c      	ldr	r3, [pc, #496]	@ (80085ac <__kernel_rem_pio2+0x324>)
 80083ba:	ec51 0b10 	vmov	r0, r1, d0
 80083be:	2200      	movs	r2, #0
 80083c0:	f7f8 f912 	bl	80005e8 <__aeabi_dmul>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	4630      	mov	r0, r6
 80083ca:	4639      	mov	r1, r7
 80083cc:	f7f7 ff54 	bl	8000278 <__aeabi_dsub>
 80083d0:	460f      	mov	r7, r1
 80083d2:	4606      	mov	r6, r0
 80083d4:	f7f8 fba2 	bl	8000b1c <__aeabi_d2iz>
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	f7f8 f89b 	bl	8000514 <__aeabi_i2d>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f7 ff47 	bl	8000278 <__aeabi_dsub>
 80083ea:	f1bb 0f00 	cmp.w	fp, #0
 80083ee:	4606      	mov	r6, r0
 80083f0:	460f      	mov	r7, r1
 80083f2:	dd6c      	ble.n	80084ce <__kernel_rem_pio2+0x246>
 80083f4:	f108 31ff 	add.w	r1, r8, #4294967295
 80083f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80083fa:	9d02      	ldr	r5, [sp, #8]
 80083fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008400:	f1cb 0018 	rsb	r0, fp, #24
 8008404:	fa43 f200 	asr.w	r2, r3, r0
 8008408:	4415      	add	r5, r2
 800840a:	4082      	lsls	r2, r0
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008410:	9502      	str	r5, [sp, #8]
 8008412:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008416:	f1cb 0217 	rsb	r2, fp, #23
 800841a:	fa43 f902 	asr.w	r9, r3, r2
 800841e:	f1b9 0f00 	cmp.w	r9, #0
 8008422:	dd64      	ble.n	80084ee <__kernel_rem_pio2+0x266>
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	3301      	adds	r3, #1
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	4615      	mov	r5, r2
 800842e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008432:	4590      	cmp	r8, r2
 8008434:	f300 80a1 	bgt.w	800857a <__kernel_rem_pio2+0x2f2>
 8008438:	f1bb 0f00 	cmp.w	fp, #0
 800843c:	dd07      	ble.n	800844e <__kernel_rem_pio2+0x1c6>
 800843e:	f1bb 0f01 	cmp.w	fp, #1
 8008442:	f000 80c1 	beq.w	80085c8 <__kernel_rem_pio2+0x340>
 8008446:	f1bb 0f02 	cmp.w	fp, #2
 800844a:	f000 80c8 	beq.w	80085de <__kernel_rem_pio2+0x356>
 800844e:	f1b9 0f02 	cmp.w	r9, #2
 8008452:	d14c      	bne.n	80084ee <__kernel_rem_pio2+0x266>
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	4955      	ldr	r1, [pc, #340]	@ (80085b0 <__kernel_rem_pio2+0x328>)
 800845a:	2000      	movs	r0, #0
 800845c:	f7f7 ff0c 	bl	8000278 <__aeabi_dsub>
 8008460:	4606      	mov	r6, r0
 8008462:	460f      	mov	r7, r1
 8008464:	2d00      	cmp	r5, #0
 8008466:	d042      	beq.n	80084ee <__kernel_rem_pio2+0x266>
 8008468:	4658      	mov	r0, fp
 800846a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80085a0 <__kernel_rem_pio2+0x318>
 800846e:	f000 fa5b 	bl	8008928 <scalbn>
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	ec53 2b10 	vmov	r2, r3, d0
 800847a:	f7f7 fefd 	bl	8000278 <__aeabi_dsub>
 800847e:	4606      	mov	r6, r0
 8008480:	460f      	mov	r7, r1
 8008482:	e034      	b.n	80084ee <__kernel_rem_pio2+0x266>
 8008484:	4b4b      	ldr	r3, [pc, #300]	@ (80085b4 <__kernel_rem_pio2+0x32c>)
 8008486:	2200      	movs	r2, #0
 8008488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848c:	f7f8 f8ac 	bl	80005e8 <__aeabi_dmul>
 8008490:	f7f8 fb44 	bl	8000b1c <__aeabi_d2iz>
 8008494:	f7f8 f83e 	bl	8000514 <__aeabi_i2d>
 8008498:	4b47      	ldr	r3, [pc, #284]	@ (80085b8 <__kernel_rem_pio2+0x330>)
 800849a:	2200      	movs	r2, #0
 800849c:	4606      	mov	r6, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	f7f8 f8a2 	bl	80005e8 <__aeabi_dmul>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ac:	f7f7 fee4 	bl	8000278 <__aeabi_dsub>
 80084b0:	f7f8 fb34 	bl	8000b1c <__aeabi_d2iz>
 80084b4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80084b8:	f849 0b04 	str.w	r0, [r9], #4
 80084bc:	4639      	mov	r1, r7
 80084be:	4630      	mov	r0, r6
 80084c0:	f7f7 fedc 	bl	800027c <__adddf3>
 80084c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084cc:	e75f      	b.n	800838e <__kernel_rem_pio2+0x106>
 80084ce:	d107      	bne.n	80084e0 <__kernel_rem_pio2+0x258>
 80084d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80084d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80084d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084da:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80084de:	e79e      	b.n	800841e <__kernel_rem_pio2+0x196>
 80084e0:	4b36      	ldr	r3, [pc, #216]	@ (80085bc <__kernel_rem_pio2+0x334>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	f7f8 fb06 	bl	8000af4 <__aeabi_dcmpge>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d143      	bne.n	8008574 <__kernel_rem_pio2+0x2ec>
 80084ec:	4681      	mov	r9, r0
 80084ee:	2200      	movs	r2, #0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 fadf 	bl	8000ab8 <__aeabi_dcmpeq>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f000 80c1 	beq.w	8008682 <__kernel_rem_pio2+0x3fa>
 8008500:	f108 33ff 	add.w	r3, r8, #4294967295
 8008504:	2200      	movs	r2, #0
 8008506:	9900      	ldr	r1, [sp, #0]
 8008508:	428b      	cmp	r3, r1
 800850a:	da70      	bge.n	80085ee <__kernel_rem_pio2+0x366>
 800850c:	2a00      	cmp	r2, #0
 800850e:	f000 808b 	beq.w	8008628 <__kernel_rem_pio2+0x3a0>
 8008512:	f108 38ff 	add.w	r8, r8, #4294967295
 8008516:	ab0c      	add	r3, sp, #48	@ 0x30
 8008518:	f1ab 0b18 	sub.w	fp, fp, #24
 800851c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0f6      	beq.n	8008512 <__kernel_rem_pio2+0x28a>
 8008524:	4658      	mov	r0, fp
 8008526:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80085a0 <__kernel_rem_pio2+0x318>
 800852a:	f000 f9fd 	bl	8008928 <scalbn>
 800852e:	f108 0301 	add.w	r3, r8, #1
 8008532:	00da      	lsls	r2, r3, #3
 8008534:	9205      	str	r2, [sp, #20]
 8008536:	ec55 4b10 	vmov	r4, r5, d0
 800853a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800853c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80085b4 <__kernel_rem_pio2+0x32c>
 8008540:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008544:	4646      	mov	r6, r8
 8008546:	f04f 0a00 	mov.w	sl, #0
 800854a:	2e00      	cmp	r6, #0
 800854c:	f280 80d1 	bge.w	80086f2 <__kernel_rem_pio2+0x46a>
 8008550:	4644      	mov	r4, r8
 8008552:	2c00      	cmp	r4, #0
 8008554:	f2c0 80ff 	blt.w	8008756 <__kernel_rem_pio2+0x4ce>
 8008558:	4b19      	ldr	r3, [pc, #100]	@ (80085c0 <__kernel_rem_pio2+0x338>)
 800855a:	461f      	mov	r7, r3
 800855c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800855e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008562:	9306      	str	r3, [sp, #24]
 8008564:	f04f 0a00 	mov.w	sl, #0
 8008568:	f04f 0b00 	mov.w	fp, #0
 800856c:	2600      	movs	r6, #0
 800856e:	eba8 0504 	sub.w	r5, r8, r4
 8008572:	e0e4      	b.n	800873e <__kernel_rem_pio2+0x4b6>
 8008574:	f04f 0902 	mov.w	r9, #2
 8008578:	e754      	b.n	8008424 <__kernel_rem_pio2+0x19c>
 800857a:	f854 3b04 	ldr.w	r3, [r4], #4
 800857e:	bb0d      	cbnz	r5, 80085c4 <__kernel_rem_pio2+0x33c>
 8008580:	b123      	cbz	r3, 800858c <__kernel_rem_pio2+0x304>
 8008582:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008586:	f844 3c04 	str.w	r3, [r4, #-4]
 800858a:	2301      	movs	r3, #1
 800858c:	3201      	adds	r2, #1
 800858e:	461d      	mov	r5, r3
 8008590:	e74f      	b.n	8008432 <__kernel_rem_pio2+0x1aa>
 8008592:	bf00      	nop
 8008594:	f3af 8000 	nop.w
	...
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	0800c798 	.word	0x0800c798
 80085ac:	40200000 	.word	0x40200000
 80085b0:	3ff00000 	.word	0x3ff00000
 80085b4:	3e700000 	.word	0x3e700000
 80085b8:	41700000 	.word	0x41700000
 80085bc:	3fe00000 	.word	0x3fe00000
 80085c0:	0800c758 	.word	0x0800c758
 80085c4:	1acb      	subs	r3, r1, r3
 80085c6:	e7de      	b.n	8008586 <__kernel_rem_pio2+0x2fe>
 80085c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80085cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80085ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80085d6:	a90c      	add	r1, sp, #48	@ 0x30
 80085d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80085dc:	e737      	b.n	800844e <__kernel_rem_pio2+0x1c6>
 80085de:	f108 32ff 	add.w	r2, r8, #4294967295
 80085e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80085e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80085ec:	e7f3      	b.n	80085d6 <__kernel_rem_pio2+0x34e>
 80085ee:	a90c      	add	r1, sp, #48	@ 0x30
 80085f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	430a      	orrs	r2, r1
 80085f8:	e785      	b.n	8008506 <__kernel_rem_pio2+0x27e>
 80085fa:	3401      	adds	r4, #1
 80085fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008600:	2a00      	cmp	r2, #0
 8008602:	d0fa      	beq.n	80085fa <__kernel_rem_pio2+0x372>
 8008604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008606:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800860a:	eb0d 0503 	add.w	r5, sp, r3
 800860e:	9b06      	ldr	r3, [sp, #24]
 8008610:	aa20      	add	r2, sp, #128	@ 0x80
 8008612:	4443      	add	r3, r8
 8008614:	f108 0701 	add.w	r7, r8, #1
 8008618:	3d98      	subs	r5, #152	@ 0x98
 800861a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800861e:	4444      	add	r4, r8
 8008620:	42bc      	cmp	r4, r7
 8008622:	da04      	bge.n	800862e <__kernel_rem_pio2+0x3a6>
 8008624:	46a0      	mov	r8, r4
 8008626:	e6a2      	b.n	800836e <__kernel_rem_pio2+0xe6>
 8008628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800862a:	2401      	movs	r4, #1
 800862c:	e7e6      	b.n	80085fc <__kernel_rem_pio2+0x374>
 800862e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008630:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008634:	f7f7 ff6e 	bl	8000514 <__aeabi_i2d>
 8008638:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80088f8 <__kernel_rem_pio2+0x670>
 800863c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008648:	46b2      	mov	sl, r6
 800864a:	f04f 0800 	mov.w	r8, #0
 800864e:	9b05      	ldr	r3, [sp, #20]
 8008650:	4598      	cmp	r8, r3
 8008652:	dd05      	ble.n	8008660 <__kernel_rem_pio2+0x3d8>
 8008654:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008658:	3701      	adds	r7, #1
 800865a:	eca5 7b02 	vstmia	r5!, {d7}
 800865e:	e7df      	b.n	8008620 <__kernel_rem_pio2+0x398>
 8008660:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008664:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008668:	f7f7 ffbe 	bl	80005e8 <__aeabi_dmul>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008674:	f7f7 fe02 	bl	800027c <__adddf3>
 8008678:	f108 0801 	add.w	r8, r8, #1
 800867c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008680:	e7e5      	b.n	800864e <__kernel_rem_pio2+0x3c6>
 8008682:	f1cb 0000 	rsb	r0, fp, #0
 8008686:	ec47 6b10 	vmov	d0, r6, r7
 800868a:	f000 f94d 	bl	8008928 <scalbn>
 800868e:	ec55 4b10 	vmov	r4, r5, d0
 8008692:	4b9b      	ldr	r3, [pc, #620]	@ (8008900 <__kernel_rem_pio2+0x678>)
 8008694:	2200      	movs	r2, #0
 8008696:	4620      	mov	r0, r4
 8008698:	4629      	mov	r1, r5
 800869a:	f7f8 fa2b 	bl	8000af4 <__aeabi_dcmpge>
 800869e:	b300      	cbz	r0, 80086e2 <__kernel_rem_pio2+0x45a>
 80086a0:	4b98      	ldr	r3, [pc, #608]	@ (8008904 <__kernel_rem_pio2+0x67c>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 ff9e 	bl	80005e8 <__aeabi_dmul>
 80086ac:	f7f8 fa36 	bl	8000b1c <__aeabi_d2iz>
 80086b0:	4606      	mov	r6, r0
 80086b2:	f7f7 ff2f 	bl	8000514 <__aeabi_i2d>
 80086b6:	4b92      	ldr	r3, [pc, #584]	@ (8008900 <__kernel_rem_pio2+0x678>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	f7f7 ff95 	bl	80005e8 <__aeabi_dmul>
 80086be:	460b      	mov	r3, r1
 80086c0:	4602      	mov	r2, r0
 80086c2:	4629      	mov	r1, r5
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7f7 fdd7 	bl	8000278 <__aeabi_dsub>
 80086ca:	f7f8 fa27 	bl	8000b1c <__aeabi_d2iz>
 80086ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80086d0:	f10b 0b18 	add.w	fp, fp, #24
 80086d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80086d8:	f108 0801 	add.w	r8, r8, #1
 80086dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80086e0:	e720      	b.n	8008524 <__kernel_rem_pio2+0x29c>
 80086e2:	4620      	mov	r0, r4
 80086e4:	4629      	mov	r1, r5
 80086e6:	f7f8 fa19 	bl	8000b1c <__aeabi_d2iz>
 80086ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80086ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80086f0:	e718      	b.n	8008524 <__kernel_rem_pio2+0x29c>
 80086f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80086f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086f8:	f7f7 ff0c 	bl	8000514 <__aeabi_i2d>
 80086fc:	4622      	mov	r2, r4
 80086fe:	462b      	mov	r3, r5
 8008700:	f7f7 ff72 	bl	80005e8 <__aeabi_dmul>
 8008704:	4652      	mov	r2, sl
 8008706:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800870a:	465b      	mov	r3, fp
 800870c:	4620      	mov	r0, r4
 800870e:	4629      	mov	r1, r5
 8008710:	f7f7 ff6a 	bl	80005e8 <__aeabi_dmul>
 8008714:	3e01      	subs	r6, #1
 8008716:	4604      	mov	r4, r0
 8008718:	460d      	mov	r5, r1
 800871a:	e716      	b.n	800854a <__kernel_rem_pio2+0x2c2>
 800871c:	9906      	ldr	r1, [sp, #24]
 800871e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008722:	9106      	str	r1, [sp, #24]
 8008724:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008728:	f7f7 ff5e 	bl	80005e8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4650      	mov	r0, sl
 8008732:	4659      	mov	r1, fp
 8008734:	f7f7 fda2 	bl	800027c <__adddf3>
 8008738:	3601      	adds	r6, #1
 800873a:	4682      	mov	sl, r0
 800873c:	468b      	mov	fp, r1
 800873e:	9b00      	ldr	r3, [sp, #0]
 8008740:	429e      	cmp	r6, r3
 8008742:	dc01      	bgt.n	8008748 <__kernel_rem_pio2+0x4c0>
 8008744:	42ae      	cmp	r6, r5
 8008746:	dde9      	ble.n	800871c <__kernel_rem_pio2+0x494>
 8008748:	ab48      	add	r3, sp, #288	@ 0x120
 800874a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800874e:	e9c5 ab00 	strd	sl, fp, [r5]
 8008752:	3c01      	subs	r4, #1
 8008754:	e6fd      	b.n	8008552 <__kernel_rem_pio2+0x2ca>
 8008756:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008758:	2b02      	cmp	r3, #2
 800875a:	dc0b      	bgt.n	8008774 <__kernel_rem_pio2+0x4ec>
 800875c:	2b00      	cmp	r3, #0
 800875e:	dc35      	bgt.n	80087cc <__kernel_rem_pio2+0x544>
 8008760:	d059      	beq.n	8008816 <__kernel_rem_pio2+0x58e>
 8008762:	9b02      	ldr	r3, [sp, #8]
 8008764:	f003 0007 	and.w	r0, r3, #7
 8008768:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800876c:	ecbd 8b02 	vpop	{d8}
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008776:	2b03      	cmp	r3, #3
 8008778:	d1f3      	bne.n	8008762 <__kernel_rem_pio2+0x4da>
 800877a:	9b05      	ldr	r3, [sp, #20]
 800877c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008780:	eb0d 0403 	add.w	r4, sp, r3
 8008784:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008788:	4625      	mov	r5, r4
 800878a:	46c2      	mov	sl, r8
 800878c:	f1ba 0f00 	cmp.w	sl, #0
 8008790:	dc69      	bgt.n	8008866 <__kernel_rem_pio2+0x5de>
 8008792:	4645      	mov	r5, r8
 8008794:	2d01      	cmp	r5, #1
 8008796:	f300 8087 	bgt.w	80088a8 <__kernel_rem_pio2+0x620>
 800879a:	9c05      	ldr	r4, [sp, #20]
 800879c:	ab48      	add	r3, sp, #288	@ 0x120
 800879e:	441c      	add	r4, r3
 80087a0:	2000      	movs	r0, #0
 80087a2:	2100      	movs	r1, #0
 80087a4:	f1b8 0f01 	cmp.w	r8, #1
 80087a8:	f300 809c 	bgt.w	80088e4 <__kernel_rem_pio2+0x65c>
 80087ac:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80087b0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	f040 80a6 	bne.w	8008908 <__kernel_rem_pio2+0x680>
 80087bc:	9b04      	ldr	r3, [sp, #16]
 80087be:	e9c3 5600 	strd	r5, r6, [r3]
 80087c2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80087c6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80087ca:	e7ca      	b.n	8008762 <__kernel_rem_pio2+0x4da>
 80087cc:	9d05      	ldr	r5, [sp, #20]
 80087ce:	ab48      	add	r3, sp, #288	@ 0x120
 80087d0:	441d      	add	r5, r3
 80087d2:	4644      	mov	r4, r8
 80087d4:	2000      	movs	r0, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	2c00      	cmp	r4, #0
 80087da:	da35      	bge.n	8008848 <__kernel_rem_pio2+0x5c0>
 80087dc:	f1b9 0f00 	cmp.w	r9, #0
 80087e0:	d038      	beq.n	8008854 <__kernel_rem_pio2+0x5cc>
 80087e2:	4602      	mov	r2, r0
 80087e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087e8:	9c04      	ldr	r4, [sp, #16]
 80087ea:	e9c4 2300 	strd	r2, r3, [r4]
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80087f6:	f7f7 fd3f 	bl	8000278 <__aeabi_dsub>
 80087fa:	ad4a      	add	r5, sp, #296	@ 0x128
 80087fc:	2401      	movs	r4, #1
 80087fe:	45a0      	cmp	r8, r4
 8008800:	da2b      	bge.n	800885a <__kernel_rem_pio2+0x5d2>
 8008802:	f1b9 0f00 	cmp.w	r9, #0
 8008806:	d002      	beq.n	800880e <__kernel_rem_pio2+0x586>
 8008808:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800880c:	4619      	mov	r1, r3
 800880e:	9b04      	ldr	r3, [sp, #16]
 8008810:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008814:	e7a5      	b.n	8008762 <__kernel_rem_pio2+0x4da>
 8008816:	9c05      	ldr	r4, [sp, #20]
 8008818:	ab48      	add	r3, sp, #288	@ 0x120
 800881a:	441c      	add	r4, r3
 800881c:	2000      	movs	r0, #0
 800881e:	2100      	movs	r1, #0
 8008820:	f1b8 0f00 	cmp.w	r8, #0
 8008824:	da09      	bge.n	800883a <__kernel_rem_pio2+0x5b2>
 8008826:	f1b9 0f00 	cmp.w	r9, #0
 800882a:	d002      	beq.n	8008832 <__kernel_rem_pio2+0x5aa>
 800882c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008830:	4619      	mov	r1, r3
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	e9c3 0100 	strd	r0, r1, [r3]
 8008838:	e793      	b.n	8008762 <__kernel_rem_pio2+0x4da>
 800883a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800883e:	f7f7 fd1d 	bl	800027c <__adddf3>
 8008842:	f108 38ff 	add.w	r8, r8, #4294967295
 8008846:	e7eb      	b.n	8008820 <__kernel_rem_pio2+0x598>
 8008848:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800884c:	f7f7 fd16 	bl	800027c <__adddf3>
 8008850:	3c01      	subs	r4, #1
 8008852:	e7c1      	b.n	80087d8 <__kernel_rem_pio2+0x550>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	e7c6      	b.n	80087e8 <__kernel_rem_pio2+0x560>
 800885a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800885e:	f7f7 fd0d 	bl	800027c <__adddf3>
 8008862:	3401      	adds	r4, #1
 8008864:	e7cb      	b.n	80087fe <__kernel_rem_pio2+0x576>
 8008866:	ed35 7b02 	vldmdb	r5!, {d7}
 800886a:	ed8d 7b00 	vstr	d7, [sp]
 800886e:	ed95 7b02 	vldr	d7, [r5, #8]
 8008872:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008876:	ec53 2b17 	vmov	r2, r3, d7
 800887a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800887e:	f7f7 fcfd 	bl	800027c <__adddf3>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800888e:	f7f7 fcf3 	bl	8000278 <__aeabi_dsub>
 8008892:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008896:	f7f7 fcf1 	bl	800027c <__adddf3>
 800889a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800889e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80088a2:	e9c5 6700 	strd	r6, r7, [r5]
 80088a6:	e771      	b.n	800878c <__kernel_rem_pio2+0x504>
 80088a8:	ed34 7b02 	vldmdb	r4!, {d7}
 80088ac:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80088b0:	ec51 0b17 	vmov	r0, r1, d7
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	ed8d 7b00 	vstr	d7, [sp]
 80088bc:	f7f7 fcde 	bl	800027c <__adddf3>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4606      	mov	r6, r0
 80088c6:	460f      	mov	r7, r1
 80088c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088cc:	f7f7 fcd4 	bl	8000278 <__aeabi_dsub>
 80088d0:	4652      	mov	r2, sl
 80088d2:	465b      	mov	r3, fp
 80088d4:	f7f7 fcd2 	bl	800027c <__adddf3>
 80088d8:	3d01      	subs	r5, #1
 80088da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088de:	e9c4 6700 	strd	r6, r7, [r4]
 80088e2:	e757      	b.n	8008794 <__kernel_rem_pio2+0x50c>
 80088e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088e8:	f7f7 fcc8 	bl	800027c <__adddf3>
 80088ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80088f0:	e758      	b.n	80087a4 <__kernel_rem_pio2+0x51c>
 80088f2:	bf00      	nop
 80088f4:	f3af 8000 	nop.w
	...
 8008900:	41700000 	.word	0x41700000
 8008904:	3e700000 	.word	0x3e700000
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	9a04      	ldr	r2, [sp, #16]
 800890c:	601d      	str	r5, [r3, #0]
 800890e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8008912:	605c      	str	r4, [r3, #4]
 8008914:	609f      	str	r7, [r3, #8]
 8008916:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800891a:	60d3      	str	r3, [r2, #12]
 800891c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008920:	6110      	str	r0, [r2, #16]
 8008922:	6153      	str	r3, [r2, #20]
 8008924:	e71d      	b.n	8008762 <__kernel_rem_pio2+0x4da>
 8008926:	bf00      	nop

08008928 <scalbn>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	ec55 4b10 	vmov	r4, r5, d0
 800892e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008932:	4606      	mov	r6, r0
 8008934:	462b      	mov	r3, r5
 8008936:	b991      	cbnz	r1, 800895e <scalbn+0x36>
 8008938:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800893c:	4323      	orrs	r3, r4
 800893e:	d03b      	beq.n	80089b8 <scalbn+0x90>
 8008940:	4b33      	ldr	r3, [pc, #204]	@ (8008a10 <scalbn+0xe8>)
 8008942:	4620      	mov	r0, r4
 8008944:	4629      	mov	r1, r5
 8008946:	2200      	movs	r2, #0
 8008948:	f7f7 fe4e 	bl	80005e8 <__aeabi_dmul>
 800894c:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <scalbn+0xec>)
 800894e:	429e      	cmp	r6, r3
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	da0f      	bge.n	8008976 <scalbn+0x4e>
 8008956:	a326      	add	r3, pc, #152	@ (adr r3, 80089f0 <scalbn+0xc8>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	e01e      	b.n	800899c <scalbn+0x74>
 800895e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008962:	4291      	cmp	r1, r2
 8008964:	d10b      	bne.n	800897e <scalbn+0x56>
 8008966:	4622      	mov	r2, r4
 8008968:	4620      	mov	r0, r4
 800896a:	4629      	mov	r1, r5
 800896c:	f7f7 fc86 	bl	800027c <__adddf3>
 8008970:	4604      	mov	r4, r0
 8008972:	460d      	mov	r5, r1
 8008974:	e020      	b.n	80089b8 <scalbn+0x90>
 8008976:	460b      	mov	r3, r1
 8008978:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800897c:	3936      	subs	r1, #54	@ 0x36
 800897e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008982:	4296      	cmp	r6, r2
 8008984:	dd0d      	ble.n	80089a2 <scalbn+0x7a>
 8008986:	2d00      	cmp	r5, #0
 8008988:	a11b      	add	r1, pc, #108	@ (adr r1, 80089f8 <scalbn+0xd0>)
 800898a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800898e:	da02      	bge.n	8008996 <scalbn+0x6e>
 8008990:	a11b      	add	r1, pc, #108	@ (adr r1, 8008a00 <scalbn+0xd8>)
 8008992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008996:	a318      	add	r3, pc, #96	@ (adr r3, 80089f8 <scalbn+0xd0>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fe24 	bl	80005e8 <__aeabi_dmul>
 80089a0:	e7e6      	b.n	8008970 <scalbn+0x48>
 80089a2:	1872      	adds	r2, r6, r1
 80089a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80089a8:	428a      	cmp	r2, r1
 80089aa:	dcec      	bgt.n	8008986 <scalbn+0x5e>
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	dd06      	ble.n	80089be <scalbn+0x96>
 80089b0:	f36f 531e 	bfc	r3, #20, #11
 80089b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089b8:	ec45 4b10 	vmov	d0, r4, r5
 80089bc:	bd70      	pop	{r4, r5, r6, pc}
 80089be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80089c2:	da08      	bge.n	80089d6 <scalbn+0xae>
 80089c4:	2d00      	cmp	r5, #0
 80089c6:	a10a      	add	r1, pc, #40	@ (adr r1, 80089f0 <scalbn+0xc8>)
 80089c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089cc:	dac3      	bge.n	8008956 <scalbn+0x2e>
 80089ce:	a10e      	add	r1, pc, #56	@ (adr r1, 8008a08 <scalbn+0xe0>)
 80089d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d4:	e7bf      	b.n	8008956 <scalbn+0x2e>
 80089d6:	3236      	adds	r2, #54	@ 0x36
 80089d8:	f36f 531e 	bfc	r3, #20, #11
 80089dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089e0:	4620      	mov	r0, r4
 80089e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <scalbn+0xf0>)
 80089e4:	4629      	mov	r1, r5
 80089e6:	2200      	movs	r2, #0
 80089e8:	e7d8      	b.n	800899c <scalbn+0x74>
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w
 80089f0:	c2f8f359 	.word	0xc2f8f359
 80089f4:	01a56e1f 	.word	0x01a56e1f
 80089f8:	8800759c 	.word	0x8800759c
 80089fc:	7e37e43c 	.word	0x7e37e43c
 8008a00:	8800759c 	.word	0x8800759c
 8008a04:	fe37e43c 	.word	0xfe37e43c
 8008a08:	c2f8f359 	.word	0xc2f8f359
 8008a0c:	81a56e1f 	.word	0x81a56e1f
 8008a10:	43500000 	.word	0x43500000
 8008a14:	ffff3cb0 	.word	0xffff3cb0
 8008a18:	3c900000 	.word	0x3c900000
 8008a1c:	00000000 	.word	0x00000000

08008a20 <floor>:
 8008a20:	ec51 0b10 	vmov	r0, r1, d0
 8008a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008a30:	2e13      	cmp	r6, #19
 8008a32:	460c      	mov	r4, r1
 8008a34:	4605      	mov	r5, r0
 8008a36:	4680      	mov	r8, r0
 8008a38:	dc34      	bgt.n	8008aa4 <floor+0x84>
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	da17      	bge.n	8008a6e <floor+0x4e>
 8008a3e:	a332      	add	r3, pc, #200	@ (adr r3, 8008b08 <floor+0xe8>)
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	f7f7 fc1a 	bl	800027c <__adddf3>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f7f8 f85c 	bl	8000b08 <__aeabi_dcmpgt>
 8008a50:	b150      	cbz	r0, 8008a68 <floor+0x48>
 8008a52:	2c00      	cmp	r4, #0
 8008a54:	da55      	bge.n	8008b02 <floor+0xe2>
 8008a56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008a5a:	432c      	orrs	r4, r5
 8008a5c:	2500      	movs	r5, #0
 8008a5e:	42ac      	cmp	r4, r5
 8008a60:	4c2b      	ldr	r4, [pc, #172]	@ (8008b10 <floor+0xf0>)
 8008a62:	bf08      	it	eq
 8008a64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	e023      	b.n	8008ab6 <floor+0x96>
 8008a6e:	4f29      	ldr	r7, [pc, #164]	@ (8008b14 <floor+0xf4>)
 8008a70:	4137      	asrs	r7, r6
 8008a72:	ea01 0307 	and.w	r3, r1, r7
 8008a76:	4303      	orrs	r3, r0
 8008a78:	d01d      	beq.n	8008ab6 <floor+0x96>
 8008a7a:	a323      	add	r3, pc, #140	@ (adr r3, 8008b08 <floor+0xe8>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fbfc 	bl	800027c <__adddf3>
 8008a84:	2200      	movs	r2, #0
 8008a86:	2300      	movs	r3, #0
 8008a88:	f7f8 f83e 	bl	8000b08 <__aeabi_dcmpgt>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d0eb      	beq.n	8008a68 <floor+0x48>
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	bfbe      	ittt	lt
 8008a94:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008a98:	4133      	asrlt	r3, r6
 8008a9a:	18e4      	addlt	r4, r4, r3
 8008a9c:	ea24 0407 	bic.w	r4, r4, r7
 8008aa0:	2500      	movs	r5, #0
 8008aa2:	e7e1      	b.n	8008a68 <floor+0x48>
 8008aa4:	2e33      	cmp	r6, #51	@ 0x33
 8008aa6:	dd0a      	ble.n	8008abe <floor+0x9e>
 8008aa8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008aac:	d103      	bne.n	8008ab6 <floor+0x96>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	f7f7 fbe3 	bl	800027c <__adddf3>
 8008ab6:	ec41 0b10 	vmov	d0, r0, r1
 8008aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008abe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac6:	40df      	lsrs	r7, r3
 8008ac8:	4207      	tst	r7, r0
 8008aca:	d0f4      	beq.n	8008ab6 <floor+0x96>
 8008acc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b08 <floor+0xe8>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fbd3 	bl	800027c <__adddf3>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f7f8 f815 	bl	8000b08 <__aeabi_dcmpgt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d0c2      	beq.n	8008a68 <floor+0x48>
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	da0a      	bge.n	8008afc <floor+0xdc>
 8008ae6:	2e14      	cmp	r6, #20
 8008ae8:	d101      	bne.n	8008aee <floor+0xce>
 8008aea:	3401      	adds	r4, #1
 8008aec:	e006      	b.n	8008afc <floor+0xdc>
 8008aee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008af2:	2301      	movs	r3, #1
 8008af4:	40b3      	lsls	r3, r6
 8008af6:	441d      	add	r5, r3
 8008af8:	4545      	cmp	r5, r8
 8008afa:	d3f6      	bcc.n	8008aea <floor+0xca>
 8008afc:	ea25 0507 	bic.w	r5, r5, r7
 8008b00:	e7b2      	b.n	8008a68 <floor+0x48>
 8008b02:	2500      	movs	r5, #0
 8008b04:	462c      	mov	r4, r5
 8008b06:	e7af      	b.n	8008a68 <floor+0x48>
 8008b08:	8800759c 	.word	0x8800759c
 8008b0c:	7e37e43c 	.word	0x7e37e43c
 8008b10:	bff00000 	.word	0xbff00000
 8008b14:	000fffff 	.word	0x000fffff

08008b18 <_init>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	bf00      	nop
 8008b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	469e      	mov	lr, r3
 8008b22:	4770      	bx	lr

08008b24 <_fini>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	bf00      	nop
 8008b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2a:	bc08      	pop	{r3}
 8008b2c:	469e      	mov	lr, r3
 8008b2e:	4770      	bx	lr
